[
    {
        "id": "318a322694c0e8d7",
        "type": "tab",
        "label": "Lab Mint Box",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "682f80dcb9503c5e",
        "type": "tab",
        "label": "Fish: Depth/Volume Calculation Services",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9c733ef02f88472",
        "type": "tab",
        "label": "Fish: Control Fishinator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "12eb165a2e3227f2",
        "type": "tab",
        "label": "Fish: Input + Live Graphs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "48d1e9daf41c3154",
        "type": "tab",
        "label": "Fish: Event Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ae603f70a4e9e14",
        "type": "tab",
        "label": "Fish: short FFT Depth Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "db97f80ff5147756",
        "type": "tab",
        "label": "Fish: File Logging",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec6a1ca7762bce4e",
        "type": "tab",
        "label": "Fish: Histogramming",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a33e4f285e34df02",
        "type": "tab",
        "label": "Fish: Volume Abberation Bins",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7365b264de2bdff4",
        "type": "tab",
        "label": "Fish: Depth Spectrogram",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b40cba0a.4bf348",
        "type": "tab",
        "label": "Digital Compass (I2C)",
        "disabled": true,
        "info": ""
    },
    {
        "id": "2655b249.d9aa4e",
        "type": "tab",
        "label": "Aquaponic Framework",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d27b826f144e4210",
        "type": "tab",
        "label": "Daedalus: LS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d46a7cc.f2b958",
        "type": "tab",
        "label": "Furnace World",
        "disabled": true,
        "info": "All things furnace"
    },
    {
        "id": "1679c76605c63db4",
        "type": "tab",
        "label": "Blood Pressure",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7f4b805fc5436401",
        "type": "subflow",
        "name": "FFT analysis Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 580,
                "wires": [
                    {
                        "id": "669e034d5325bad3"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#00FFFF"
    },
    {
        "id": "f7ebd4e76f68c231",
        "type": "group",
        "z": "b9c733ef02f88472",
        "name": "Pumps",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "e2541b5c506c04db",
            "d111913793bd458d",
            "3a68ccd8d968f2f1",
            "6836770b4b4c14c8",
            "c33abc4397d8571f",
            "f846521551a3bf66",
            "c6cc4d4b0eec0a6c",
            "b2ccf13ecaf2a4b3",
            "4df6436e120c924b",
            "759bdfe40ba33f6b",
            "581a8650e5c2a352",
            "38a629a4d6b0bf70",
            "452831ddca36527b",
            "3bf810085283c1de",
            "bb635e04253cfc4d",
            "041d16e9e233650e"
        ],
        "x": 53.023441314697266,
        "y": 1440.8167629241943,
        "w": 990.5658683776855,
        "h": 487.9216079711914
    },
    {
        "id": "cf2db808c9c9e913",
        "type": "group",
        "z": "1679c76605c63db4",
        "name": "Blood Pressure and Heart Rate - Data Entry",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "7c650e5912e2d9e9",
            "e4b67dd365a0f65a",
            "01e89a8a9e392897",
            "5eeb381d03674050",
            "b3ad3f2a93c35345",
            "3840082f6a64e21f",
            "4e34f6695c7c3c3c",
            "b0be4c361b399496",
            "23963338e33ce1e4",
            "99c6450f780dc344",
            "6e6e7a4a9848cbd5",
            "fd8b984d330e7885",
            "bb33c65e944e6582",
            "95f0596d0901d68d",
            "d73698628b0b4ef9",
            "dc434a4997975dfb",
            "e8e81bd9b1785ce2",
            "ffc8332c97e468d2",
            "62620305b5c00282",
            "64d61884bd1b1565",
            "97078612b1e9c52a",
            "e95bb029e6bcf044"
        ],
        "x": 33.07986958821613,
        "y": 52.387765884399414,
        "w": 1136.3624369303386,
        "h": 573.3471298217773
    },
    {
        "id": "93966c0d9154bf1a",
        "type": "group",
        "z": "1679c76605c63db4",
        "name": "Display Graph locally in browser",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "f6a14855e979be98",
            "802d7b3f74a05af8",
            "4110f2e76abb63d5",
            "fa8b1d51952da144",
            "40deb6bbd22880d1",
            "f2834245908bf8be",
            "7d23e28bfcfadab8",
            "e057a03af9a30f69",
            "e966d3664fa59dab",
            "7829b3c55b658c4d",
            "b8a5cb9fdb8f2fbd",
            "b2253363ef8e886b",
            "e8e8339822c113cf",
            "a842cf72ccf815a1",
            "0c0ed60cdbcc5391"
        ],
        "x": 85.16138076782227,
        "y": 686.6104764938354,
        "w": 1582.7877616882324,
        "h": 350.63103103637695
    },
    {
        "id": "33113df57b9bc691",
        "type": "group",
        "z": "682f80dcb9503c5e",
        "name": "Calculate Depth Offset",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "7ad3be4db0a3d0e6",
            "6c1b8ebb1d771b52",
            "b5f2bee84be238cc",
            "fa20d3e271a6da1c",
            "d8bf581811f19437",
            "5170ac8fe7bc6cd3",
            "fcacf10a5dd74da0",
            "719db83d57190da2",
            "5fa46f6301b509c4",
            "cad09dba6e0c8e47",
            "1c82842d226f85c5",
            "5aea9ef24d1d4c5f",
            "d453d78015e331e9",
            "3306ec7d1b3869dc"
        ],
        "x": 154,
        "y": 99
    },
    {
        "id": "8877814897adab9a",
        "type": "group",
        "z": "682f80dcb9503c5e",
        "name": "Set Calibration Volume",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "fe8ffba25d96b765",
            "696a32cb9a828e73",
            "bf1f43bfb5e45960",
            "d2f54bc2d0c982fa",
            "f486f7fcfe803a2d",
            "c1632b9178641d7d",
            "1f208047435ea5d6",
            "2cfd80d8e9dc6d5d",
            "445fb174fb30c08f"
        ],
        "x": 158.2858428955078,
        "y": 521.8572721481323
    },
    {
        "id": "3c82997a3fe65f2d",
        "type": "group",
        "z": "682f80dcb9503c5e",
        "name": "Default Fishinator Values",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "7b3bf351b8d0f47f",
            "a32d6944a5fb0ee5",
            "0c35b49a1784cca6",
            "dc53fecff20c23a9",
            "cb5412183fb780fe",
            "6c20318ba78e2f5e",
            "ede133a3b92a65e6",
            "16c40c4030caf0e3",
            "6e8084c8aefd7ebf",
            "a17ae91f9ed5e1f5",
            "6c0decb58bd5e82a",
            "bbd233e90db23698",
            "51253b5af474936b"
        ],
        "x": 157.09529876708984,
        "y": 760.1905307769775
    },
    {
        "id": "4c6a1975a1aa08d1",
        "type": "group",
        "z": "b9c733ef02f88472",
        "name": "Default Pump Measure settings",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "89c1efcca4f8379c",
            "993a07758c6a820c",
            "341c3f519513eecf",
            "b5b77122b9bad2a9",
            "ad3bb4aa48f97152",
            "ff73705b98c43175",
            "467c54de94b91cb2",
            "993d875a58a81354",
            "c86cb139b5256d4a",
            "43b8743e60597d0e",
            "a1f5eb629b0bac1a",
            "e4dd9bb596ff6ba1",
            "10c8ff0379b691c0"
        ],
        "x": 53.20647430419922,
        "y": 73.13693809509277,
        "w": 1494.364315032959,
        "h": 298.8949203491211
    },
    {
        "id": "db65042931eccfc1",
        "type": "group",
        "z": "682f80dcb9503c5e",
        "name": "RESTful /Services/VolumeDiff ",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "da259817f5aaeb73",
            "dd39d6769975fd11",
            "4eb10fc01e60a461",
            "0ea9bf1b039128a0",
            "22bf8a30cd3a5634",
            "ca18018514f976da",
            "555073cffb51e748",
            "19d1bb905c215d8d",
            "b99bb99506167123",
            "92dbdc8895839347",
            "18cd7c8ffdda511f",
            "a3de3804d95331ea",
            "bfd12aba302ca28b",
            "ca103509e7058e72"
        ],
        "x": 157.4920883178711,
        "y": 1102.7104845046997
    },
    {
        "id": "1f89f3d6c980c45e",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "name": "FFT Dashboard Configuration",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "d43a2d975ce1fd3b",
            "d61863ee158dbe5e",
            "3f9bfdf5224dc1b3",
            "f62b319c35371785",
            "ea6137d4292e491f",
            "7784540128aa3fbe",
            "cb4949a55bc606fb",
            "89fb8b1b4220ebc3",
            "0b01cd30185d9bd3",
            "d2dceb7b6f2e30a8",
            "7fdc85bff0fe8cc9",
            "8f94f02204a94f05",
            "3277df8729dfccc8",
            "9cf6986215f262fe",
            "50b2a33231b06f32",
            "a4c790fb0312d13f",
            "b03f19a34aaf997c",
            "753604be24ab68d1"
        ],
        "x": 227.5556411743164,
        "y": 803.0005626678467,
        "w": 811.0854339599609,
        "h": 522.0000076293945
    },
    {
        "id": "d461a2ee89a36ec9",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "name": "CLEAR UI",
        "style": {
            "label": true
        },
        "nodes": [
            "e3fdfef2e3c75dce",
            "df0204e9cd4a76da",
            "90e977df1105fca5",
            "974b606ce24f139c"
        ],
        "x": 1128.954704284668,
        "y": 1194.3823728561401,
        "w": 361.328875541687,
        "h": 121.53965854644775
    },
    {
        "id": "bab8c992c45c0254",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "name": "FFT-source steady-state depth",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "c83b383690b9d184",
            "0ff653b8dff350df",
            "a0bc67968b69d692",
            "c55dcdc3a8b52992",
            "b64b62e49463e22b",
            "7f54c870048434e3",
            "85b08dafc066cd59",
            "f026eb415ef86e0f"
        ],
        "x": 1338.7622680664062,
        "y": 206.02424335479736,
        "w": 1190.571418762207,
        "h": 167.71423244476318
    },
    {
        "id": "c0fdf8a256575b08",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ba08e7a090cdac9c",
            "da913ddf9723f31c",
            "c97a2177beea5049",
            "dd3bed64f1dc02c6",
            "104c950aac75120f"
        ],
        "x": 2115.500663757324,
        "y": 1119.4763259887695,
        "w": 392,
        "h": 240.2010850906372
    },
    {
        "id": "ca9eaa91e1e5454c",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "name": "FFT calc",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "f20f9fc3570389f4",
            "6e1375ab5fc707d9",
            "a315a19f96128d12",
            "f9ebf34253fbd688",
            "890fc14c98d44686",
            "beab9a209235b1dc",
            "e3134c413767e03c",
            "5f98346b0cd2cc32",
            "781f10dc9e12b370",
            "bbbbfef5c0587672",
            "e17170831a1a1b1b",
            "0f573e62ee884616",
            "e833cfd20fe3bfa2",
            "5901b88dd38ca2a8",
            "c787922b79e7db92",
            "f40c7dc5fbcc2d9e",
            "9d3afa3fdfc110e5",
            "f8e02ca0fbf3f4e6",
            "c0a062c9cdc4d946"
        ],
        "x": 241.00009155273438,
        "y": 413.666823387146,
        "w": 1063.6666526794434,
        "h": 365.33345794677734
    },
    {
        "id": "e2a768de188dc0b8",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "395eebcf926884f5",
            "6f0ac1cec4d5e6c0",
            "cb15c26c10b4d188",
            "8786065b874f69fd",
            "2ca49f56c7e94043",
            "fe487465865cbc55",
            "a1c830f957bd3fea",
            "cb59272133e3d516"
        ],
        "x": 603.1668701171875,
        "y": 124.6667890548706,
        "w": 692,
        "h": 262
    },
    {
        "id": "367d603d3ebe1a2b",
        "type": "group",
        "z": "7ae603f70a4e9e14",
        "name": "local FFT display",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "198c3b65f3b1f66b",
            "9c55813007abd395",
            "1ee1d8e7d97c0436",
            "f248f4c114b92660",
            "bac0eee676981e38",
            "ea83601dd10e8255",
            "42992f8cb33f27cd",
            "c0262b19c97b6e0e",
            "264125ac141fcbc2",
            "d4b2aac6a976cfa1",
            "1d6c61a9832796ed",
            "daeeb7e04ebe07b6",
            "36b81cea4e65bac5",
            "0a7f2b1871654d2a",
            "0bfca062d05d2e3a",
            "57529332168adc4c",
            "43273ebb74a60b92",
            "9e6c2d8d9ff8c8fe",
            "f5e00e10d042be31",
            "3a9509fe3a0782ff",
            "42e5cbdc7f41c170",
            "abcc772a5138145a",
            "4fbcd7d17c6bfe87",
            "fb448a7f13323c59",
            "afbf0312e4e43ff9",
            "9f1506aa7a900697"
        ],
        "x": 1329.8571128845215,
        "y": 414.500093460083,
        "w": 1191.000576019287,
        "h": 674.8575248718262
    },
    {
        "id": "a23c0834275c9395",
        "type": "group",
        "z": "ec6a1ca7762bce4e",
        "name": "Histogram from input data",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "a73d97a5705dcabc",
            "906eba5f443c383d",
            "b07cd71bfd5375dd",
            "18a9f7a920db48b8",
            "cf862f0fa523ced4",
            "e60eb97359c23acf",
            "12c159d7574fda4c",
            "b98717b61fcb9784",
            "6d6351956018f3f9",
            "26edbb4cdf2b09ce",
            "90d92b2b07adb0bc",
            "31a4582d4b7d4c02",
            "db1f28774ce1c4f5",
            "0ef0c2259e4435ba",
            "455c0ff6cd1cc043",
            "25443186c0bec9ab",
            "8e41708877b1608a",
            "9fa2b91a88909f13",
            "9a243e1b6bdcd220",
            "61267df0a036de68",
            "030834c3dbd6b832",
            "432d1a40.c81184",
            "e476d7169c25a1a5",
            "9391a398c1695c54",
            "f0d5851874134cac",
            "a36f4b24f2a48968",
            "a95c28559e1bec5c",
            "d86ede1b52fa50fd",
            "ac7e53c2dfc9a8a8",
            "dd1adbc03a28a875",
            "d1da8064cb64cf4c"
        ],
        "x": 600.6666107177734,
        "y": 659,
        "w": 1685.3333892822266,
        "h": 601.999677658081
    },
    {
        "id": "e75aed1b3e63d102",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "This no longer has purpose",
        "style": {
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "b9651e127d01dfee",
            "ce2abbba0f417c5d",
            "d1b9d7d553ecdbfa",
            "c562c046446c3877",
            "19e45bb4ea8943a4",
            "1789f286e36079e8",
            "305417155002157e",
            "ed2c3b42683e712f",
            "0a8f8b8267f52c8d",
            "57c957211b2d667d",
            "ec729f32e863ce05",
            "b9fc3ee6aebfbab0",
            "f3ef94b484f16057"
        ],
        "x": 151.49996185302734,
        "y": 1011.5002093315125,
        "w": 1192,
        "h": 310.33323860168457
    },
    {
        "id": "56db06dea7e19245",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f9c99f73.06366",
            "81fc1d3d.7e03e",
            "28d8b2bb.d7274e",
            "cd5c4fa4.32a3b"
        ],
        "x": 1394.0000457763672,
        "y": 202.33330249786377,
        "w": 462,
        "h": 122
    },
    {
        "id": "9ddbb5706ec334b2",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "Temperature Display",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "12db3e620fc7a848",
            "7cc76417b1d388ff",
            "428613c7bf3532ed",
            "24a4bfed0150a029",
            "197d7e7777f2ead7",
            "e721b7b93d220764",
            "616fde658d80157c",
            "d4b665c3846eafcd",
            "ce5a6e75ad2f7876",
            "795dc160deb37f46",
            "719da17e38ae2e2c"
        ],
        "x": 204.63494873046875,
        "y": 255.3789496421814,
        "w": 1044.2222862243652,
        "h": 179.3611569404602
    },
    {
        "id": "6d917c3029e21bf3",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "Heartbeat",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "e7450b4155ef5bb3",
            "7cbaedbcee740b27",
            "3ee64059a5794383",
            "3e0096d034202bba",
            "658ae903229f4592",
            "14ef5ebb90e56c68",
            "6ea06f74904c562c"
        ],
        "x": 1394.3810272216797,
        "y": 356.9047613143921,
        "w": 632,
        "h": 162
    },
    {
        "id": "a669d435cdaeb42c",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "Minimum and Maximum",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "3724133a4c38f963",
            "7be34010e147b570",
            "d3b27917141ffe5a",
            "6d2dbbc8ce506c26",
            "adc701c949545b88",
            "a197044a34dbba5f",
            "965918e38b5247c3",
            "0c6b70ade3b74108",
            "0472861a2fef2f35",
            "df40062cfc313f36",
            "2839e7104ee08d09",
            "20feae88e9c64b69",
            "dec6feb23248548a",
            "c55a37947321ef3b",
            "10fe88e84d9b611f",
            "834808dc22ee2ad7",
            "e6158370d6cdd543",
            "27d11ae9a5407df4",
            "b9645a9a8c83e685"
        ],
        "x": 1424.0000076293945,
        "y": 957.6666855812073,
        "w": 1373.4286966323853,
        "h": 411.42864894866943
    },
    {
        "id": "03f7f54193104c9a",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "Depth Data Manipulation",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "06a972c0d236fa22",
            "c4efad5c32715b45",
            "f27f4d9ca1cd35bf",
            "b132b6bd04b54306",
            "3b7e2eb5a55a8394",
            "03e15373aefa1f5e",
            "d1db82716919fd37",
            "9948c45dde9c8561",
            "0c249d3f7c581c6d",
            "f7dad9e0dde32040",
            "b84f481c0c3e8243",
            "49aa253b814dbb48",
            "09a17d82678bd53d",
            "32fcf8759aea9c8d",
            "78b13ffdfa8a0e3f",
            "7349ade3c692e0d8"
        ],
        "x": 256.8572196960449,
        "y": 584.238091468811,
        "w": 1004.8572616577148,
        "h": 340.5713939666748
    },
    {
        "id": "5e4c8e72a2708336",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "1st Derivative",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "5596fed7.aa69",
            "0bcca8bdcf1e3e09",
            "3b9cbbd129ef06e1",
            "055642bc0f54577a",
            "526b7630703b7dbb",
            "37433f3480417821",
            "53d6e2945bdea4b4",
            "cb03bd7b47c435ab",
            "a46e2c372e236f65",
            "e15b953ba394288b",
            "237805b4c99e35db",
            "85e2b6e5247aa723",
            "7a23bcc17c45392c",
            "0511233d0d774d1d",
            "44fe59cf56ba57f5",
            "a3a7ca1520e26768",
            "38cd8813580e41e6",
            "e6c230d5fde63c29"
        ],
        "x": 1422.5717468261719,
        "y": 565.6666870117188,
        "w": 1143.4287338256836,
        "h": 362
    },
    {
        "id": "cd41f03dc27972a4",
        "type": "group",
        "z": "48d1e9daf41c3154",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3fbdf1c21e0130f4",
            "9de27e22defa7b0b",
            "04712fbdadac8682",
            "d9f81b05d1ce676d",
            "14ecfb0f0ecc9636",
            "335a2209a4083a1d",
            "4f0b84e0f1de9dc9",
            "3b1794810ed3ee45",
            "65d232c61da9bc87",
            "c891a2602d7aa2e9",
            "03a03bd10f9a65d3",
            "18e61900daf5e34e",
            "b958cd9e4a9009d4",
            "ebf54d182970f9de",
            "d2ae3ac0d646cecf",
            "fd9b64f0d810380e",
            "39f0f5e2df6446b7",
            "0e1b852976cf8dae",
            "eb75b932df5a5d44",
            "7041b6c9f576964d",
            "0de44ed4e530edcd",
            "76cf86c920e41a65",
            "2c0b806788c64dbf",
            "078a6329f1f30b9f",
            "7a65feea44a019cb",
            "292c9224d537f8e8",
            "bebf3c94211c01da",
            "a9d9f11f7d0033ee",
            "d70547cb69c792cf",
            "826c91cf2c11dd3d",
            "148534975e92fd9c",
            "657e5376ec3f27a2",
            "7dec1bdb9d037983",
            "485be57c3f310348",
            "0d69ce984f3c8404",
            "9b1eb37312d409a6",
            "425a72797a92a282",
            "cc4af4d9fabe6e49"
        ],
        "x": 136.0000762939453,
        "y": 87.00001049041748
    },
    {
        "id": "683ff17beb31c66e",
        "type": "group",
        "z": "b9c733ef02f88472",
        "name": "Growspace Air temperature control (enable/disable)",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "d6e1afa365ab21f9",
            "96e53a7d42ea7a5e",
            "fefca3e13845717d",
            "b7b9a05f7c4bd957",
            "3a34b8096e5d1ccd",
            "1ebbbd37a4922737",
            "b1f5b4f6ad98aa51",
            "ca17ce192b856166",
            "175d411cc5ae536a",
            "fab0f46ae45dcb34",
            "97ab7258e5cebd05",
            "e03e6bcb225cd759",
            "fb5e471417905b7c",
            "3967da408d12e792",
            "15f3af3d1a0c031c",
            "9176ec48f42fbc37",
            "1deeb4f64323078b",
            "627fe8a74df25b79",
            "24fa448edba0acea",
            "448f549772418690",
            "ccae7be753f1ab1e"
        ],
        "x": 58.83491134643555,
        "y": 1084.8845405578613,
        "w": 1636.9916687011719,
        "h": 314.84231758117676
    },
    {
        "id": "8bbe1a2ce979e8f3",
        "type": "group",
        "z": "682f80dcb9503c5e",
        "name": "RESTful /Services/Depth4Volume",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "a916093ea383cdd3",
            "fbb5dcb06a90e5d9",
            "bbe58fad524e8877",
            "7859c55574c46fe8",
            "7b5f82eb9c5ba3d1",
            "7d91f707120f9556",
            "8fe34d4a6d8dc73c",
            "237d3ef026d81ad5",
            "abdb5fb4d09c14a7",
            "95dcdc3246e92cae",
            "e9e1ac11d88b556d",
            "6505c3f41067ba7a",
            "ca07ef0f8ac095c0",
            "72ccca9464ed755e",
            "a7b56e87e3fb2c92",
            "8292cb22bd3d0695",
            "d7346a74d8d212d6"
        ],
        "x": 159.45062255859375,
        "y": 1453.4397068023682
    },
    {
        "id": "aacab5d54d21372d",
        "type": "group",
        "z": "b9c733ef02f88472",
        "name": "Fishinator  Config Services",
        "style": {
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "ccad0489e42cecfe",
            "e078d96feb6b5a41",
            "b6baeabdb397f968",
            "b7336b3434808d08",
            "1eb1e4fb93abc207",
            "11c669a539ad0ac2",
            "e188346dc9090cad",
            "ca64f247f25c3e7a",
            "fce47ad878ca7724",
            "880559e7e95f3933",
            "2cefd1be46323c1a",
            "fb3b9ea01d1116ab",
            "6dc549fe9eb70d2c",
            "4c2b11bc92e817cd",
            "c92478911b6b5781",
            "bd559ea062167d31",
            "58999d17e202cd76",
            "f1b92d5df6d6835d",
            "20636ecb9344c436",
            "eaf8fc6fa785f5e1",
            "448c119578f70e69",
            "9d75aac659c24b2a",
            "93658ef1aa02927d",
            "5a39b49db0d35b38",
            "de2164ede339cc1c",
            "924dc06be34650f0"
        ],
        "x": 1792.1597264607753,
        "y": 24.775524139404297,
        "w": 994.5699043273926,
        "h": 641.6062867395312
    },
    {
        "id": "5cf488ebd61047ee",
        "type": "group",
        "z": "b9c733ef02f88472",
        "name": "FANs ON/OFF",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "f48631d46c751c09",
            "e967354c8c96976c",
            "1feed8b0fae9c851",
            "229d521383f88e7c",
            "44238a10c29ece55",
            "e432bf6ba8d5546f",
            "25a1a03e40176df2",
            "93279a6e9643fca5",
            "01fb8f92583d2aec",
            "af813f2a7686cf91",
            "af360c3a1c2a9869",
            "774bdb415d094414",
            "64e7700bf151623e",
            "ca3e617178cee49b",
            "f66630bf2d17bfd3",
            "25a00209e60ab637",
            "e2d431b69eeeb3de",
            "5b3fd2d2b4e33d17",
            "7225f2b2f325359d",
            "0a917ea37c269dfe",
            "6dbf997b9fdf165c",
            "2519d2e0214c5b45",
            "d462021189cd0e5d",
            "95894eb54115e998",
            "e43bcd3e216d77a3",
            "d47f5564e0a35180",
            "78642e55afa3291a"
        ],
        "x": 2383.0442810058594,
        "y": 1673.4024443664548,
        "w": 888.574764251709,
        "h": 799.5761699676514
    },
    {
        "id": "5fa53ee46f48dcb4",
        "type": "group",
        "z": "318a322694c0e8d7",
        "name": "Momentary Switch",
        "style": {
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "b7e6e774d29aaa35",
            "56e6e5e73a56798d",
            "59094e903cd3cbbb",
            "b6a543c5071f700e"
        ],
        "x": 254.75233459472656,
        "y": 1251.7432126998901
    },
    {
        "id": "ddeae6ecdcf2c128",
        "type": "group",
        "z": "1679c76605c63db4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "57af527ef271872c",
            "22d64b3aa18db696",
            "6ce33e7211b38dc9",
            "81c90a123b3b9228",
            "12e0e8d9894c25dc"
        ],
        "x": 1183.8262939453125,
        "y": 1186.5752037315367,
        "w": 672.0057678222656,
        "h": 210.32165209960954
    },
    {
        "id": "4d9552fe8ed150d4",
        "type": "group",
        "z": "12eb165a2e3227f2",
        "name": "Linear Regression to extract average depth and flow rate",
        "style": {
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "b307c3247ca32050",
            "74b8595094e7b918",
            "489f01d1d5ad8375",
            "3c0278688e4d985c",
            "e225197f3f56f3fd",
            "01754c0e7e6af565",
            "ee59211a7992f946",
            "84cc238882299f16",
            "c342a24cd21bd759",
            "170ce8fe5a7bcc6b",
            "782da88d397e490f",
            "b1dbf048da8c37a5",
            "7d8ba4a0a2444e10",
            "862268304494b82c",
            "06d6585183d86588",
            "da9866469c2f09c0",
            "b6ad89ee1c41b999",
            "9f4c26c6292d391b"
        ],
        "x": 148.42031288146973,
        "y": 1362.52933883667,
        "w": 1115.7630910873413,
        "h": 371.42698097229004
    },
    {
        "id": "85b05f80f54ac690",
        "type": "ui_tab",
        "name": "Lab Mint One",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3de4841eb371c7d3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "63803e9f696533bf",
        "type": "ui_group",
        "name": "Location Services",
        "tab": "217b4ec3.de84b2",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "88f77589.0122d8",
        "type": "ui_group",
        "name": "Pie",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "43d19c44499a2794",
        "type": "ui_tab",
        "name": "Fishinator Services",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "85709d7cd14aee72",
        "type": "ui_group",
        "name": "Calibrate depth offset",
        "tab": "43d19c44499a2794",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "9f041309796e21ba",
        "type": "ui_group",
        "name": "Depth&Volume Calculations",
        "tab": "43d19c44499a2794",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "5d28b5a9dddb7718",
        "type": "websocket-listener",
        "path": "/ws/temperature",
        "wholemsg": "true"
    },
    {
        "id": "dcd4a221e6419524",
        "type": "websocket-listener",
        "path": "/ws/waterdepthpacket",
        "wholemsg": "true"
    },
    {
        "id": "a7bbf5b0d338a332",
        "type": "ui_tab",
        "name": "Fishinator Live Graphs",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "24fde1be574da614",
        "type": "ui_group",
        "name": "Water Depth",
        "tab": "a7bbf5b0d338a332",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d25d1ee3.2da2e",
        "type": "ui_group",
        "name": "Configuration",
        "tab": "e4851a5b.1b7ae8",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e4851a5b.1b7ae8",
        "type": "ui_tab",
        "name": "Fishinator Dashboard",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5510ef78b8261708",
        "type": "ui_group",
        "name": "Temperatures",
        "tab": "a7bbf5b0d338a332",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "56838d31b706d5b3",
        "type": "ui_group",
        "name": "State Duty Cycle",
        "tab": "9120779398a1a3c5",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "4a4c0323d3062a9d",
        "type": "ui_group",
        "name": "Status",
        "tab": "a7bbf5b0d338a332",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "89749fb7.87f01",
        "type": "ui_group",
        "name": "Charts",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "6"
    },
    {
        "id": "ab397e95.29ebe",
        "type": "ui_group",
        "name": "Inputs",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "6"
    },
    {
        "id": "4e7edda4.417004",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "",
        "order": 3,
        "disp": false,
        "width": "6"
    },
    {
        "id": "9120779398a1a3c5",
        "type": "ui_tab",
        "name": "Fishinator Analysis",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "217b4ec3.de84b2",
        "type": "ui_tab",
        "name": "Daedalus",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "59061a176bcf3fac",
        "type": "ui_group",
        "name": "Annoy",
        "tab": "217b4ec3.de84b2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "914164c06452d25a",
        "type": "ui_group",
        "name": "Mint",
        "tab": "85b05f80f54ac690",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1b0a16a6289a0b7",
        "type": "ui_group",
        "name": "Map",
        "tab": "217b4ec3.de84b2",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "73d4e1821f59f9a0",
        "type": "ui_group",
        "name": "Depth Change",
        "tab": "a7bbf5b0d338a332",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "f6911848ab7866a8",
        "type": "ui_group",
        "name": "System Configs",
        "tab": "43d19c44499a2794",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "de4aabe88cbd2aa6",
        "type": "ui_group",
        "name": "File review",
        "tab": "43d19c44499a2794",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d56303e9864f1712",
        "type": "ui_group",
        "name": "Depth Logging",
        "tab": "43d19c44499a2794",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "bea23e66643ca7ab",
        "type": "ui_group",
        "name": "Depth short FFT Analysis",
        "tab": "a7bbf5b0d338a332",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "f446d13f.182bd",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "bdc8ce6f.4037b",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "20",
        "collapse": false
    },
    {
        "id": "5f821c044b7e075b",
        "type": "ui_group",
        "name": "Eerie AI Eye",
        "tab": "9120779398a1a3c5",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "f2720420ca6aabc2",
        "type": "ui_group",
        "name": "Depth Spectral time plot",
        "tab": "a7bbf5b0d338a332",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "22787703.a0e968",
        "type": "ui_group",
        "name": "Web push notifications",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "992be2bfd81a60f3",
        "type": "ui_group",
        "name": "Histogram",
        "tab": "a7bbf5b0d338a332",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "30087beb77f6e448",
        "type": "websocket-listener",
        "path": "/ws/test",
        "wholemsg": "true"
    },
    {
        "id": "eefb1db76c385ba6",
        "type": "ui_group",
        "name": "Evaporation",
        "tab": "9120779398a1a3c5",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4779e839f632c450",
        "type": "account",
        "phoneNumber": "+17787222149",
        "password": "fishbot",
        "dataStoreDirectory": "signaldatastore",
        "liveServer": true,
        "accountName": "fish signal reg"
    },
    {
        "id": "51e2cf908068117a",
        "type": "account",
        "phoneNumber": "+17787222149",
        "password": "fishbot",
        "dataStoreDirectory": "signaldatastore",
        "liveServer": false,
        "accountName": "fish"
    },
    {
        "id": "190d0afc.e6f2f5",
        "type": "ui_group",
        "name": "thermistor debug only",
        "tab": "6ef8a475.91075c",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "a62b14ff.59d4e8",
        "type": "ui_group",
        "name": "Interface One",
        "tab": "36b65d6b.c949a2",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c49fd109.3b603",
        "type": "ui_group",
        "name": "Furnace World",
        "tab": "6ef8a475.91075c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "3e728e23.c18d72",
        "type": "ui_group",
        "name": "Interface One",
        "tab": "6ef8a475.91075c",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "553da004.aac26",
        "type": "ui_group",
        "name": "Temperature Tests",
        "tab": "6ef8a475.91075c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "551ae7d6.aae518",
        "type": "ui_group",
        "name": "T, dT/dt and Tau",
        "tab": "6ef8a475.91075c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "6ef8a475.91075c",
        "type": "ui_tab",
        "name": "RPi",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "36b65d6b.c949a2",
        "type": "ui_tab",
        "name": "Cam's Home Monitor",
        "icon": "dashboard",
        "order": 11
    },
    {
        "id": "a3cdac5d5e29d614",
        "type": "ui_tab",
        "name": "Blood Pressure Entry",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "209041db3755ab7a",
        "type": "ui_group",
        "name": "Entry",
        "tab": "a3cdac5d5e29d614",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "fb506774afbf57bd",
        "type": "ui_group",
        "name": "Charting",
        "tab": "a3cdac5d5e29d614",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2b4408fb9e7a1cc4",
        "type": "ui_tab",
        "name": "Control Fishinator",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e071eaadf91aa1bd",
        "type": "ui_group",
        "name": "Pump Measurement Config",
        "tab": "2b4408fb9e7a1cc4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "5003631.3bc729c",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5079c1ffbb1166b1",
        "type": "ui_spacer",
        "z": "b9c733ef02f88472",
        "name": "spacer",
        "group": "fecf8fc1bf232338",
        "order": 3,
        "width": "1",
        "height": "2"
    },
    {
        "id": "afc83a6a6bc0b8e4",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "0412e862fd26c172",
        "type": "ui_tab",
        "d": true,
        "name": "FFT Subflow Dashboard",
        "icon": "dashboard",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "02df662f88a4ddfc",
        "type": "ui_group",
        "name": "FFT Subflow Group",
        "tab": "0412e862fd26c172",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "5477f5a966926604",
        "type": "ui_spacer",
        "z": "ec6a1ca7762bce4e",
        "name": "spacer",
        "group": "992be2bfd81a60f3",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "e40e97d4.1356e8",
        "type": "ui_group",
        "name": "Menu",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f2aefa84.a9a108",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b09937f3.b814f8",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "75944167.0434b",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c4c08f68c2291876",
        "type": "ui_group",
        "name": "Air Temperature Control",
        "tab": "2b4408fb9e7a1cc4",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "fecf8fc1bf232338",
        "type": "ui_group",
        "name": "Hard Controls",
        "tab": "2b4408fb9e7a1cc4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d6b31fdeabeda609",
        "type": "ui_group",
        "name": "Depth Linear Regression",
        "tab": "a7bbf5b0d338a332",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e4eda8c90c2735e5",
        "type": "ui_group",
        "name": "Sorts",
        "tab": "a3cdac5d5e29d614",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "6272edf4f1577d3d",
        "type": "ui_group",
        "name": "Annotation (timestamped)",
        "tab": "a3cdac5d5e29d614",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "25af8fe544d9398c",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "fft wrapper (2^N only)",
        "func": "var a = msg.payload.length;\nvar b = Math.log(a)/Math.log(2);\n\nif ((b != Math.floor(b) ) || (1 >= a ))\n{\n    node.status({text:\"Reject: Not a natural power of two (\"+a+\")\"});\n    return null; //not a power of two (and at least two)\n}\n\n    node.status({text:\"processing array size (\"+a+\")\"});\n\n var fftjs = context.global.fftrootjs;\n\n var timestamp1 = Date.now();\n msg.fft = fftjs.fft(msg.payload);\n msg.fftcalcdelay = (Date.now())-timestamp1;\n\n    node.status({text:a+\"-sample FFT -- Calc time: \"+msg.fftcalcdelay});\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 520,
        "wires": [
            [
                "6c5cf929de038076",
                "bb1e882a5e0c539a",
                "dcbbc6ecfde4b5f6",
                "875f464a612e1ae7"
            ]
        ]
    },
    {
        "id": "6c5cf929de038076",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 480,
        "wires": []
    },
    {
        "id": "e94aa68fb201e017",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "test with 16-array",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "payloadType": "jsonata",
        "x": 1960,
        "y": 480,
        "wires": [
            [
                "25af8fe544d9398c"
            ]
        ]
    },
    {
        "id": "bb1e882a5e0c539a",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "strip magnitudes & phases, add to msg",
        "func": "if (0 >= msg.fft.length) return null;\nvar magnitudes = new Array(msg.fft.length/2);\nvar phases = new Array(msg.fft.length/2);\nvar mp_pairs = new Array(msg.fft.length/2);\nnode.status({text:\"json: \", shape:\"dot\", fill:\"red\"});\n\nfor (var i=0; i<msg.fft.length/2; i++)\n{\n    var myobj = msg.fft[i];\n    var myjsonobj = { \"magnitude\":myobj[0], \"phase\":myobj[1], \n                        \"index\":i, \n                        \"note\":\"These are unadulterated fft calculations from fftjs\" };\n\n    magnitudes[i] = myjsonobj.magnitude/msg.fft.length;\n    if (!(  Number.isFinite(magnitudes[i]) )) magnitudes[i] = 0;\n    phases[i] = myjsonobj.phase/msg.fft.length;\n    if (!(  Number.isFinite(phases[i]) )) phases[i] = 0;\n    mp_pairs[i] = myjsonobj;\n}    \n\n//it doesn't really matter which value is used because the status text \n//is more a confirmation/affirmation of life.\n//remember: myjsonobj has the //old, unprocessed// FFT information\n//      if you want to see corrected values, use magnitudes[] and phases[]\n//\nnode.status({text:\"raw json: mag=\"+myjsonobj.magnitude.toFixed(3)\n                            +\" phase=\"+myjsonobj.phase.toFixed(3),\n                            shape:\"dot\", fill:\"green\"});\n\nmsg.magnitudes = magnitudes;\nmsg.phases = phases;\nmsg.mp_pairs = mp_pairs;\ndelete(msg.fft);\ndelete(msg.oldest);\ndelete(msg.newest);\ndelete(msg.reading);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 520,
        "wires": [
            [
                "d3d492675e3a41bb",
                "ef7df848e9ce4128",
                "f577c2debd05009f",
                "d3f59854af1b078f"
            ]
        ]
    },
    {
        "id": "d3d492675e3a41bb",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 480,
        "wires": []
    },
    {
        "id": "ef7df848e9ce4128",
        "type": "change",
        "z": "7f4b805fc5436401",
        "name": "magnitudes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "magnitudes",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "magnitude",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2810,
        "y": 1140,
        "wires": [
            [
                "9b71e928edb54434",
                "e868ada0db895a91"
            ]
        ]
    },
    {
        "id": "f577c2debd05009f",
        "type": "change",
        "z": "7f4b805fc5436401",
        "name": "phases",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "phases",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "phase",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2820,
        "y": 640,
        "wires": [
            [
                "f5f07f0abf1d8127",
                "5f0d6daf1d40e18c"
            ]
        ]
    },
    {
        "id": "9b71e928edb54434",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f5f07f0abf1d8127",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2810,
        "y": 600,
        "wires": []
    },
    {
        "id": "e868ada0db895a91",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "prep FFT for dashboard graph - magnitude",
        "func": "var fft_log_freq_flag = context.get('fft_log_freq_flag')||\"linear\";\nvar fft_log_magnitude_flag = context.get('fft_log_magnitude_flag')||\"linear\";\nvar fft_include_a0_in_mags = context.get('fft_include_a0_in_mags')||\"false\";\nvar fft_PowerSpectrum = context.get('fft_PowerSpectrum')||\"false\";\nvar MeanSampleFreq = context.get('MeanSampleFreq')||1.0;\n\nconst mostFFTBinsShown = 255;\nconst minFFTBinsShown = 1;\nvar maxHarmonicDisplay = context.get('maxHarmonicDisplay')||255;\nmsg.maxHarmonicDisplay = maxHarmonicDisplay;\n\nvar foo = (\"xaxis\" == msg.topic);\nvar bar = (\"yaxis\" == msg.topic);\nvar chet = (\"Includea0\" == msg.topic);\nvar barnes = (\"PowerSpectrum\" == msg.topic);\nvar toto = (\"maxHarmonicDisplay\" == msg.topic);\nvar bono_nono = (\"MeanSampleFreq\" == msg.topic);\n//node.warn({text:msg.topic});\n\nif (foo || bar || chet || barnes || toto) //not data, commands or whatever\n{\n    if (foo) \n    {\n        fft_log_freq_flag = msg.payload;\n        context.set('fft_log_freq_flag',fft_log_freq_flag);\n        //node.warn({text: \"xaxis set to \"+fft_log_freq_flag});\n    }\n    if (bar) \n    {\n        fft_log_magnitude_flag = msg.payload;\n        context.set('fft_log_magnitude_flag',fft_log_magnitude_flag);\n        //node.warn({text: \"yaxis set to \"+fft_log_magnitude_flag});\n    }\n    if (chet)\n    {\n        \n        fft_include_a0_in_mags = String(msg.payload);//fudging Boolean fudging me around\n        context.set('fft_include_a0_in_mags',fft_include_a0_in_mags);\n    }\n    if (barnes)\n    {\n        \n        fft_PowerSpectrum = String(msg.payload);//fudging Boolean fudging me around\n        context.set('fft_PowerSpectrum',fft_PowerSpectrum);\n    }\n    if (toto) \n    {\n        maxHarmonicDisplay = Number(msg.payload);\n        if (minFFTBinsShown > maxHarmonicDisplay) maxHarmonicDisplay = minFFTBinsShown;\n        if (mostFFTBinsShown < maxHarmonicDisplay) maxHarmonicDisplay = mostFFTBinsShown;\n        context.set('maxHarmonicDisplay',maxHarmonicDisplay);\n    }\n    if (bono_nono)\n    {\n        \n        MeanSampleFreq = String(msg.payload);//fudging Boolean fudging me around\n        context.set('MeanSampleFreq',MeanSampleFreq);\n    }\n    //msg.payload = null;\n    return null; // just get the hell out of here; you're done\n \n}\nelse\n{\n    var powsum = 0;\n    msg.a0 = msg.magnitudes[0];\n    \n    var maxshow = 0;\n    if (msg.mp_pairs.length < maxHarmonicDisplay) maxshow = msg.mp_pairs.length;\n    else maxshow = maxHarmonicDisplay;\n    \n    var datavalues = new Array(maxshow);\n    var xlabels = new Array(maxshow);\n    var titlelabel = \"\";\n    \n    //for (var i=0; i< msg.mp_pairs.length; i++)\n    for (var i=0; i< maxshow; i++)\n    {\n        //Check the magnitude axis scaling (y-axis)\n        if (\"linear\" == fft_log_magnitude_flag)\n        {\n            titlelabel = \" (cm)\";\n            //i wrote the cweird looking logic below to force a similar comparison\n            if ((0 == i) & (\"false\" == fft_include_a0_in_mags)) //null the DC (a0) value\n                datavalues[i] = null; //it's easier just to do this\n            else\n            {\n                if (\"true\" == fft_PowerSpectrum)\n                    datavalues[i] = 1000000*msg.magnitudes[i]*msg.magnitudes[i]; //in cm^2x10^-6\n                else\n                    datavalues[i] = (Math.abs(msg.magnitudes[i])).toPrecision(3); //in cm\n            }\n            if (0 != i)\n                powsum = powsum + msg.magnitudes[i]*msg.magnitudes[i]\n        }\n        else if (\"log\" == fft_log_magnitude_flag)\n        {\n            titlelabel = \" (dBcm)\";\n            if ( 0 != msg.magnitudes[i])\n            {        //i wrote the cweird looking logic below to force a similar comparison\n                if ((0 == i) & (\"false\" == fft_include_a0_in_mags)) //null the DC (a0) value\n                    datavalues[i] = null; //it's easier just to do this\n                else\n                    datavalues[i] = (20*Math.log(msg.magnitudes[i])).toPrecision(3); //in 'dBcm'\n            }\n            else\n                datavalues[i] = null; //cross your fingers! (won't plot nulls)\n            //else\n            //    datavalues[i] = 20*Math.log(msg.magnitudes[i]/msg.magnitudes[0]); //normalize\n            //no good reason to normalize\n        }\n        else\n            datavalues[i] = 0; //shouldn't happen\n        \n        //the frequency axis (x-axis)\n        if (\"linear\" == fft_log_freq_flag)\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toPrecision(3))+\" Hz\";\n        else if (\"log\" == fft_log_freq_flag)\n        {\n            //this is currently no different from linear\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toPrecision(3))+\" Hz\";\n        }\n        else\n            xlabels[i] = \"?\"; //short, to the point.\n    }\n\n    var graphdata = [{\n    \"series\": [\"FFT |M| (\"+msg.mp_pairs.length+\" freq)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n    \n    msg.powsum = powsum;\n    msg.DCACratio = Math.log(msg.a0*msg.a0 / powsum);\n    msg.payload = graphdata;\n    msg.timestamp = Date.now();\n}\n\nmsg.label = \"FFT |M| \"+titlelabel;\nnode.status({\"text\": \"Max Frequencies sent (settable): \"+maxHarmonicDisplay});\n\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 1140,
        "wires": [
            [
                "c39bf654b8cc8fc9",
                "244b45b519bdb6da",
                "a361d92027e7d27a"
            ]
        ]
    },
    {
        "id": "c39bf654b8cc8fc9",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3410,
        "y": 1100,
        "wires": []
    },
    {
        "id": "cc19d6caddb05261",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4168.571445465088,
        "y": 1079.999942779541,
        "wires": []
    },
    {
        "id": "06e5341d4b3de462",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "jsonata",
        "x": 3270,
        "y": 320,
        "wires": [
            [
                "6c9de148f9d85b33"
            ]
        ]
    },
    {
        "id": "5086a8ee540e8b30",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "xaxis",
        "payload": "log",
        "payloadType": "str",
        "x": 2980,
        "y": 980,
        "wires": [
            [
                "1315fb4f443a9148"
            ]
        ]
    },
    {
        "id": "572623655e5af21e",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "xaxis",
        "payload": "linear",
        "payloadType": "str",
        "x": 2970,
        "y": 940,
        "wires": [
            [
                "1315fb4f443a9148"
            ]
        ]
    },
    {
        "id": "edc9af823f07498b",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "yaxis",
        "payload": "log",
        "payloadType": "str",
        "x": 2740,
        "y": 1300,
        "wires": [
            [
                "5cf0d6dd9d666b03"
            ]
        ]
    },
    {
        "id": "80ed007dee7d55b2",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "yaxis",
        "payload": "linear",
        "payloadType": "str",
        "x": 2750,
        "y": 1260,
        "wires": [
            [
                "5cf0d6dd9d666b03"
            ]
        ]
    },
    {
        "id": "5f0d6daf1d40e18c",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "prep FFT for dashboard graph - phase",
        "func": "\nvar fft_log_freq_flag = context.get('fft_log_freq_flag')||\"linear\";\nvar MeanSampleFreq = context.get('MeanSampleFreq')||1.0;\n\n\nconst mostFFTBinsShown = 255;\nconst minFFTBinsShown = 1;\nvar maxHarmonicDisplay = context.get('maxHarmonicDisplay')||255;\nmsg.maxHarmonicDisplay = maxHarmonicDisplay;\n\n\nif (\"xaxis\" == msg.topic) \n{\n    fft_log_freq_flag = msg.payload;\n    context.set('fft_log_freq_flag',fft_log_freq_flag);\n    //node.warn({text: \"xaxis set to \"+fft_log_freq_flag});\n    //msg.payload = null;\n    return null; // just get the hell out of here; you're done\n}\nelse if (\"maxHarmonicDisplay\" == msg.topic)\n{\n        maxHarmonicDisplay = Number(msg.payload);\n        if (minFFTBinsShown > maxHarmonicDisplay) maxHarmonicDisplay = minFFTBinsShown;\n        if (mostFFTBinsShown < maxHarmonicDisplay) maxHarmonicDisplay = mostFFTBinsShown;\n        context.set('maxHarmonicDisplay',maxHarmonicDisplay);  \n    return null; // just get the hell out of here; you're done\n}\nelse if (\"MeanSampleFreq\" == msg.topic)\n    {\n        \n        MeanSampleFreq = String(msg.payload);//fudging Boolean fudging me around\n        context.set('MeanSampleFreq',MeanSampleFreq);\n    \n    return null; // just get the hell out of here; you're done\n    }//msg.payload = null;\nelse\n{\n    \n    var maxshow = 0;\n    if (msg.mp_pairs.length < maxHarmonicDisplay) maxshow = msg.mp_pairs.length;\n    else maxshow = maxHarmonicDisplay;\n\n    var datavalues = new Array(maxshow);\n    var xlabels = new Array(maxshow);\n\n    for (var i=0; i< maxshow; i++)\n    {\n        var correctedphase = msg.phases[i];\n        //ignore branch cuts.  this can be done much better ways.\n        while (Math.PI < correctedphase) { correctedphase = correctedphase -Math.PI; }\n        while (-Math.PI > correctedphase) { correctedphase = correctedphase +Math.PI; }\n        \n        datavalues[i] = (correctedphase).toPrecision(3); //only linear phases\n        \n                //the frequency axis (x-axis)\n        if (\"linear\" == fft_log_freq_flag)\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toPrecision(3))+\" Hz\";\n        \n        else if (\"log\" == fft_log_freq_flag)\n        {\n            //this is currently no different from linear\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toPrecision(3))+\" Hz\";\n        \n        }\n        else\n            xlabels[i] = \"?\"; //short, to the point.\n    }\n\n    var graphdata = [{\n    \"series\": [\"FFT Phase \"+String.fromCodePoint(0x03A6)+\" (\"+msg.mp_pairs.length+\" pts)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n    \n    msg.payload = graphdata;\n    msg.timestamp = Date.now();\n    msg.label = \"FFT Phase \"+String.fromCodePoint(0x03A6);\n}\n\nnode.status({\"text\": \"Max Frequencies sent (settable): \"+maxHarmonicDisplay});\n\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 640,
        "wires": [
            [
                "244b45b519bdb6da",
                "20c607b21a81af80"
            ]
        ]
    },
    {
        "id": "244b45b519bdb6da",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "pretty time",
        "func": "delete(msg.payload);\nvar xx = Date.now();\nxx = Math.floor(xx/1000);//convert to seconds\nvar sec = xx % 60;\nxx = Math.floor(xx/60); //convert to minutes\nvar min = xx % 60;\nxx = Math.floor(xx/60); //convert to hours\nvar hrs = xx % 24;\nxx = Math.floor(xx/60); //convert to days\n\nmsg.payload = hrs+\":\"+min+\":\"+sec+\"s\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3600,
        "y": 860,
        "wires": [
            [
                "af8afb4c86394c65"
            ]
        ]
    },
    {
        "id": "3b92295ae74bd611",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 440,
        "wires": []
    },
    {
        "id": "07577a52ad540fc4",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "add units to payload",
        "func": "\n//msg.payload = msg.payload+\" cm\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 480,
        "wires": [
            [
                "3b92295ae74bd611",
                "dd1baadcdf142690"
            ]
        ]
    },
    {
        "id": "d3f59854af1b078f",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "isolate a0 - value only",
        "func": "var origtimestamp = msg.timestamp;\ndelete(msg.payload);\nmsg.payload = (msg.magnitudes[0]).toFixed(1);\nmsg.timestamp = origtimestamp;\nnode.status({\"text\":\"a0=\"+msg.payload+\" FBins:\"+msg.mp_pairs.length})\nmsg.topic = \"FFT a0\"\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 480,
        "wires": [
            [
                "e16308786a7ccf89",
                "07577a52ad540fc4"
            ]
        ]
    },
    {
        "id": "e0f4d3b54d952576",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 2750,
        "y": 1360,
        "wires": [
            [
                "4c743ac6d886613d"
            ]
        ]
    },
    {
        "id": "a52cc79b6e85666f",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "str",
        "x": 2750,
        "y": 1400,
        "wires": [
            [
                "4c743ac6d886613d"
            ]
        ]
    },
    {
        "id": "7e1480a6e3823986",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 2810,
        "y": 1460,
        "wires": [
            [
                "80b8c74e74e0224d"
            ]
        ]
    },
    {
        "id": "430aa333530cad16",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "str",
        "x": 2810,
        "y": 1500,
        "wires": [
            [
                "80b8c74e74e0224d"
            ]
        ]
    },
    {
        "id": "a361d92027e7d27a",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "FFT passthru (pauseable)",
        "func": "var currentFFPauseState = context.get('FFPauseState')||\"run\";\n    \nif (\"FFTpausetoggle\" == msg.topic)\n{\n    //msg.colour will change the button \n    if (\"pause\" == currentFFPauseState)\n    {\n        currentFFPauseState = \"run\"\n        msg.colour = \"green\";\n        msg.payload = \"running\";\n    }\n    else\n    {\n        \n        currentFFPauseState = \"pause\"  \n        msg.colour = \"red\";\n        msg.payload = \"paused\";\n    }\n    context.set('FFPauseState',currentFFPauseState);\n    node.status({\"text\": \"State: \"+currentFFPauseState, \"shape\": \"ring\", \"fill\":msg.colour});\n    //msg.payload = null;\n    return [null,msg];\n}\nelse\n{\n    if (\"pause\" == currentFFPauseState) return [null,null];\n    else return [msg,null];\n}\n\nreturn [null,null];//should have ducked out by now",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3680,
        "y": 1140,
        "wires": [
            [
                "a34183760c2d3cc0",
                "3fbb5b7638ad41d1"
            ],
            [
                "e5deed576fb8169f",
                "64d12407b61922c8"
            ]
        ],
        "outputLabels": [
            "passthru packet",
            "update button control"
        ]
    },
    {
        "id": "a34183760c2d3cc0",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1ad2af5120bf03b6",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "maxHarmonicDisplay",
        "payload": "33",
        "payloadType": "num",
        "x": 3250,
        "y": 820,
        "wires": [
            [
                "8deef06c0a5969ce"
            ]
        ]
    },
    {
        "id": "e5deed576fb8169f",
        "type": "ui_button",
        "z": "7f4b805fc5436401",
        "name": "un/pause FFT display  Subflow ui button",
        "group": "02df662f88a4ddfc",
        "order": 11,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "un/pause FFT display Subflow",
        "color": "{{colour}}",
        "bgcolor": "{{\"#FFF0F0\"}}",
        "className": "",
        "icon": "fa-pause-circle",
        "payload": "pauseclick",
        "payloadType": "str",
        "topic": "FFTpausetoggle",
        "topicType": "str",
        "x": 3740,
        "y": 1200,
        "wires": [
            [
                "a361d92027e7d27a",
                "20c607b21a81af80"
            ]
        ]
    },
    {
        "id": "1315fb4f443a9148",
        "type": "ui_switch",
        "z": "7f4b805fc5436401",
        "name": "",
        "label": "log frequency scale subflow",
        "tooltip": "This currently DOES NOT change the frequency scaling.  Linear only.",
        "group": "02df662f88a4ddfc",
        "order": 32,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "xaxis",
        "topicType": "str",
        "style": "",
        "onvalue": "log",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "linear",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2990,
        "y": 860,
        "wires": [
            [
                "e868ada0db895a91",
                "5f0d6daf1d40e18c"
            ]
        ]
    },
    {
        "id": "5cf0d6dd9d666b03",
        "type": "ui_switch",
        "z": "7f4b805fc5436401",
        "name": "",
        "label": "log magnitude scale subflow",
        "tooltip": "Change the scale between log and linear (LOG LOOKS CRAPPY)",
        "group": "02df662f88a4ddfc",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "yaxis",
        "topicType": "str",
        "style": "",
        "onvalue": "log",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "linear",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2980,
        "y": 1260,
        "wires": [
            [
                "e868ada0db895a91"
            ]
        ]
    },
    {
        "id": "4c743ac6d886613d",
        "type": "ui_switch",
        "z": "7f4b805fc5436401",
        "name": "",
        "label": "include a0 in magnitudes subflow",
        "tooltip": "include or remove a0 (which is probably big)",
        "group": "02df662f88a4ddfc",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "Includea0",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2980,
        "y": 1380,
        "wires": [
            [
                "e868ada0db895a91"
            ]
        ]
    },
    {
        "id": "80b8c74e74e0224d",
        "type": "ui_switch",
        "z": "7f4b805fc5436401",
        "d": true,
        "name": "",
        "label": "Power Spectrum",
        "tooltip": "Squares of the harmonic magnitudes",
        "group": "02df662f88a4ddfc",
        "order": 31,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "PowerSpectrum",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2980,
        "y": 1480,
        "wires": [
            [
                "e868ada0db895a91"
            ]
        ]
    },
    {
        "id": "8deef06c0a5969ce",
        "type": "ui_slider",
        "z": "7f4b805fc5436401",
        "name": "# of frequencies shown subflow",
        "label": "# of freq shown Subflow",
        "tooltip": "How many [a0 + early harmonics] should be shown on the graphs",
        "group": "02df662f88a4ddfc",
        "order": 19,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "maxHarmonicDisplay",
        "topicType": "str",
        "min": "1",
        "max": "256",
        "step": 1,
        "className": "",
        "x": 3270,
        "y": 860,
        "wires": [
            [
                "e868ada0db895a91",
                "5f0d6daf1d40e18c"
            ]
        ]
    },
    {
        "id": "af8afb4c86394c65",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 33,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "last update (subflow)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 3810,
        "y": 860,
        "wires": []
    },
    {
        "id": "93f4c3f6b8ad71e2",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 34,
        "width": 0,
        "height": 0,
        "name": "ui update advice subflow",
        "label": "",
        "format": "Changes appear with next graph update",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 3000,
        "y": 820,
        "wires": []
    },
    {
        "id": "dd1baadcdf142690",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 15,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "a0 = ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 3340,
        "y": 480,
        "wires": []
    },
    {
        "id": "64d12407b61922c8",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 13,
        "width": 2,
        "height": 1,
        "name": "FFT Subflow ui pause/run state",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 3740,
        "y": 1240,
        "wires": []
    },
    {
        "id": "3fbb5b7638ad41d1",
        "type": "ui_chart",
        "z": "7f4b805fc5436401",
        "name": "FFT magnitudes subflow",
        "group": "02df662f88a4ddfc",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "{{msg.label}}",
        "chartType": "bar",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "FFT magnitudes subflow",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 3970,
        "y": 1080,
        "wires": [
            [
                "cc19d6caddb05261"
            ]
        ]
    },
    {
        "id": "b2867b4c9f5d83b4",
        "type": "ui_chart",
        "z": "7f4b805fc5436401",
        "name": "fft phases subflow",
        "group": "02df662f88a4ddfc",
        "order": 17,
        "width": 6,
        "height": 4,
        "label": "{{msg.label}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "fft phases subflow",
        "dot": false,
        "ymin": "-3.14",
        "ymax": "3.14",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 4030,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e16308786a7ccf89",
        "type": "ui_chart",
        "z": "7f4b805fc5436401",
        "name": "",
        "group": "02df662f88a4ddfc",
        "order": 23,
        "width": "4",
        "height": 3,
        "label": "a0(t) graph subflow",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "512",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 3130,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7a8e04916f1e01f0",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "input data buffer + management",
        "func": "//This function doesn't care what type of object is in the buffer\n//This function buffers whatever is in msg.payload\n//set msg.setNewBufferSize to a 2^N number for a new buffer size\n\nconst default_buffer_size = 2; //two is arbitrary and conservative\n\nvar thebuffer = context.get('buffer')||[];\nvar buffsize = context.get('bufferSize')||default_buffer_size;\n\n//only enter if() the buffer size needs a reset\nif ((thebuffer.length != buffsize)||(undefined != msg.setNewBufferSize))\n{\n    if (undefined != msg.setNewBufferSize)\n    {\n        if (Number.isFinite(msg.setNewBufferSize))\n        {\n            buffsize = msg.setNewBufferSize;\n        }\n        else\n            buffsize = default_buffer_size; //failure\n    }\n    else if (thebuffer.length != buffsize)\n    {\n        buffsize = default_buffer_size; //buffer size was reset asynchronously \n    } else\n    {\n        buffsize = default_buffer_size; //how'd we even get here?\n    }\n    \n    //check for +ve power of two (i.e., at least two)\n    if ((Math.log(buffsize)/Math.log(2) != \n            Math.floor(Math.log(buffsize)/Math.log(2)) )\n            || (2>buffsize))\n    {\n        //reject this size, get out.\n        node.warn({\"text\":\"Buffer must be power of two (2^N)\"});\n        return null;\n    }\n    \n    //at this point, everything should be OK with the new buffer size\n    thebuffer = Array(buffsize);//cross fingers for garbage collection\n    thebuffer.fill(0);\n    context.set('bufferSize',buffsize); //make sure it knows\n    context.set('buffer',thebuffer);  //store newly-sized, zeroed buffer\n    node.status({\"text\":\"New buffer size: \"+buffsize});\n    return null;  //throw away buffer-changing packets\n}\n\n//By here, the only payloads should be elements for the buffer\nthebuffer.push(msg.payload);  //put in the back of the line\nwhile (thebuffer.length > buffsize)\n{\n    thebuffer.shift(); //remove the front of the line\n}\n\n\n    msg.payload = thebuffer;\n    msg.topic = \"Entire Buffer size \"+thebuffer.length+\" released\";\n    node.status({\"text\":\"last buffer size: \"+thebuffer.length});\n\n\ncontext.set('buffer',thebuffer);\n\nif (null !== msg.payload) return msg;\nelse return null; //how'd we get here?",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 640,
        "wires": [
            [
                "610f2e04b4cb4ce5",
                "25af8fe544d9398c",
                "0267f95ddb14265e"
            ]
        ]
    },
    {
        "id": "fa9dc3a6847ec79c",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "inject 8 single random number payload",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "num",
        "x": 1630,
        "y": 780,
        "wires": [
            [
                "7a8e04916f1e01f0"
            ]
        ]
    },
    {
        "id": "610f2e04b4cb4ce5",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 600,
        "wires": []
    },
    {
        "id": "45265caff23da1c8",
        "type": "ui_dropdown",
        "z": "7f4b805fc5436401",
        "name": "Sample Size Dropdown subflow",
        "label": "Sample Size subflow",
        "tooltip": "Sample Size power of 2 for FFT usage (2^n)",
        "place": "Sample Size (2^n)",
        "group": "02df662f88a4ddfc",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "524288 (2^19)",
                "value": 524288,
                "type": "num"
            },
            {
                "label": "262144 (2^18)",
                "value": 262144,
                "type": "num"
            },
            {
                "label": "131072 (2^17)",
                "value": 131072,
                "type": "num"
            },
            {
                "label": "65536 (2^16)",
                "value": 65536,
                "type": "num"
            },
            {
                "label": "32768 (2^15)",
                "value": 32768,
                "type": "num"
            },
            {
                "label": "16384 (2^14)",
                "value": 16384,
                "type": "num"
            },
            {
                "label": "8192 (2^13)",
                "value": "8192",
                "type": "str"
            },
            {
                "label": "4096 (2^12)",
                "value": 4096,
                "type": "num"
            },
            {
                "label": "2048 (2^11)",
                "value": 2048,
                "type": "num"
            },
            {
                "label": "1024 (2^10)",
                "value": 1024,
                "type": "num"
            },
            {
                "label": "512 (2^9)",
                "value": 512,
                "type": "num"
            },
            {
                "label": "256 (2^8)",
                "value": 256,
                "type": "num"
            },
            {
                "label": "128 (2^7)",
                "value": 128,
                "type": "num"
            },
            {
                "label": "64 (2^6)",
                "value": 64,
                "type": "num"
            },
            {
                "label": "32 (2^5)",
                "value": 32,
                "type": "num"
            },
            {
                "label": "16 (2^4)",
                "value": 16,
                "type": "num"
            },
            {
                "label": "8 (2^3)",
                "value": 8,
                "type": "num"
            },
            {
                "label": "4 (2^2)",
                "value": 4,
                "type": "num"
            },
            {
                "label": "2 (2^1)",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1510,
        "y": 480,
        "wires": [
            [
                "d58cf91018ae8422"
            ]
        ]
    },
    {
        "id": "7ba2940716def577",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 440,
        "wires": []
    },
    {
        "id": "1efac1ec9c711317",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "set to default size (4)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1480,
        "y": 520,
        "wires": [
            [
                "45265caff23da1c8"
            ]
        ]
    },
    {
        "id": "d58cf91018ae8422",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "check if valid power of two",
        "func": "var val = Number(msg.payload);\nif (0 > val) return;  //dont even bother with negatives\n\n    msg.setNewBufferSize = val;\n    var logvaln = Math.log(val)/Math.log(2);\n    var logval_floor = Math.floor(logvaln);\n    if ((0 != val) && (0 == logvaln - logval_floor))  //is a non-zero whole number\n    {\n        //valid!\n        msg.payload = 1;\n        msg.enabled = 1;\n    }\n    else\n    {\n        msg.payload = 0;\n        msg.enabled = 0;\n    }\n\n//set a new BUFFER size (stored in msg.setNewBufferSize)\n//if msg.payload or msg.enabled are equal to 0, the size is not valid\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 440,
        "wires": [
            [
                "7ba2940716def577",
                "7a8e04916f1e01f0",
                "875f464a612e1ae7"
            ]
        ]
    },
    {
        "id": "48b4f58bc9ce39e3",
        "type": "ui_switch",
        "z": "7f4b805fc5436401",
        "d": true,
        "name": "",
        "label": "Release buffer with every new value",
        "tooltip": "the alternative is to wait for the buffer to refill each time",
        "group": "02df662f88a4ddfc",
        "order": 35,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "each_time_or_not_once_per_fill",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 810,
        "y": 1440,
        "wires": [
            [
                "192fe0d71c7b8e45"
            ]
        ]
    },
    {
        "id": "91ba0bf22466b2d8",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "inject 7 single random number payload",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "num",
        "x": 1650,
        "y": 740,
        "wires": [
            [
                "7a8e04916f1e01f0"
            ]
        ]
    },
    {
        "id": "0a26cea4a1e3b01c",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "each_time_or_once_per_fill",
        "payload": "true",
        "payloadType": "bool",
        "x": 690,
        "y": 1520,
        "wires": [
            [
                "48b4f58bc9ce39e3"
            ]
        ]
    },
    {
        "id": "a42c1c2063a46dd8",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "each_time_or_once_per_fill",
        "payload": "false",
        "payloadType": "bool",
        "x": 750,
        "y": 1560,
        "wires": [
            [
                "48b4f58bc9ce39e3"
            ]
        ]
    },
    {
        "id": "192fe0d71c7b8e45",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1440,
        "wires": []
    },
    {
        "id": "55069c8c9172d9a0",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1200,
        "wires": []
    },
    {
        "id": "79d8327077e6cd39",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "Discard",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Discard",
        "payloadType": "str",
        "x": 640,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "24cfac5a90a6f753",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "Pad",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Pad",
        "payloadType": "str",
        "x": 630,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "7c693bdef334224b",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "Truncate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Truncate",
        "payloadType": "str",
        "x": 640,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "1e1d597490dbc07f",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "The FFT here is made for 2^n data - choose what to do if its not",
        "info": "",
        "x": 970,
        "y": 1160,
        "wires": []
    },
    {
        "id": "89385ee567a78e72",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "disable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enable",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "e28c7f87b5b23463",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "enable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enable",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "cadc56385348b226",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "UNimplemented stuff",
        "info": "",
        "x": 690,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4b34508baa4ecc09",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "Set the Time-data BUFFER size",
        "info": "",
        "x": 1490,
        "y": 400,
        "wires": []
    },
    {
        "id": "410c9594329d3cae",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "a0 only",
        "info": "",
        "x": 2790,
        "y": 440,
        "wires": []
    },
    {
        "id": "57e30f8ec69f99fc",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "PHASE",
        "info": "",
        "x": 3070,
        "y": 600,
        "wires": []
    },
    {
        "id": "b6e881e6f5ba161b",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "MAGNITUDES",
        "info": "",
        "x": 3060,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1415b976cfe739f4",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 680,
        "wires": []
    },
    {
        "id": "82fdf6ded7d503e2",
        "type": "websocket in",
        "z": "7f4b805fc5436401",
        "d": true,
        "name": "",
        "server": "c985ee7d37cbcafb",
        "client": "",
        "x": 250,
        "y": 680,
        "wires": [
            [
                "669e034d5325bad3"
            ]
        ]
    },
    {
        "id": "d97d81806e8da13a",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "payload number sanity check",
        "func": "if (Number.isFinite(msg.payload)) return msg;\nelse return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "7a8e04916f1e01f0",
                "dd6618d196bbbe85",
                "369e636a68541354"
            ]
        ]
    },
    {
        "id": "dcbbc6ecfde4b5f6",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 25,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "FFT Calc Time (subflow): ",
        "format": "{{msg.fftcalcdelay + \" mSec\"}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2390,
        "y": 580,
        "wires": []
    },
    {
        "id": "b46f7855afecd0df",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "Un/Pause FFT - ONLY toggles graph live updating",
        "info": "",
        "x": 3770,
        "y": 1280,
        "wires": []
    },
    {
        "id": "0b8cc164420c929f",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "If data comes slowly, this let's you know if it's still coming",
        "info": "",
        "x": 3890,
        "y": 820,
        "wires": []
    },
    {
        "id": "2827eb099ac66981",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "Logic to regulate SAMPLE SIZE or DATA RATE for FFT calculations",
        "info": "",
        "x": 1320,
        "y": 120,
        "wires": []
    },
    {
        "id": "cddc661ab9da7d08",
        "type": "delay",
        "z": "7f4b805fc5436401",
        "name": "variable-rate delay, drop intermediates",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 790,
        "y": 640,
        "wires": [
            [
                "75ad325021300529",
                "d97d81806e8da13a"
            ]
        ]
    },
    {
        "id": "eeaca17f1d6f5b61",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "rate limit inject (1mSec)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "rate",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 600,
        "wires": [
            [
                "cddc661ab9da7d08"
            ]
        ]
    },
    {
        "id": "75ad325021300529",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 600,
        "wires": []
    },
    {
        "id": "d0f2818fbc4c38ce",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "If the FFT takes too long to compute, reduce the sample size or reduce the data rate",
        "info": "",
        "x": 1350,
        "y": 80,
        "wires": []
    },
    {
        "id": "89b783ab556f8a0a",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "arbitrary number",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1500,
        "y": 560,
        "wires": [
            [
                "45265caff23da1c8"
            ]
        ]
    },
    {
        "id": "027117118a7ab653",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "PAYLOAD IN HERE",
        "info": "",
        "x": 370,
        "y": 600,
        "wires": []
    },
    {
        "id": "875f464a612e1ae7",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "ADJECT (adjust) - 1+AB",
        "func": "var timeBetweenPayloads = context.get('timeBetweenPayloads')||0;\nvar fftcalcdelay = context.get('fftcalcdelay')||0;\nvar currentBufferSize = context.get('currentBufferSize')||0;\n\nif ('undefined' != typeof msg.setNewBufferSize)\n{ \n    if (0 != msg.payload) //zero (0) indicates an invalid buffer size\n    {\n        currentBufferSize = msg.setNewBufferSize;\n    }\n    context.set('currentBufferSize',currentBufferSize);\n}\n    \nif ('undefined' != typeof msg.timeBetweenPayloads)\n{\n    timeBetweenPayloads = Number(msg.timeBetweenPayloads);\n    context.set('timeBetweenPayloads',timeBetweenPayloads);\n}\n\nif ('undefined' != typeof msg.fftcalcdelay)\n{\n    fftcalcdelay = Number(msg.fftcalcdelay);\n    context.set('fftcalcdelay',msg.fftcalcdelay);\n}\n\n\nnode.status({\"text\":\"cBS:\"+currentBufferSize\n                +\" - tBP:\"+ timeBetweenPayloads+\"mS\"\n                +\" - fftCD:\"+fftcalcdelay+\"mS\"});\n                \nmsg.currentBufferSize = currentBufferSize;\nmsg.timeBetweenPayloads = timeBetweenPayloads;\nmsg.fftcalcdelay = fftcalcdelay;\n\nif (2*fftcalcdelay > timeBetweenPayloads)\n{\n    //either slow down the data rate, or decrease the FFT sample size\n    \n    //slow down the data rate - send to the data rate limiter\n    /*\n    msg.rate = 2*fftcalcdelay+1; //plus one so we don't set a rate to zero\n    node.warn({\"text\":\"WARN: downstream sample rate has been artificially\"\n                    +\" adjusted.  Beware Aliasing.\"})\n        //DANGER WILL ROBINSON, ALIASING LEADS TO MADNESS\n    */\n    \n    //decrease the FFT sample size - send to the sample size selection\n    msg.payload = currentBufferSize/2;\n    //return [msg,msg,msg]; //uncomment if using the sampling rate gateway\n    \n    return [msg,msg,null]; //do not update the sampling rate gateway\n}\n\nif ('object' != typeof msg.payload)\n    return [null,null,null];\nelse\n    return [msg,null,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 160,
        "wires": [
            [
                "9946592b166ba5fa",
                "46865b6d8303e0e4"
            ],
            [
                "45265caff23da1c8"
            ],
            [
                "cddc661ab9da7d08"
            ]
        ],
        "outputLabels": [
            "status information",
            "adjust sample SIZE",
            "adjust sample RATE"
        ]
    },
    {
        "id": "dd6618d196bbbe85",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "time between last data and this one",
        "func": "const timenoodle = context.get('lastTimestamp')||0;\nconst nowsthetime = Date.now();\ncontext.set('lastTimestamp',nowsthetime);\n\nif (0 != timenoodle)\n{\n    msg.payload = null;\n    msg.timeBetweenPayloads = nowsthetime - timenoodle;\n    node.status({\"text\":\"Time between payloads: \"+msg.timeBetweenPayloads+\" mSec\"});\n    return msg;\n}\nnode.status({\"text\":\"First payload (\"+nowsthetime+\")\"});\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 160,
        "wires": [
            [
                "875f464a612e1ae7",
                "170b6dafc019f591",
                "8d11b22da35c2a40"
            ]
        ]
    },
    {
        "id": "369e636a68541354",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 680,
        "wires": []
    },
    {
        "id": "170b6dafc019f591",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "c71fc7cfcba2d48c",
        "type": "link in",
        "z": "7f4b805fc5436401",
        "name": "Single Value input (msg.payload)",
        "links": [],
        "x": 195,
        "y": 640,
        "wires": [
            [
                "669e034d5325bad3"
            ]
        ]
    },
    {
        "id": "a682a5bfe330e07e",
        "type": "comment",
        "z": "7f4b805fc5436401",
        "name": "update the phase function from the magnitude work",
        "info": "",
        "x": 3410,
        "y": 600,
        "wires": []
    },
    {
        "id": "0267f95ddb14265e",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "Buffer fill percentage",
        "func": "var countNumberofData = context.get('countNumberofData')||0;\ncountNumberofData = countNumberofData + 1;\ncontext.set('countNumberofData',countNumberofData);\nvar localobj = msg.payload;\n\nvar ratio = 0;\n\nif (0 != localobj.length)\n{\n   ratio = 100*countNumberofData/localobj.length;\n   if (100 < ratio) ratio = 100;\n   \n   if (100 > ratio)\n        msg.label = \"Zero-Padded FFT Buffer Filled: \"\n    else\n        msg.label = \"FFT Buffer Filled: \"; \n}\n\nmsg.payload = ratio.toFixed(3);\nmsg.topic = \"FFT Buffer filled percentage\"\nnode.status({\"text\":\"Buffer Filled \"+ratio.toFixed(4)+\" %\"})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 640,
        "wires": [
            [
                "6059244131ff61de",
                "bce23cbd85c033b9"
            ]
        ]
    },
    {
        "id": "6059244131ff61de",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 680,
        "wires": []
    },
    {
        "id": "bce23cbd85c033b9",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "Zero-Padded FFT subflow Buffer Filled: ",
        "label": "{{msg.label}}",
        "format": "{{msg.payload + \"  %\"}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2440,
        "y": 640,
        "wires": []
    },
    {
        "id": "8d11b22da35c2a40",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 27,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time between subflow Samples: ",
        "format": "{{msg.timeBetweenPayloads + \" mSec\"}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 930,
        "y": 100,
        "wires": []
    },
    {
        "id": "9946592b166ba5fa",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "calc ave freq over {{msg.payload}} samples",
        "func": "//this function doesn't care about the msg.payload\n\nif ('undefined' == typeof (msg.timeBetweenPayloads)) return null;\n\nvar runningsumstring = context.get('runningsumstring')||JSON.stringify({\"sum\":0,\"count\":0});\nvar runningsum = JSON.parse(runningsumstring);\nnode.status({\"text\":runningsumstring+\"  \"+runningsum.count});\n\ndeltaT = Number(msg.timeBetweenPayloads);\nif (0 == deltaT) return null;\n\nvar localsum = Number(runningsum.sum) + deltaT;\nvar localcount = Number(runningsum.count) + 1;\n\nmsg.payload = (localcount*1000/localsum).toFixed(5);\n\nif (\"reset\" == msg.topic) {localsum = 0;localcount=0;}\n\nmsg.topic = \"MeanSampleFreq\";\n\nif (localcount > 10000)\n{\n    var av = localsum/localcount;\n    localcount = 2000;\n    localsum = av*localcount;\n}\n\nvar mynewobject = {\"sum\":localsum,\"count\":localcount};\n\ncontext.set('runningsumstring',JSON.stringify(mynewobject));\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 140,
        "wires": [
            [
                "74c24c22c0526888",
                "204c179e0ea75e1d",
                "5f0d6daf1d40e18c"
            ]
        ]
    },
    {
        "id": "669e034d5325bad3",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "NEXUS INPUT",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 640,
        "wires": [
            [
                "cddc661ab9da7d08",
                "1415b976cfe739f4"
            ]
        ]
    },
    {
        "id": "74c24c22c0526888",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 80,
        "wires": []
    },
    {
        "id": "204c179e0ea75e1d",
        "type": "ui_text",
        "z": "7f4b805fc5436401",
        "group": "02df662f88a4ddfc",
        "order": 29,
        "width": 0,
        "height": 0,
        "name": "Average  subflow Sample Frequency: ",
        "label": "Average subflow Sample Frequency: ",
        "format": "{{msg.payload +\" Hz\"}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2350,
        "y": 140,
        "wires": []
    },
    {
        "id": "9beea908c4fd48a5",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 200,
        "wires": [
            [
                "9946592b166ba5fa"
            ]
        ]
    },
    {
        "id": "46865b6d8303e0e4",
        "type": "debug",
        "z": "7f4b805fc5436401",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 240,
        "wires": []
    },
    {
        "id": "20c607b21a81af80",
        "type": "function",
        "z": "7f4b805fc5436401",
        "name": "FFT passthru (pauseable)",
        "func": "var currentFFPauseState = context.get('FFPauseState')||\"run\";\n    \nif (\"FFTpausetoggle\" == msg.topic)\n{\n    //msg.colour will change the button \n    if (\"pause\" == currentFFPauseState)\n    {\n        currentFFPauseState = \"run\"\n        msg.colour = \"green\";\n        msg.payload = \"running\";\n    }\n    else\n    {\n        \n        currentFFPauseState = \"pause\"  \n        msg.colour = \"red\";\n        msg.payload = \"paused\";\n    }\n    context.set('FFPauseState',currentFFPauseState);\n    node.status({\"text\": \"State: \"+currentFFPauseState, \"shape\": \"ring\", \"fill\":msg.colour});\n    //msg.payload = null;\n    return [null,msg];\n}\nelse\n{\n    if (\"pause\" == currentFFPauseState) return [null,null];\n    else return [msg,null];\n}\n\nreturn [null,null];//should have ducked out by now",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 640,
        "wires": [
            [
                "b2867b4c9f5d83b4"
            ],
            []
        ],
        "outputLabels": [
            "passthru packet",
            "update button control"
        ]
    },
    {
        "id": "6c9de148f9d85b33",
        "type": "ui_button",
        "z": "7f4b805fc5436401",
        "name": "",
        "group": "02df662f88a4ddfc",
        "order": 21,
        "width": "2",
        "height": "2",
        "passthru": true,
        "label": "Clear",
        "tooltip": " Clears the graphs (Does not impact data)",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-circle-o",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 3430,
        "y": 320,
        "wires": [
            [
                "b2867b4c9f5d83b4",
                "3fbb5b7638ad41d1",
                "244b45b519bdb6da",
                "e16308786a7ccf89"
            ]
        ]
    },
    {
        "id": "964f494b7a813bab",
        "type": "inject",
        "z": "7f4b805fc5436401",
        "name": "rate limit inject (3 Sec, 0.333Hz)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "rate",
                "v": "3000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 560,
        "wires": [
            [
                "cddc661ab9da7d08"
            ]
        ]
    },
    {
        "id": "1392f784b9d6d1aa",
        "type": "status",
        "z": "318a322694c0e8d7",
        "name": "",
        "scope": null,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "0dfb97bd02075f55"
            ]
        ]
    },
    {
        "id": "0dfb97bd02075f55",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 160,
        "wires": []
    },
    {
        "id": "0d0b76fb0ebf5527",
        "type": "ui_text",
        "z": "318a322694c0e8d7",
        "group": "914164c06452d25a",
        "order": 2,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "33e19ce0999be743",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "0d0b76fb0ebf5527"
            ]
        ]
    },
    {
        "id": "43c676c71f4bd2fb",
        "type": "ui_button",
        "z": "318a322694c0e8d7",
        "name": "",
        "group": "914164c06452d25a",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "button",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "0d0b76fb0ebf5527"
            ]
        ]
    },
    {
        "id": "dddfd3ed9d428bd8",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "97f2f90d66cb957b",
        "type": "comment",
        "z": "318a322694c0e8d7",
        "name": "http://10.9.142.142:8080/vlcout",
        "info": "http://10.9.142.142:8080/vlcout",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "908004ab3626e4a7",
        "type": "http request",
        "z": "318a322694c0e8d7",
        "name": "vlc stream from Bev",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.9.142.142:8080/vlcout",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "dddfd3ed9d428bd8"
            ]
        ]
    },
    {
        "id": "6c1df8ea593167b9",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 200,
        "wires": [
            [
                "908004ab3626e4a7"
            ]
        ]
    },
    {
        "id": "bb0f6593cd8ea02c",
        "type": "ui_multistate_switch",
        "z": "318a322694c0e8d7",
        "name": "multi-state",
        "group": "914164c06452d25a",
        "order": 2,
        "width": 0,
        "height": 1,
        "label": "multi-switch",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "One",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "zero",
                "value": "0",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "Two",
                "value": "2",
                "valueType": "num",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 430,
        "y": 340,
        "wires": [
            [
                "d88369932071be73",
                "0d0b76fb0ebf5527"
            ]
        ]
    },
    {
        "id": "d88369932071be73",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "4172ff9bdc9a5edf",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "bb0f6593cd8ea02c"
            ]
        ]
    },
    {
        "id": "572ecfbb9212d3e9",
        "type": "comment",
        "z": "318a322694c0e8d7",
        "name": "mroe testing",
        "info": "",
        "x": 280,
        "y": 120,
        "wires": []
    },
    {
        "id": "3f479a530fa177ad",
        "type": "ui_joystick",
        "z": "318a322694c0e8d7",
        "name": "100x100 Joy",
        "group": "914164c06452d25a",
        "order": 3,
        "width": 3,
        "height": 3,
        "trigger": "all",
        "timeInterval": "100",
        "useThemeColor": false,
        "color": "#00ffff",
        "threshold": "0.1",
        "directions": "all",
        "shape": "circle",
        "centerAtRelease": true,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "cd7ed9ecb9928957",
                "064ca2d408242e9b"
            ]
        ]
    },
    {
        "id": "cd7ed9ecb9928957",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 480,
        "wires": []
    },
    {
        "id": "064ca2d408242e9b",
        "type": "function",
        "z": "318a322694c0e8d7",
        "name": "joy distance",
        "func": "var tmp = msg.payload.distance;\nmsg.payload = tmp.toFixed(3);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 440,
        "wires": [
            [
                "0d0b76fb0ebf5527"
            ]
        ]
    },
    {
        "id": "0d6c778691ff0cc8",
        "type": "function",
        "z": "318a322694c0e8d7",
        "name": "global library get test",
        "func": "var myfft1 = context.global.get(\"fftjs\");\nvar myfft2 = context.global.get(\"fft-js\");\nvar mmat = context.global.get(\"os\");\n\nnode.warn(\"global get of fftjs1 : \"+ myfft1);\nnode.warn(\"global get of fftjs2 : \"+ myfft2);\nmsg.myfft1 = myfft1;\nmsg.myfft2 = myfft2;\nmsg.mmat = mmat;\n\nvar singal = [1,0,1,0];\n//msg.payload = myfft1.fft(singal);\nmsg.payload = singal;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "7c0ee22f21a10bb8"
            ]
        ]
    },
    {
        "id": "e960d9ace2d7377a",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "i clicked inject",
        "payloadType": "str",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "0d6c778691ff0cc8"
            ]
        ]
    },
    {
        "id": "7c0ee22f21a10bb8",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 680,
        "wires": []
    },
    {
        "id": "8a5559ba7103b081",
        "type": "comment",
        "z": "318a322694c0e8d7",
        "name": "Here I am texting loading the fft-js module",
        "info": "",
        "x": 460,
        "y": 640,
        "wires": []
    },
    {
        "id": "95d3c3721f137e2b",
        "type": "exec",
        "z": "318a322694c0e8d7",
        "command": "scrot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "scrot",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "b7cbb19dbbb605f7"
            ],
            [
                "b7cbb19dbbb605f7"
            ],
            [
                "b7cbb19dbbb605f7"
            ]
        ]
    },
    {
        "id": "f3c1d4dd1ee35c8c",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 340,
        "wires": [
            [
                "95d3c3721f137e2b"
            ]
        ]
    },
    {
        "id": "b7cbb19dbbb605f7",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 340,
        "wires": []
    },
    {
        "id": "644de9f23e091f6b",
        "type": "ui_context_menu",
        "z": "318a322694c0e8d7",
        "group": "914164c06452d25a",
        "order": 4,
        "width": 0,
        "height": -1,
        "fontSize": "20",
        "inputPositionXField": "100",
        "inputPositionXType": "num",
        "inputPositionYField": "100",
        "inputPositionYType": "num",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "msg",
        "menuItems": [
            {
                "id": "0",
                "icon": "fa-random",
                "label": "default",
                "topic": "Contexter's Lab",
                "payload": "hit the zero",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "1",
                "icon": "",
                "label": "",
                "topic": "",
                "payload": "fat boy",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "native",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": "0",
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "Contexter's Lab",
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "00464454d89c5563"
            ]
        ]
    },
    {
        "id": "00464454d89c5563",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 500,
        "wires": []
    },
    {
        "id": "6c37854f4fb3525f",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "inject example menu",
        "props": [
            {
                "p": "menu",
                "v": "[{\"text\":\"Options\",\"icon\":\"fa-list\",\"sub\":[{\"text\":\"Edit\",\"icon\":\"fa-edit\",\"topic\":\"edit\",\"payload\":[1,2,3,4,5],\"payloadType\":\"JSON\",\"outputField\":\"editArray\"},{\"text\":\"Cut\",\"icon\":\"fa-cut\",\"enabled\":true,\"topic\":\"cut\",\"payload\":\"true\",\"payloadType\":\"bool\"}]},{\"text\":\"---\"},{\"text\":\"Delete\",\"icon\":\"fa-trash\",\"enabled\":true,\"payload\":\"12\",\"payloadType\":\"num\"},{\"text\":\"---\"},{\"text\":\"Quit\",\"icon\":\"fa-times\",\"enabled\":false}]",
                "vt": "json"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sample menu",
        "payloadType": "str",
        "x": 870,
        "y": 500,
        "wires": [
            [
                "644de9f23e091f6b"
            ]
        ]
    },
    {
        "id": "0d7615e86a746bd6",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "0.1 0.25",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0 0.25\\n",
        "payloadType": "str",
        "x": 700,
        "y": 820,
        "wires": [
            [
                "97c90fcabd74f65f"
            ]
        ]
    },
    {
        "id": "97c90fcabd74f65f",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 840,
        "wires": []
    },
    {
        "id": "44f7c3a31a76512f",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "0.15 0.5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1 0.5",
        "payloadType": "str",
        "x": 700,
        "y": 860,
        "wires": [
            [
                "97c90fcabd74f65f"
            ]
        ]
    },
    {
        "id": "fe971e1a59473773",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "0.2 0.75",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.2 0.75",
        "payloadType": "str",
        "x": 700,
        "y": 900,
        "wires": [
            [
                "97c90fcabd74f65f"
            ]
        ]
    },
    {
        "id": "ea4abe379d90aa1d",
        "type": "comment",
        "z": "318a322694c0e8d7",
        "name": "gnu octave socket test",
        "info": "example inspired  by\n\nhttps://stackoverflow.com/questions/44461701/send-data-by-network-and-plot-with-octave",
        "x": 760,
        "y": 940,
        "wires": []
    },
    {
        "id": "492bbbf2376ad45e",
        "type": "tcp in",
        "z": "318a322694c0e8d7",
        "name": "port 9877",
        "server": "server",
        "host": "",
        "port": "9877",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "port 9877",
        "base64": false,
        "tls": "",
        "x": 701.0719528198242,
        "y": 1031.559536933899,
        "wires": [
            [
                "9ce635a6ef84efeb",
                "1d2647d84b0e5b48"
            ]
        ]
    },
    {
        "id": "9ce635a6ef84efeb",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "port 9877",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f58248d4950a3a72",
        "type": "comment",
        "z": "318a322694c0e8d7",
        "name": "TCP input on port 9877 - use for IP-based sensors",
        "info": "",
        "x": 865.3030141194661,
        "y": 997.8906567789712,
        "wires": []
    },
    {
        "id": "c45a8d3b2081303a",
        "type": "tcp out",
        "z": "318a322694c0e8d7",
        "name": "",
        "host": "localhost",
        "port": "9877",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 830,
        "y": 1080,
        "wires": []
    },
    {
        "id": "72295910b1dc1da5",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 1080,
        "wires": [
            [
                "c45a8d3b2081303a"
            ]
        ]
    },
    {
        "id": "d5ed9a3cad24e243",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "name": "test json injection",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[     {         \"id\": \"my test json injection\",         \"type\": \"tab\",         \"label\": \"Lab Mint Box\",         \"disabled\": false,         \"info\": \"\",         \"env\": []     }]",
        "payloadType": "str",
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "c45a8d3b2081303a"
            ]
        ]
    },
    {
        "id": "1d2647d84b0e5b48",
        "type": "json",
        "z": "318a322694c0e8d7",
        "name": "json&other_convert",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 1070,
        "y": 1060,
        "wires": [
            [
                "9ce635a6ef84efeb"
            ]
        ]
    },
    {
        "id": "da250ea1c50999dc",
        "type": "register",
        "z": "318a322694c0e8d7",
        "account": "4779e839f632c450",
        "registrationCode": "",
        "name": "",
        "x": 1580.7215881347652,
        "y": 841.4176101562498,
        "wires": [
            [
                "f5d22076c90e5f2c"
            ],
            [
                "f5d22076c90e5f2c"
            ]
        ]
    },
    {
        "id": "f5d22076c90e5f2c",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730.7790336608887,
        "y": 837.9809589385986,
        "wires": []
    },
    {
        "id": "3e6983a8fc131349",
        "type": "receive",
        "z": "318a322694c0e8d7",
        "account": "",
        "downloadDirectory": "",
        "verboseLogging": false,
        "name": "",
        "x": 1566.505671909877,
        "y": 900.6270108816964,
        "wires": [
            [
                "3de4b52b62293105"
            ],
            [
                "3de4b52b62293105"
            ]
        ]
    },
    {
        "id": "3de4b52b62293105",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1727.544677734375,
        "y": 898.8311767578125,
        "wires": []
    },
    {
        "id": "49656df8d25d2e8e",
        "type": "request-sms",
        "z": "318a322694c0e8d7",
        "server": "",
        "account": "51e2cf908068117a",
        "captcha": "",
        "name": "fish reg",
        "x": 1565.0609016418457,
        "y": 778.8209972381592,
        "wires": [
            [
                "056a6624fcf6dd82"
            ],
            [
                "81a3c8fa2313d28d"
            ]
        ]
    },
    {
        "id": "81a3c8fa2313d28d",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1717.544677734375,
        "y": 784.5454711914062,
        "wires": []
    },
    {
        "id": "056a6624fcf6dd82",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1716.1160888671875,
        "y": 750.259765625,
        "wires": []
    },
    {
        "id": "ee027cbe3b0d89d4",
        "type": "catch",
        "z": "318a322694c0e8d7",
        "name": "shut up",
        "scope": [
            "3e6983a8fc131349"
        ],
        "uncaught": false,
        "x": 1570.7215881347652,
        "y": 970.252876269531,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e6e774d29aaa35",
        "type": "ui_multistate_switch",
        "z": "318a322694c0e8d7",
        "g": "5fa53ee46f48dcb4",
        "name": "temporary enable",
        "group": "914164c06452d25a",
        "order": 5,
        "width": "6",
        "height": 1,
        "label": "temporary enable",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": false,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "enable",
                "value": "true",
                "valueType": "bool",
                "color": "#009933"
            },
            {
                "label": "disable",
                "value": "false",
                "valueType": "bool",
                "color": "#690c0c"
            }
        ],
        "topic": "",
        "x": 550.7523345947266,
        "y": 1348.2523225097655,
        "wires": [
            [
                "59094e903cd3cbbb",
                "b6a543c5071f700e"
            ]
        ]
    },
    {
        "id": "56e6e5e73a56798d",
        "type": "inject",
        "z": "318a322694c0e8d7",
        "g": "5fa53ee46f48dcb4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 350.75233459472656,
        "y": 1347.0546169281006,
        "wires": [
            [
                "b7e6e774d29aaa35"
            ]
        ]
    },
    {
        "id": "59094e903cd3cbbb",
        "type": "trigger",
        "z": "318a322694c0e8d7",
        "g": "5fa53ee46f48dcb4",
        "name": "delay for disabler",
        "op1": "",
        "op2": "false",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "1.6",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 555.7407989501953,
        "y": 1292.7432126998901,
        "wires": [
            [
                "b7e6e774d29aaa35"
            ]
        ]
    },
    {
        "id": "b6a543c5071f700e",
        "type": "debug",
        "z": "318a322694c0e8d7",
        "g": "5fa53ee46f48dcb4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 761.4930076599121,
        "y": 1351.4813737869263,
        "wires": []
    },
    {
        "id": "fe8ffba25d96b765",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "group": "85709d7cd14aee72",
        "order": 5,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "Current DV (l) :",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1084.2858428955078,
        "y": 602.8572721481323,
        "wires": []
    },
    {
        "id": "7ad3be4db0a3d0e6",
        "type": "ui_form",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "label": "depth values (cm) for calculation",
        "group": "85709d7cd14aee72",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "low level (cm)",
                "value": "h1",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "high level (cm)",
                "value": "h2",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "h1": "",
            "h2": ""
        },
        "payload": "",
        "submit": "calculate offset",
        "cancel": "",
        "topic": "depth_cal_req",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "6c1b8ebb1d771b52",
                "fa20d3e271a6da1c",
                "fcacf10a5dd74da0"
            ]
        ]
    },
    {
        "id": "6c1b8ebb1d771b52",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "b5f2bee84be238cc",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "init default values",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "dummy values",
        "payload": "{\"h1\":55.4,\"h2\":56.7,\"DV\":2.00}",
        "payloadType": "json",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "7ad3be4db0a3d0e6"
            ]
        ]
    },
    {
        "id": "696a32cb9a828e73",
        "type": "ui_text_input",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "",
        "label": "set new default calibration volume (l)",
        "tooltip": "set the volume used for calibrating depth offset (in litres)",
        "group": "85709d7cd14aee72",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 534.2858428955078,
        "y": 602.8572721481323,
        "wires": [
            [
                "d2f54bc2d0c982fa"
            ]
        ]
    },
    {
        "id": "bf1f43bfb5e45960",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "DV inject 2.00l",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.00",
        "payloadType": "num",
        "x": 284.2858428955078,
        "y": 602.8572721481323,
        "wires": [
            [
                "696a32cb9a828e73"
            ]
        ]
    },
    {
        "id": "fa20d3e271a6da1c",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "reload",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "7ad3be4db0a3d0e6"
            ]
        ]
    },
    {
        "id": "d2f54bc2d0c982fa",
        "type": "change",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "set flow.default_calibration_volume",
        "rules": [
            {
                "t": "set",
                "p": "default_calibration_volume",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 844.2858428955078,
        "y": 602.8572721481323,
        "wires": [
            [
                "fe8ffba25d96b765"
            ]
        ]
    },
    {
        "id": "f486f7fcfe803a2d",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 814.2858428955078,
        "y": 682.8572721481323,
        "wires": []
    },
    {
        "id": "c1632b9178641d7d",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "check init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.99886",
        "payloadType": "num",
        "x": 384.2858428955078,
        "y": 682.8572721481323,
        "wires": [
            [
                "1f208047435ea5d6"
            ]
        ]
    },
    {
        "id": "1f208047435ea5d6",
        "type": "change",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "get flow.default_calibration_volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "default_calibration_volume",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "default_calibration_volume",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 604.2858428955078,
        "y": 682.8572721481323,
        "wires": [
            [
                "f486f7fcfe803a2d"
            ]
        ]
    },
    {
        "id": "2cfd80d8e9dc6d5d",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "test current flow.default_calibration_volume - NOT ON UI",
        "info": "",
        "x": 534.2858428955078,
        "y": 642.8572721481323,
        "wires": []
    },
    {
        "id": "d8bf581811f19437",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "Calculate Depth Offset ",
        "info": "## ",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "5170ac8fe7bc6cd3",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "group": "85709d7cd14aee72",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Calc'd Depth Offset (cm) : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1070,
        "y": 300,
        "wires": []
    },
    {
        "id": "fcacf10a5dd74da0",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "some offset math",
        "func": "//for preservation of values\nmsg.h1 = msg.payload.h1;\nmsg.h2 = msg.payload.h2;\n\n//for local human consumption (abbreviated form)\nvar h1 = msg.payload.h1;\nvar h2 = msg.payload.h2;\n\nconst defaultDepthOffset = -165.0;\n\n//setup\nif (\"setDefaultOffset\" == msg.topic)\n{\n    if (Number.isFinite(msg.payload))\n        flow.set(\"last_calculated_offset\",msg.payload);\n    msg.topic = \"default depth offset\";\n}\nelse  //normal calculation happening\n{\n    var DV = flow.get(\"default_calibration_volume\")||2.00;\n    msg.DV = DV;\n\n    var lco = flow.get(\"last_calculated_offset\")||defaultDepthOffset;\n    \n    //see logbook p.124 2022 March 5 for source\n\n    var discrim = 9*Math.pow((Math.pow(h2,2)-Math.pow(h1,2)),2)\n                -12*(h2-h1)*(Math.pow(h2,3)-Math.pow(h1,3) \n                - 300000*DV/3.1415926);\n            \n    if (0 > discrim)\n    {\n        msg.payload = \"invalid (defaulting: \"+lco+\")\";\n        flow.set(\"last_calculated_offset\",lco);\n        msg.topic = \"FAILED calculated depth offset\";\n    }\n    else\n    {\n        msg.payload = Number( (3*(Math.pow(h2,2)-Math.pow(h1,2))\n                             - Math.pow(discrim,0.5) )\n                           /(6*(h2-h1))\n                  ).toFixed(1);\n        flow.set(\"last_calculated_offset\",msg.payload);\n        msg.topic = \"calculated depth offset (cone section model) in centimetres\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "719db83d57190da2",
                "5170ac8fe7bc6cd3",
                "3306ec7d1b3869dc"
            ]
        ]
    },
    {
        "id": "719db83d57190da2",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 340,
        "wires": []
    },
    {
        "id": "5fa46f6301b509c4",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "change this up to move the higher depth value to the lower value, and blank the higher value",
        "info": "It makes it human-easier to process data",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "7b3bf351b8d0f47f",
        "type": "ui_form",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "",
        "label": "depth values (cm) for volume estimation",
        "group": "9f041309796e21ba",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "low level (cm)",
                "value": "h1",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "high level (cm)",
                "value": "h2",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "h1": "",
            "h2": ""
        },
        "payload": "",
        "submit": "calculate volume difference",
        "cancel": "",
        "topic": "volume_estimation",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 463.0952911376953,
        "y": 942.6189432144165,
        "wires": [
            [
                "dc53fecff20c23a9",
                "a17ae91f9ed5e1f5"
            ]
        ]
    },
    {
        "id": "a32d6944a5fb0ee5",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 903.0952262878418,
        "y": 839.7616949081421,
        "wires": []
    },
    {
        "id": "0c35b49a1784cca6",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "init default values",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "dummy values",
        "payload": "{\"h1\":41.1,\"h2\":42.7,\"DV\":2.00}",
        "payloadType": "json",
        "x": 293.09529876708984,
        "y": 884.0474090576172,
        "wires": [
            [
                "7b3bf351b8d0f47f"
            ]
        ]
    },
    {
        "id": "dc53fecff20c23a9",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "reload",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 457.3810348510742,
        "y": 1004.0474967956543,
        "wires": [
            [
                "7b3bf351b8d0f47f"
            ]
        ]
    },
    {
        "id": "cb5412183fb780fe",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "group": "9f041309796e21ba",
        "order": 4,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "Volume Difference (litres) :",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1185.9524383544922,
        "y": 888.3332099914551,
        "wires": []
    },
    {
        "id": "6c20318ba78e2f5e",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "some volume math",
        "func": "//for preservation of values\nmsg.h1 = msg.payload.h1;\nmsg.h2 = msg.payload.h2;\n\n//for local human consumption (abbreviated form)\nvar h1 = msg.payload.h1;\nvar h2 = msg.payload.h2;\n\n//see logbook p.124 2022 March 5 for source\nvar hoff = flow.get(\"last_calculated_offset\")||-165.0; //-165.0 is empirically derived\n\n//Calculate the volume by the difference in depths of the conical-section\n//model of the fish/water reservoir.  (see logbook ~2020~2024)\nvar volume = (3.1415926*0.01/3000)*\n                (Math.pow((h2-hoff),3)-Math.pow((h1-hoff),3) );\n            \n\nmsg.payload = Number(volume).toFixed(1);\nmsg.units = \"litres\";\nmsg.label = \"Volume\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 935.9524383544922,
        "y": 888.3332099914551,
        "wires": [
            [
                "ede133a3b92a65e6",
                "cb5412183fb780fe",
                "6e8084c8aefd7ebf",
                "51253b5af474936b"
            ]
        ]
    },
    {
        "id": "ede133a3b92a65e6",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1115.9524383544922,
        "y": 928.3332099914551,
        "wires": []
    },
    {
        "id": "cad09dba6e0c8e47",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "Calculate new depth offset",
        "info": "",
        "x": 310,
        "y": 340,
        "wires": []
    },
    {
        "id": "445fb174fb30c08f",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "8877814897adab9a",
        "name": "Set new calibration Volume (litres)",
        "info": "",
        "x": 344.2858428955078,
        "y": 562.8572721481323,
        "wires": []
    },
    {
        "id": "3306ec7d1b3869dc",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "group": "9f041309796e21ba",
        "order": 5,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "preset depth offset (cm) : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1072.8571090698242,
        "y": 391.4286365509033,
        "wires": []
    },
    {
        "id": "16c40c4030caf0e3",
        "type": "link in",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "calc DV",
        "links": [
            "2839e7104ee08d09"
        ],
        "x": 788.0953559875488,
        "y": 839.7617301940918,
        "wires": [
            [
                "6c20318ba78e2f5e",
                "a32d6944a5fb0ee5"
            ]
        ]
    },
    {
        "id": "6e8084c8aefd7ebf",
        "type": "ui_chart",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "",
        "group": "9f041309796e21ba",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "volume calculations graph (litre)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1195.9524383544922,
        "y": 848.3332099914551,
        "wires": [
            []
        ]
    },
    {
        "id": "a17ae91f9ed5e1f5",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "topic: declare source: manual",
        "func": "msg.topic = \"Manual Etrny (sic)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 685.9524383544922,
        "y": 888.3332099914551,
        "wires": [
            [
                "6c20318ba78e2f5e",
                "a32d6944a5fb0ee5"
            ]
        ]
    },
    {
        "id": "6c0decb58bd5e82a",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "clear data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Manual Etrny (sic)",
        "payload": "[]",
        "payloadType": "json",
        "x": 1077.3811149597168,
        "y": 801.1905307769775,
        "wires": [
            [
                "bbd233e90db23698"
            ]
        ]
    },
    {
        "id": "bbd233e90db23698",
        "type": "ui_button",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "clear volumes",
        "group": "9f041309796e21ba",
        "order": 7,
        "width": "3",
        "height": "1",
        "passthru": true,
        "label": "clear volumes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1257.3811149597168,
        "y": 801.1905307769775,
        "wires": [
            [
                "6e8084c8aefd7ebf"
            ]
        ]
    },
    {
        "id": "1c82842d226f85c5",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "setDefaultOffset",
        "payload": "-165.0",
        "payloadType": "num",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "5aea9ef24d1d4c5f"
            ]
        ]
    },
    {
        "id": "5aea9ef24d1d4c5f",
        "type": "ui_button",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "group": "85709d7cd14aee72",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "Reset to Default Offset (-165.0cm)",
        "tooltip": "Reset Depth offset to DEFAULT",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "-165.0",
        "payloadType": "num",
        "topic": "setDefaultOffset",
        "topicType": "str",
        "x": 620,
        "y": 360,
        "wires": [
            [
                "fcacf10a5dd74da0"
            ]
        ]
    },
    {
        "id": "d453d78015e331e9",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "33113df57b9bc691",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "setDefaultOffset",
        "payload": "-160.1",
        "payloadType": "num",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "5aea9ef24d1d4c5f"
            ]
        ]
    },
    {
        "id": "ca18018514f976da",
        "type": "http in",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "/Services/VolumeDiff input - PUT",
        "url": "/Services/VolumeDiff",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 313.4920883178711,
        "y": 1183.522053718567,
        "wires": [
            [
                "555073cffb51e748"
            ]
        ]
    },
    {
        "id": "555073cffb51e748",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "service VolumeDiff calculation",
        "func": "if (null == msg.payload) return;\n\nmsg.topic = \"Resource Service\";\n\n//for preservation of values\ntry {\n    msg.h1 = msg.payload.h1;\n    msg.h2 = msg.payload.h2;\n}\ncatch (error)\n{\n    node.warn(\"Malformed input on Resource Service VolumeDiff\");\n    return;\n}\n\n//for local human consumption (abbreviated form)\nvar h1 = msg.payload.h1;\nvar h2 = msg.payload.h2;\n\n//see logbook p.124 2022 March 5 for source\n//currently hardcoded -165.0, refactor to a 'specified in object' parameter?\n//-165.0 is empirically derived for my 80 litre green garbage can\nvar hoff = flow.get(\"last_calculated_offset\")||-165.0; \n\n//Calculate the volume by the difference in depths of the conical-section\n//model of the fish/water reservoir.  (see logbook ~2020~2024)\nvar volume = (3.1415926*0.01/3000)*\n                (Math.pow((h2-hoff),3)-Math.pow((h1-hoff),3) );\n            \n\nmsg.payload = Number(volume).toFixed(1);\nmsg.units = \"litres\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 598.4228134155273,
        "y": 1184.1271295547485,
        "wires": [
            [
                "19d1bb905c215d8d"
            ]
        ]
    },
    {
        "id": "19d1bb905c215d8d",
        "type": "http response",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 857.7829513549805,
        "y": 1183.8195476531982,
        "wires": []
    },
    {
        "id": "b99bb99506167123",
        "type": "http request",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "request to /Services/VolumeDiff",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "body",
        "url": "10.9.142.142:1880/Services/VolumeDiff",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 629.8512496948242,
        "y": 1221.270022392273,
        "wires": [
            [
                "18cd7c8ffdda511f"
            ]
        ]
    },
    {
        "id": "92dbdc8895839347",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test Inject",
        "payload": "{\"h1\":46,\"h2\":51}",
        "payloadType": "json",
        "x": 349.86616625104625,
        "y": 1221.3194033802579,
        "wires": [
            [
                "b99bb99506167123"
            ]
        ]
    },
    {
        "id": "18cd7c8ffdda511f",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 838.4227600097656,
        "y": 1220.1891069412231,
        "wires": []
    },
    {
        "id": "a3de3804d95331ea",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "group": "9f041309796e21ba",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "resource:  /Services/VolumeDiff",
        "format": "/services/VolumeDiff",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 316.35926055908203,
        "y": 1143.7104845046997,
        "wires": []
    },
    {
        "id": "51253b5af474936b",
        "type": "link out",
        "z": "682f80dcb9503c5e",
        "g": "3c82997a3fe65f2d",
        "name": "Current Calculated Volume Diff",
        "mode": "link",
        "links": [
            "03ce5e43c8350326"
        ],
        "x": 1082.2918787002563,
        "y": 972.1727867126465,
        "wires": []
    },
    {
        "id": "da259817f5aaeb73",
        "type": "http in",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "/Services/VolumeDiff - GET info",
        "url": "/Services/VolumeDiff",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 392.40165710449213,
        "y": 1319.0856558430987,
        "wires": [
            [
                "dd39d6769975fd11"
            ]
        ]
    },
    {
        "id": "dd39d6769975fd11",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "human i/o advice",
        "func": "//{\"h1\":46,\"h2\":51}\nmsg.payload = 'INPUT payload {\"h1\":<lowval>,\"h2\":<highval>}  OUTPUT payload <calculated volume>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 664.0741348266602,
        "y": 1320.0927419662476,
        "wires": [
            [
                "4eb10fc01e60a461"
            ]
        ]
    },
    {
        "id": "4eb10fc01e60a461",
        "type": "http response",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 845.7408313751221,
        "y": 1321.0995769500732,
        "wires": []
    },
    {
        "id": "0ea9bf1b039128a0",
        "type": "http request",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "request to /Services/VolumeDiff GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/Services/VolumeDiff",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 600.3299407958984,
        "y": 1361.4527435302734,
        "wires": [
            [
                "22bf8a30cd3a5634"
            ]
        ]
    },
    {
        "id": "22bf8a30cd3a5634",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 832.3959617614746,
        "y": 1365.7527379989624,
        "wires": []
    },
    {
        "id": "bfd12aba302ca28b",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "GET returns usage info",
        "info": "",
        "x": 335.55992126464844,
        "y": 1278.4939994812012,
        "wires": []
    },
    {
        "id": "ca103509e7058e72",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "db65042931eccfc1",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "What is up?",
        "payload": "",
        "payloadType": "date",
        "x": 374.3142776489258,
        "y": 1361.410629272461,
        "wires": [
            [
                "0ea9bf1b039128a0"
            ]
        ]
    },
    {
        "id": "a916093ea383cdd3",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "Calculate Depth required for a given Volume",
        "func": "if ('undefined' == typeof msg.payload || null == msg.payload) return;\n//The fishinator water level has some depth.   If you want to pump, say, 2 litres,\n//Rather than figure out what is the depth\n\ntry {\n    var depth = Number(msg.payload.depth);\n    var vol = Number(msg.payload.volume);\n}\ncatch (error) {\n    node.warn(\"Malformed input on Resource Service CalcLowerDepth\");\n    return;\n}\n\n//see logbook p.124 2022 March 5 for source\nvar hoff = flow.get(\"last_calculated_offset\")||-165.0; //-165.0 is empirically derived\n\n//logbook p.64 2024 Dec 21 for the algebra for this equation\nvar newdepth = Math.pow((Math.pow(depth-hoff,3) - vol*3*Math.pow(10,5)/Math.PI),0.333333333) + hoff;\nmsg.originalparameters = msg.payload;\nmsg.payload = newdepth.toFixed(1);\nmsg.units = \"cm\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 732.407470703125,
        "y": 1667.8649501800537,
        "wires": [
            [
                "bbe58fad524e8877",
                "e9e1ac11d88b556d"
            ]
        ]
    },
    {
        "id": "fbb5dcb06a90e5d9",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "{\"depth\":50.0,\"volume\":10.0}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test inject data",
        "payload": "{\"depth\":50.0,\"volume\":10.0}",
        "payloadType": "json",
        "x": 507.40172576904297,
        "y": 1572.0719871520996,
        "wires": [
            [
                "a916093ea383cdd3"
            ]
        ]
    },
    {
        "id": "bbe58fad524e8877",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 864.8263244628906,
        "y": 1608.7038593292236,
        "wires": []
    },
    {
        "id": "7859c55574c46fe8",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "{\"depth\":35.0,\"volume\":2.0}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test inject data",
        "payload": "{\"depth\":35.0,\"volume\":2.0}",
        "payloadType": "json",
        "x": 521.4931182861328,
        "y": 1617.0372009277344,
        "wires": [
            [
                "a916093ea383cdd3"
            ]
        ]
    },
    {
        "id": "7b5f82eb9c5ba3d1",
        "type": "http in",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "/Services/Depth4Volume - GET info",
        "url": "/Services/Depth4Volume",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 498.15966796875,
        "y": 1816.4814376831055,
        "wires": [
            [
                "7d91f707120f9556"
            ]
        ]
    },
    {
        "id": "7d91f707120f9556",
        "type": "function",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "human i/o advice",
        "func": "//{\"h1\":46,\"h2\":51}\nmsg.payload = 'INPUT payload {\"depth\":<current depth in cm>,\"volume\":<target volume in litres>}  '\n            +'OUTPUT payload <calculated depth to acheive volume>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 759.832145690918,
        "y": 1817.4885238062543,
        "wires": [
            [
                "8fe34d4a6d8dc73c"
            ]
        ]
    },
    {
        "id": "8fe34d4a6d8dc73c",
        "type": "http response",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 941.4988422393799,
        "y": 1818.49535879008,
        "wires": []
    },
    {
        "id": "237d3ef026d81ad5",
        "type": "http request",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "request to /Services/Depth4Volume GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/Services/Depth4Volume",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 706.0879516601562,
        "y": 1858.8485253702802,
        "wires": [
            [
                "abdb5fb4d09c14a7"
            ]
        ]
    },
    {
        "id": "abdb5fb4d09c14a7",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 946.4872970581055,
        "y": 1859.8151693344116,
        "wires": []
    },
    {
        "id": "95dcdc3246e92cae",
        "type": "http in",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "/Services/Depth4Volume input - PUT",
        "url": "/Services/Depth4Volume",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 377.5834197998047,
        "y": 1667.5844860076904,
        "wires": [
            [
                "a916093ea383cdd3"
            ]
        ]
    },
    {
        "id": "e9e1ac11d88b556d",
        "type": "http response",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1020.207633972168,
        "y": 1666.2154273986816,
        "wires": []
    },
    {
        "id": "6505c3f41067ba7a",
        "type": "http request",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "request to /Services/Depth4Volume",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "body",
        "url": "10.9.142.142:1880/Services/Depth4Volume",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 695.6093444824219,
        "y": 1720.3324146270752,
        "wires": [
            [
                "ca07ef0f8ac095c0"
            ]
        ]
    },
    {
        "id": "ca07ef0f8ac095c0",
        "type": "debug",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 934.1807708740234,
        "y": 1717.58488878123,
        "wires": []
    },
    {
        "id": "72ccca9464ed755e",
        "type": "ui_text",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "group": "9f041309796e21ba",
        "order": 2,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "resource:  /Services/Depth4Volume",
        "format": "/services/Depth4Volume",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 325.45062255859375,
        "y": 1494.4397068023682,
        "wires": []
    },
    {
        "id": "a7b56e87e3fb2c92",
        "type": "comment",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "GET returns usage info",
        "info": "",
        "x": 431.31793212890625,
        "y": 1775.889781321208,
        "wires": []
    },
    {
        "id": "8292cb22bd3d0695",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "What is up?",
        "payload": "",
        "payloadType": "date",
        "x": 470.0722885131836,
        "y": 1858.8064111124677,
        "wires": [
            [
                "237d3ef026d81ad5"
            ]
        ]
    },
    {
        "id": "d7346a74d8d212d6",
        "type": "inject",
        "z": "682f80dcb9503c5e",
        "g": "8bbe1a2ce979e8f3",
        "name": "{\"depth\":50.0,\"volume\":10.0}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test inject data",
        "payload": "{\"depth\":50.0,\"volume\":10.0}",
        "payloadType": "json",
        "x": 389.82640075683594,
        "y": 1723.1481285095215,
        "wires": [
            [
                "6505c3f41067ba7a"
            ]
        ]
    },
    {
        "id": "89c1efcca4f8379c",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "label": "Volume (l)",
        "tooltip": "",
        "group": "e071eaadf91aa1bd",
        "order": 1,
        "width": "2",
        "height": "4",
        "passthru": true,
        "outs": "end",
        "topic": "Volume",
        "topicType": "str",
        "min": "0.1",
        "max": "2.5",
        "step": "0.1",
        "className": "",
        "x": 835.8645782470703,
        "y": 176.4006404876709,
        "wires": [
            [
                "993a07758c6a820c",
                "e4dd9bb596ff6ba1"
            ]
        ]
    },
    {
        "id": "993a07758c6a820c",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1098.1559257507324,
        "y": 222.6944818496704,
        "wires": []
    },
    {
        "id": "341c3f519513eecf",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "label": "Depth (cm)",
        "tooltip": "",
        "group": "e071eaadf91aa1bd",
        "order": 3,
        "width": "2",
        "height": "4",
        "passthru": true,
        "outs": "end",
        "topic": "Depth",
        "topicType": "str",
        "min": "0.1",
        "max": "2.5",
        "step": "0.1",
        "className": "",
        "x": 842.770450592041,
        "y": 265.22085762023926,
        "wires": [
            [
                "993a07758c6a820c",
                "e4dd9bb596ff6ba1"
            ]
        ]
    },
    {
        "id": "b5b77122b9bad2a9",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "label": "Time (s)",
        "tooltip": "",
        "group": "e071eaadf91aa1bd",
        "order": 2,
        "width": "2",
        "height": "4",
        "passthru": true,
        "outs": "end",
        "topic": "Time",
        "topicType": "str",
        "min": "15",
        "max": "300",
        "step": "15",
        "className": "",
        "x": 834.7704544067384,
        "y": 222.0778741958618,
        "wires": [
            [
                "993a07758c6a820c",
                "e4dd9bb596ff6ba1"
            ]
        ]
    },
    {
        "id": "ad3bb4aa48f97152",
        "type": "ui_multistate_switch",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "group": "e071eaadf91aa1bd",
        "order": 4,
        "width": "6",
        "height": 1,
        "label": "Pump Measure",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Volume",
                "value": "Volume",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Time",
                "value": "Time",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Depth",
                "value": "Depth",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "Selector",
        "x": 328.1729736328125,
        "y": 219.51427268981934,
        "wires": [
            [
                "ff73705b98c43175",
                "a1f5eb629b0bac1a"
            ]
        ]
    },
    {
        "id": "ff73705b98c43175",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "dis/enable dashboard measures",
        "func": "var CategoryDisable = { \"enabled\": false};\nvar CategoryEnable = {\"enabled\": true};\n\nif (Number(msg.payload))\n{\n    CategoryEnable.topic = msg.topic;\n    CategoryEnable.payload = msg.payload;\n}\nelse\n{\n    CategoryEnable.topic = msg.payload;\n}\n\nswitch(CategoryEnable.topic) \n{   \n    case \"Volume\": return [CategoryEnable,CategoryDisable,CategoryDisable];\n        case \"Time\": return [CategoryDisable,CategoryEnable,CategoryDisable];\n        case \"Depth\": return [CategoryDisable,CategoryDisable,CategoryEnable];\n        default:  return [CategoryDisable,CategoryDisable,CategoryDisable]; \n}\n\nreturn;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 581.3045043945312,
        "y": 221.1489486694336,
        "wires": [
            [
                "89c1efcca4f8379c"
            ],
            [
                "b5b77122b9bad2a9"
            ],
            [
                "341c3f519513eecf"
            ]
        ],
        "outputLabels": [
            "volume",
            "time",
            "depth"
        ]
    },
    {
        "id": "467c54de94b91cb2",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1451.5707893371582,
        "y": 221.68839645385742,
        "wires": []
    },
    {
        "id": "477ff9774fed6d72",
        "type": "ui_button",
        "z": "b9c733ef02f88472",
        "d": true,
        "name": "",
        "group": "fecf8fc1bf232338",
        "order": 2,
        "width": "1",
        "height": "2",
        "passthru": false,
        "label": "Buzzer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Buzzer",
        "payloadType": "str",
        "topic": "command",
        "topicType": "str",
        "x": 1078.9853515625,
        "y": 519.2194671630859,
        "wires": [
            [
                "3a7cfbf551942c6b"
            ]
        ]
    },
    {
        "id": "3a7cfbf551942c6b",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "format for dash",
        "func": "return {\"payload\": msg.payload+\" \"+msg.topic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1216.8377304077148,
        "y": 555.8910737037659,
        "wires": [
            [
                "d918f2b920cfc81e",
                "53e58ff5bf5f468a"
            ]
        ]
    },
    {
        "id": "d918f2b920cfc81e",
        "type": "ui_text",
        "z": "b9c733ef02f88472",
        "group": "fecf8fc1bf232338",
        "order": 5,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "command sent",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1441.2872924804688,
        "y": 629.4200611114502,
        "wires": []
    },
    {
        "id": "53e58ff5bf5f468a",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1424.7665615081787,
        "y": 549.6279449462891,
        "wires": []
    },
    {
        "id": "f48631d46c751c09",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "PUT /fishnator/AirFans/command -localtest",
        "url": "/fishnator/AirFans/command",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2615.6193885803223,
        "y": 1954.2718381919858,
        "wires": [
            [
                "1feed8b0fae9c851"
            ]
        ]
    },
    {
        "id": "e967354c8c96976c",
        "type": "ui_switch",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "ENABLE AirFans",
        "label": "AirFans",
        "tooltip": "",
        "group": "fecf8fc1bf232338",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3149.654064178467,
        "y": 1955.0898838081357,
        "wires": [
            [
                "229d521383f88e7c",
                "93279a6e9643fca5",
                "3a7cfbf551942c6b"
            ]
        ]
    },
    {
        "id": "1feed8b0fae9c851",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "Airfans command setup",
        "func": "//sanitize / reject bad input - only \"0\" or \"1\" strings allowed\nif (!((\"0\" == msg.payload )||(\"1\" == msg.payload))) {return;}\n\n//later change this to objects/arrays of objects\nflow.set(\"flowAirFansState\", msg.payload); //payload is string\nmsg.payload = msg.payload;\n\nmsg.topic = \"AirFans REST command \"+Date.now()%1000;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2905.6150398254395,
        "y": 1953.7510862388608,
        "wires": [
            [
                "e967354c8c96976c",
                "44238a10c29ece55"
            ]
        ]
    },
    {
        "id": "229d521383f88e7c",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3175.6190452575684,
        "y": 2027.7619895935059,
        "wires": []
    },
    {
        "id": "44238a10c29ece55",
        "type": "http response",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2957.034809112549,
        "y": 2003.9793968200684,
        "wires": []
    },
    {
        "id": "e432bf6ba8d5546f",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 2568.1189346313477,
        "y": 1767.3144373931882,
        "wires": [
            [
                "93279a6e9643fca5"
            ]
        ]
    },
    {
        "id": "25a1a03e40176df2",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 2566.1788024902344,
        "y": 1816.884688858032,
        "wires": [
            [
                "93279a6e9643fca5"
            ]
        ]
    },
    {
        "id": "93279a6e9643fca5",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "to RaspPI /fishnator/AirFans/command",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.148:1880/fishnator/AirFans/command",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2855.6146087646484,
        "y": 1765.3353133239743,
        "wires": [
            [
                "01fb8f92583d2aec",
                "fab6cd0e066ffc32"
            ]
        ]
    },
    {
        "id": "01fb8f92583d2aec",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120.6189556121826,
        "y": 1766.329486373901,
        "wires": []
    },
    {
        "id": "af813f2a7686cf91",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "This REST api turns the RASPBERRY PI fishinator fan on/off [PUT fishinator api]",
        "info": "",
        "x": 2843.105930328369,
        "y": 1714.4024443664548,
        "wires": []
    },
    {
        "id": "af360c3a1c2a9869",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "test local PUT REST",
        "info": "",
        "x": 2699.7264976501465,
        "y": 2040.762534622192,
        "wires": []
    },
    {
        "id": "774bdb415d094414",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 2524.929256439209,
        "y": 2084.5036859550473,
        "wires": [
            [
                "ca3e617178cee49b"
            ]
        ]
    },
    {
        "id": "64e7700bf151623e",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 2522.9891242980957,
        "y": 2134.073937419891,
        "wires": [
            [
                "ca3e617178cee49b"
            ]
        ]
    },
    {
        "id": "ca3e617178cee49b",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "to /fishnator/AirFans/command -localtest",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/fishnator/AirFans/command",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2822.4249305725098,
        "y": 2082.5245618858335,
        "wires": [
            [
                "f66630bf2d17bfd3"
            ]
        ]
    },
    {
        "id": "f66630bf2d17bfd3",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3049.92928314209,
        "y": 2086.0185809135437,
        "wires": []
    },
    {
        "id": "fab6cd0e066ffc32",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "format text info",
        "func": "if (200 != msg.statusCode) return {\"payload\":\"REST response error on \"+msg.payload+\" payload\"}\nelse return {\"payload\":\"REST confirmation on \"+msg.payload+\" payload\"}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1218.095443725586,
        "y": 631.2651519775391,
        "wires": [
            [
                "d918f2b920cfc81e"
            ]
        ]
    },
    {
        "id": "25a00209e60ab637",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "This REST api turns the fishinator fan on/off [PUT local api]",
        "info": "",
        "x": 2619.5535011291504,
        "y": 1913.3529577293393,
        "wires": []
    },
    {
        "id": "e2541b5c506c04db",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "PUT /fishnator/Pumps/command -localtest",
        "url": "/fishnator/Pumps/command",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 285.08932876586914,
        "y": 1707.9362716674805,
        "wires": [
            [
                "3a68ccd8d968f2f1"
            ]
        ]
    },
    {
        "id": "d111913793bd458d",
        "type": "ui_switch",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "",
        "label": "Pumps",
        "tooltip": "",
        "group": "fecf8fc1bf232338",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 777.2192993164062,
        "y": 1704.2304525375366,
        "wires": [
            [
                "6836770b4b4c14c8",
                "b2ccf13ecaf2a4b3"
            ]
        ]
    },
    {
        "id": "3a68ccd8d968f2f1",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "Pumps command setup",
        "func": "//sanitize / reject bad input\nif (!((\"0\" == msg.payload )||(\"1\" == msg.payload))) \n{\n    //failed!\n    msg.statusCode = 420;\n    return;\n//msg.error = \"Error 1428 Invalid Payload\";\n}\n\n//msg.payload = Number(msg.payload);\n\nmsg.topic = \"Pumps REST command \"+Date.now()%1000;\n\nif (msg.payload)\n    msg.statusCode = 201;\nelse\n    msg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575.0849800109863,
        "y": 1707.4155197143555,
        "wires": [
            [
                "d111913793bd458d",
                "c33abc4397d8571f"
            ]
        ]
    },
    {
        "id": "6836770b4b4c14c8",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 947.5893096923828,
        "y": 1706.7835178375244,
        "wires": []
    },
    {
        "id": "c33abc4397d8571f",
        "type": "http response",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 747.7550201416016,
        "y": 1755.1434955596924,
        "wires": []
    },
    {
        "id": "f846521551a3bf66",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 346.33930587768555,
        "y": 1534.7287559509277,
        "wires": [
            [
                "b2ccf13ecaf2a4b3"
            ]
        ]
    },
    {
        "id": "c6cc4d4b0eec0a6c",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 344.39917373657227,
        "y": 1584.2990074157715,
        "wires": [
            [
                "b2ccf13ecaf2a4b3"
            ]
        ]
    },
    {
        "id": "b2ccf13ecaf2a4b3",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "to /fishnator/Pumps/command",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.148:1880/fishnator/Pumps/command",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 613.8349800109863,
        "y": 1532.7496318817139,
        "wires": [
            [
                "4df6436e120c924b",
                "fab6cd0e066ffc32"
            ]
        ]
    },
    {
        "id": "4df6436e120c924b",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 721.3393249511719,
        "y": 1574.9936828613281,
        "wires": []
    },
    {
        "id": "759bdfe40ba33f6b",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "This REST api turns the fishinator Pumps on/off [PUT fishinator api]",
        "info": "",
        "x": 581.326301574707,
        "y": 1481.8167629241943,
        "wires": []
    },
    {
        "id": "581a8650e5c2a352",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "test local REST",
        "info": "",
        "x": 359.19643783569336,
        "y": 1794.4269680976868,
        "wires": []
    },
    {
        "id": "38a629a4d6b0bf70",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 194.39919662475586,
        "y": 1838.168119430542,
        "wires": [
            [
                "3bf810085283c1de"
            ]
        ]
    },
    {
        "id": "452831ddca36527b",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 192.45906448364258,
        "y": 1887.7383708953857,
        "wires": [
            [
                "3bf810085283c1de"
            ]
        ]
    },
    {
        "id": "3bf810085283c1de",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "to /fishnator/Pumps/command -localtest",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/fishnator/Pumps/command",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 491.89487075805664,
        "y": 1836.1889953613281,
        "wires": [
            [
                "bb635e04253cfc4d"
            ]
        ]
    },
    {
        "id": "bb635e04253cfc4d",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 719.3992233276367,
        "y": 1839.6830143890384,
        "wires": []
    },
    {
        "id": "041d16e9e233650e",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "f7ebd4e76f68c231",
        "name": "This REST api turns the fishinator Pumps on/off [PUT local api]",
        "info": "",
        "x": 299.02344131469727,
        "y": 1667.017391204834,
        "wires": []
    },
    {
        "id": "03ce5e43c8350326",
        "type": "link in",
        "z": "b9c733ef02f88472",
        "name": "",
        "links": [
            "51253b5af474936b"
        ],
        "x": 1333.2589416503906,
        "y": 1674.4496393203735,
        "wires": [
            [
                "04bc3df39e38ee01"
            ]
        ]
    },
    {
        "id": "cbb9beba8f726fec",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "recent delta-Volume pump measure",
        "info": "",
        "x": 1427.5349922180176,
        "y": 1624.8611054420471,
        "wires": []
    },
    {
        "id": "993d875a58a81354",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Volume",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabed",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Volume",
        "payloadType": "str",
        "x": 152.06360680716375,
        "y": 176.52785859353196,
        "wires": [
            [
                "ad3bb4aa48f97152"
            ]
        ]
    },
    {
        "id": "c86cb139b5256d4a",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Time",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Time",
        "payloadType": "str",
        "x": 156.9941749572754,
        "y": 218.888991355896,
        "wires": [
            [
                "ad3bb4aa48f97152"
            ]
        ]
    },
    {
        "id": "43b8743e60597d0e",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Depth",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Depth",
        "payloadType": "str",
        "x": 162.70844268798828,
        "y": 263.17464542388916,
        "wires": [
            [
                "ad3bb4aa48f97152"
            ]
        ]
    },
    {
        "id": "a1f5eb629b0bac1a",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Store default Measure Selection (to Flow)",
        "func": "if (null === msg.topic || null == msg.topic) return;\n//if (undefined == msg.payload) return;\nif ( false==msg.enabled) {return;} //ignore disable messages\n\nswitch (msg.topic)\n{\n    case \"Volume\":\n    case \"Time\":\n    case \"Depth\":{\n            flow.set(\"default_pump_measure\",msg.topic);\n            node.status(msg.topic);\n             break;}\n    default: {\n            //volume for now as default\n            flow.set(\"default_pump_measure\",\"Volume\");\n            node.status(\"Volume\");\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 614.9309921264648,
        "y": 331.03185844421387,
        "wires": [
            []
        ]
    },
    {
        "id": "e4dd9bb596ff6ba1",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Store default Measure Value (to Flow)",
        "func": "if (null === msg.topic || null == msg.topic) return;\n//if (undefined == msg.payload) return;\nif ( false==msg.enabled) {return;} //ignore disable messages\nif (!Number(msg.payload)) return; //this function only for values\n\n\nswitch (msg.topic)\n{\n    case \"Volume\": {\n        flow.set(\"defaultPumpVolume\",msg.payload);\n        break;\n    }\n    case \"Time\": {\n        flow.set(\"defaultPumpTime\",msg.payload);\n        break;\n    }\n    case \"Depth\":{\n        flow.set(\"defaultPumpDepth\",msg.payload);\n        break;\n        \n    }\n    default: {\n        return;\n    }\n    node.status(msg.topic+\" : \"+msg.payload);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1202.7084884643555,
        "y": 178.41270065307617,
        "wires": [
            [
                "467c54de94b91cb2"
            ]
        ]
    },
    {
        "id": "10c8ff0379b691c0",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "4c6a1975a1aa08d1",
        "name": "Store selected Measures/Values as default for flow",
        "info": "",
        "x": 269.2064743041992,
        "y": 114.13693809509277,
        "wires": []
    },
    {
        "id": "44cd1ff92e4a1004",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "add this as a /Configs/Measures service",
        "info": "",
        "x": 320.6448582240513,
        "y": 38.43253053501674,
        "wires": []
    },
    {
        "id": "5c2b79228cdc2492",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "name": "PUT /fishnator/AirFans/command -localtest",
        "url": "/fishnator/Configs/",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 679.8263549804688,
        "y": 39.8148078918457,
        "wires": [
            []
        ]
    },
    {
        "id": "a021d8d1dd922257",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "flow.get",
        "func": "var pm, vol,tim,depth;\npm = flow.get(\"default_pump_measure\");\nvol = flow.get(\"Volume\");\ntim = flow.get(\"Time\");\ndepth = flow.get(\"Depth\");\n\nmsg.payload = { \"pm\":pm, \"vol\":vol, \"tim\":tim, \"depth\": depth};\n            \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1157.4074440002441,
        "y": 32.30323886871338,
        "wires": [
            [
                "0f155b170f2af24c"
            ]
        ]
    },
    {
        "id": "03facec25af5c2b2",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980.0265274047852,
        "y": 38.02413082122803,
        "wires": [
            [
                "a021d8d1dd922257"
            ]
        ]
    },
    {
        "id": "0f155b170f2af24c",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1323.501953125,
        "y": 24.12697982788086,
        "wires": []
    },
    {
        "id": "8125c2902b9f2156",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1836.121437072754,
        "y": 1674.3650641441345,
        "wires": []
    },
    {
        "id": "04bc3df39e38ee01",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "Configure a Pump by Volume",
        "func": "/*\nmsg.payload = Number(volume).toFixed(1);\nmsg.units = \"litres\"\nmsg.label = \"Volume\"\n*/\n\nif ((null == msg.payload) || (null == msg.label)) return;\n\nswitch (msg.label) {\n    case \"Volume\": node.status(\"latest volume: \",msg.payload); break;\n    default: return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1574.0529556274414,
        "y": 1673.641013622284,
        "wires": [
            [
                "8125c2902b9f2156"
            ]
        ]
    },
    {
        "id": "020c50cce395b0f1",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1318.3385314941406,
        "y": 1743.4427008628845,
        "wires": [
            [
                "04bc3df39e38ee01"
            ]
        ]
    },
    {
        "id": "de441007ad7cddc3",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "Pump by Volume",
        "info": "",
        "x": 1391.423713684082,
        "y": 1892.713381767273,
        "wires": []
    },
    {
        "id": "d67718c32c7f52e1",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "should i redo this as a state machine?",
        "info": "",
        "x": 1511.1955757141113,
        "y": 1795.803611278534,
        "wires": []
    },
    {
        "id": "ab2739ae098d9861",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "flow AirFans State change",
        "func": "if ('undefined' != typeof msg.topic && null != msg.topic \n        && 'undefined' != typeof msg.payload && null != msg.payload )\n{\n    var flowAirFansState = flow.get(\"flowAirFansState\")||\"off\";\n    switch(typeof msg.payload){\n        case 'object': \n            node.warn(\"I am object\");\n            JSON.Stringify(msg.payload);\n            break;\n        case 'string': \n            node.warn(\"I am string\");\n            JSON.parse(msg.payload)\n            break;\n        case 'number': \n            switch(msg.payload)\n            {\n                case 0: AirFansState = \"off\";\n                    break;\n                case 1: AirFansState = \"on\";\n                    break;\n                default: break;\n            }\n            node.set(\"flowAirFansState\",AirFansState)\n            msg.humanresult = \"The new FansState is set to \"+AirFansState;\n            node.status({\"text\":\"Fan is \"+AirFansState});\n            break;\n        default: \n            node.warn(\"msg.payload of type :\"+typeof msg.payload); \n            node.status({\"text\":\"Fan is STILL \"+flowAirFansState});\n            return;\n    }\n    flow.set(\"flowAirFansState\",flowAirFansState);\n\n    return msg;\n\n}\nelse return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3455.3353424072266,
        "y": 1522.8821158409119,
        "wires": [
            [
                "b41e533e2a4a97de"
            ]
        ]
    },
    {
        "id": "c736c3cdb828a072",
        "type": "change",
        "z": "b9c733ef02f88472",
        "name": "Set|Change|Delete|Move",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1512.4189453125,
        "y": 1530.7929401397705,
        "wires": [
            []
        ]
    },
    {
        "id": "655ba3f3686ce2a9",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "zero",
        "payload": "0",
        "payloadType": "str",
        "x": 3225.323844273885,
        "y": 1482.0545099525452,
        "wires": [
            [
                "ab2739ae098d9861"
            ]
        ]
    },
    {
        "id": "b624dc48a6384fc7",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "one",
        "payload": "1",
        "payloadType": "num",
        "x": 3222.7427800496416,
        "y": 1528.1482628135682,
        "wires": [
            [
                "ab2739ae098d9861"
            ]
        ]
    },
    {
        "id": "b41e533e2a4a97de",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3643.6457195281982,
        "y": 1522.40785074234,
        "wires": []
    },
    {
        "id": "d6e1afa365ab21f9",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "Temperature control (controls fans/heaters)",
        "func": "//this node sends a message to turn on/off fans and heaters\nvar TempControlEnabled = flow.get(\"TempControlEnabled\")||\"false\";\n\nif (!TempControlEnabled) return;  //nothing to do\n\nvar flowMinGrowTemp = flow.get(\"flowMinGrowTemp\")||\"0\";\nvar flowMaxGrowTemp = flow.get(\"flowMaxGrowTemp\")||\"100\";\n\nif ('undefined' != typeof msg.payload && null != msg.payload\n        && 'undefined' != typeof msg.topic && null != msg.topic)\n{\n    if (\"Growspace air\" != msg.topic) return; //onthis respond to this one.\n    var tmp = Number(msg.payload);\n    if (tmp > flowMaxGrowTemp )\n    {\n        //turn growspace air fan ON\n        msg.payload = \"1\";\n    }\n    else if (tmp < flowMinGrowTemp)\n    {\n        //TODO: turn heater on (lights also heat)\n        \n        //turn growspace air fan OFF\n        msg.payload = \"0\";\n    }\n    else\n        //turn growspace air fan OFF by default\n        msg.payload = \"0\";\n}\n\nnode.status({\"text\":\"Fan is \"+msg.payload+\" -- Heater is <unimplemented>\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 909.0683860778809,
        "y": 1148.9937591552734,
        "wires": [
            [
                "96e53a7d42ea7a5e",
                "627fe8a74df25b79"
            ]
        ]
    },
    {
        "id": "96e53a7d42ea7a5e",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1229.826244354248,
        "y": 1164.8150901794434,
        "wires": []
    },
    {
        "id": "fefca3e13845717d",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "label": "Maximum",
        "tooltip": "",
        "group": "c4c08f68c2291876",
        "order": 3,
        "width": "2",
        "height": "4",
        "passthru": true,
        "outs": "end",
        "topic": "MaxT",
        "topicType": "str",
        "min": "5",
        "max": "25",
        "step": "1",
        "className": "",
        "x": 1053.1594734191895,
        "y": 1243.1482200622559,
        "wires": [
            [
                "b7b9a05f7c4bd957",
                "fab0f46ae45dcb34"
            ]
        ]
    },
    {
        "id": "b7b9a05f7c4bd957",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200.4511966705322,
        "y": 1306.1085109710693,
        "wires": []
    },
    {
        "id": "3a34b8096e5d1ccd",
        "type": "ui_multistate_switch",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "group": "c4c08f68c2291876",
        "order": 4,
        "width": "6",
        "height": 1,
        "label": "Temperature Control",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Enable",
                "value": "enable",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Disable",
                "value": "disable",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "TempControlEnable",
        "x": 385.468074798584,
        "y": 1246.2617864608765,
        "wires": [
            [
                "1ebbbd37a4922737",
                "15f3af3d1a0c031c",
                "175d411cc5ae536a"
            ]
        ]
    },
    {
        "id": "1ebbbd37a4922737",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "dis/ENable dashboard Temperature sliders",
        "func": "var CategoryDisable = { \"enabled\": false};\nvar CategoryEnable = {\"enabled\": true};\n\nif (Number(msg.payload))\n{\n    CategoryEnable.topic = msg.topic;\n    CategoryEnable.payload = msg.payload;\n}\nelse\n{\n    CategoryEnable.topic = msg.payload;\n}\n\nswitch(CategoryEnable.topic) \n{   \n    case \"enable\": return [CategoryEnable,CategoryEnable];\n    case \"disable\": return [CategoryDisable,CategoryDisable];\n    default:  return [CategoryDisable,CategoryDisable]; \n}\n\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750.266414642334,
        "y": 1249.5633010864258,
        "wires": [
            [
                "fefca3e13845717d",
                "3967da408d12e792"
            ],
            [
                "fb5e471417905b7c",
                "3967da408d12e792"
            ]
        ],
        "outputLabels": [
            "MaxT",
            "MinT"
        ]
    },
    {
        "id": "b1f5b4f6ad98aa51",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380.5326766967773,
        "y": 1306.7692432403564,
        "wires": []
    },
    {
        "id": "ca17ce192b856166",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "enable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabed",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "enable",
        "payloadType": "str",
        "x": 191.02537972586492,
        "y": 1246.608648159572,
        "wires": [
            [
                "3a34b8096e5d1ccd"
            ]
        ]
    },
    {
        "id": "175d411cc5ae536a",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "Store Temp Control Enable to flow",
        "func": "if (null === msg.topic || null == msg.topic) return;\nif (\"TempControlEnable\" != msg.topic) return;\n\nvar TempControlEnabled = flow.get(\"TempControlEnabled\")||\"disable\";\n\nif ('airfansenable' != msg.topic) return;\n\nswitch (msg.payload)\n{\n    case \"enable\":\n    case \"disable\":{\n            flow.set(\"TempControlEnabled\", msg.payload);\n            node.status(msg.topic+\" : \"+msg.payload);\n             break;}\n    default: {\n            //volume for now as default\n            //flow.set(\"flowFansEnabled\",false);\n            node.status(\"unhandled state\");\n    }\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 563.8930397033691,
        "y": 1311.112455368042,
        "wires": [
            [
                "9176ec48f42fbc37"
            ]
        ]
    },
    {
        "id": "fab0f46ae45dcb34",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "Store MaxT, MinT Values to flow",
        "func": "if (null === msg.topic || null == msg.topic) return;\n//if (undefined == msg.payload) return;\n\nif (!Number(msg.payload)) return; //this function only for values\n\nvar MinGrowTemp = flow.get(\"flowMinGrowTemp\")||\"15\";\nvar MaxGrowTemp = flow.get(\"flowMaxGrowTemp\")||\"20\";\n    node.status(msg.topic+\" : \"+msg.payload);\n\nswitch (msg.topic)\n{\n    case \"MaxT\":\n            flow.set(\"flowMaxGrowTemp\",msg.payload);\n            break;\n    case \"MinT\":\n            flow.set(\"flowMinGrowTemp\",msg.payload);\n            break;\n    default: {\n        return;\n    }\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1278.3369789123535,
        "y": 1245.1605911254883,
        "wires": [
            [
                "b1f5b4f6ad98aa51"
            ]
        ]
    },
    {
        "id": "97ab7258e5cebd05",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "Store Temperature Control Enable state & MaxT, MinT for Temperature Control",
        "info": "",
        "x": 354.83491134643555,
        "y": 1125.8845405578613,
        "wires": []
    },
    {
        "id": "e03e6bcb225cd759",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "disable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabed",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "disable",
        "payloadType": "str",
        "x": 189.8263816833496,
        "y": 1294.814682006836,
        "wires": [
            [
                "3a34b8096e5d1ccd"
            ]
        ]
    },
    {
        "id": "fb5e471417905b7c",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "label": "Minimum",
        "tooltip": "",
        "group": "c4c08f68c2291876",
        "order": 1,
        "width": "2",
        "height": "4",
        "passthru": true,
        "outs": "end",
        "topic": "MinT",
        "topicType": "str",
        "min": "10",
        "max": "20",
        "step": "1",
        "className": "",
        "x": 1053.1600036621094,
        "y": 1291.4813137054443,
        "wires": [
            [
                "fab0f46ae45dcb34",
                "b7b9a05f7c4bd957"
            ]
        ]
    },
    {
        "id": "3967da408d12e792",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1046.4929695129395,
        "y": 1347.5927333831787,
        "wires": []
    },
    {
        "id": "15f3af3d1a0c031c",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 629.8264617919922,
        "y": 1204.259259223938,
        "wires": []
    },
    {
        "id": "9176ec48f42fbc37",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 791.4929580688477,
        "y": 1311.48140335083,
        "wires": []
    },
    {
        "id": "1deeb4f64323078b",
        "type": "link in",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "links": [
            "6d732cd1b012b9ff"
        ],
        "x": 684.0799217224121,
        "y": 1147.685513496399,
        "wires": [
            [
                "d6e1afa365ab21f9",
                "24fa448edba0acea"
            ]
        ]
    },
    {
        "id": "e2d431b69eeeb3de",
        "type": "link in",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "AirfansEnableState payload 0/1",
        "links": [
            "627fe8a74df25b79"
        ],
        "x": 2996.1457481384277,
        "y": 1914.207135204315,
        "wires": [
            [
                "e967354c8c96976c"
            ]
        ]
    },
    {
        "id": "627fe8a74df25b79",
        "type": "link out",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "mode": "link",
        "links": [
            "e2d431b69eeeb3de",
            "42e14f322dc0da0b"
        ],
        "x": 1195.7350063323975,
        "y": 1130.0581722259521,
        "wires": []
    },
    {
        "id": "24fa448edba0acea",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "filter for growspace",
        "func": "if (\"Growspace air\" != msg.topic) return; //onthis respond to this one.\nmsg.enabled = false;  //don't enable slider for input - output only\nmsg.color = \"#1f691a\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 834.2710304260254,
        "y": 1206.2156887054443,
        "wires": [
            [
                "448f549772418690"
            ]
        ]
    },
    {
        "id": "747e15ba31acf860",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "legacy code (non-functioning with current system)",
        "info": "",
        "x": 3517.002182006836,
        "y": 1480.3993439674377,
        "wires": []
    },
    {
        "id": "448f549772418690",
        "type": "ui_slider",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "",
        "label": "Growspace",
        "tooltip": "",
        "group": "c4c08f68c2291876",
        "order": 2,
        "width": "2",
        "height": "4",
        "passthru": false,
        "outs": "end",
        "topic": "you should not be getting this topic",
        "topicType": "str",
        "min": "5",
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1599.8265800476074,
        "y": 1204.8148107528687,
        "wires": [
            []
        ]
    },
    {
        "id": "5a465e08c7d929e0",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "12",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12",
        "payloadType": "num",
        "x": 1412.4015922546387,
        "y": 1117.0601921081543,
        "wires": [
            [
                "448f549772418690"
            ]
        ]
    },
    {
        "id": "8a8d0eecbc63da3e",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "15",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 1413.15966796875,
        "y": 1154.8148212432861,
        "wires": [
            [
                "448f549772418690"
            ]
        ]
    },
    {
        "id": "ccae7be753f1ab1e",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "683ff17beb31c66e",
        "name": "try colour - this doesn't work",
        "props": [
            {
                "p": "color",
                "v": "red",
                "vt": "str"
            },
            {
                "p": "bgcolor",
                "v": "blue",
                "vt": "str"
            },
            {
                "p": "widgetBackgroundColor",
                "v": "#1f691a",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1322.4131622314453,
        "y": 1358.726858139038,
        "wires": [
            [
                "448f549772418690"
            ]
        ]
    },
    {
        "id": "9c18ab8f13852b34",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "DEPTH input - convert to VOLUME or TIME if needed for pump timing",
        "info": "",
        "x": 472.41322326660156,
        "y": 2076.510301589966,
        "wires": []
    },
    {
        "id": "efeaef409525440d",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "44.4 cm Depth",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Depth",
        "payload": "44.4",
        "payloadType": "num",
        "x": 209.0625610351562,
        "y": 2328.7325051574703,
        "wires": [
            [
                "c49afb08352d8666"
            ]
        ]
    },
    {
        "id": "c49afb08352d8666",
        "type": "function",
        "z": "b9c733ef02f88472",
        "name": "poorly defined function - what was this for?",
        "func": "var defaultPumpVolume = flow.get(\"defaultPumpVolume\")||0;\nvar defaultPumpTime = flow.get(\"defaultPumpTime\")||0;\nvar defaultPumpDepth = flow.get(\"defaultPumpDepth\")||0;\n\n/*\nmsg.pumpdefaults = { \"defaultPumpVolume\":defaultPumpVolume,\n                    \"defaultPumpTime\":defaultPumpTime,\n                    \"defaultPumpDepth\": defaultPumpDepth };\n*/\n                   \n/*\nDepth packets come as:\n{\n    \"payload\":44.8,\n    \"topic\":\"Fishinator 005 Fish Tank Depth (cm)\",\n    \"timestamp\":1734762371803,\n    \"units\":\"cm\",\n    \"_msgid\":\"6270b1e2.bf114\",\n    \"reading\":22.2,\n    \"_event\":\"node:f27f4d9ca1cd35bf\"\n}\n*/\n\n//I HAVEN'T MADE ANYTHING EXCE_PT VOLUME PREDICTIONS YET\n \nswitch (msg.topic)\n{\n    case \"Volume\": {\n        break;\n    }\n    case \"Time\": {\n        break;\n    }\n    case \"Depth\":{\n        \n        break;\n        \n    }\n    case \"Fishinator 005 Fish Tank Depth (cm)\": {\n        var currentDepth = msg.payload;\n        var units = msg.units;\n        msg.payload = {\"h1\":currentDepth-defaultPumpDepth,\"h2\":currentDepth};\n        msg.units = \"litres\";\n        msg.topic = \"VolumeStillToGo\";\n        msg.comment = \"This isn't that useful - I need a depth as a function of volume\";\n        msg.comment2 = \"But this is good for user feedback on how much volume still to pump\";\n        //defaultPumpDepth\n        break;\n    }\n    default: {\n        return;\n    }\n    node.status(msg.topic+\" : \"+msg.payload);\n}\n\nreturn [msg,null,null];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650.7523651123047,
        "y": 2208.9815187454224,
        "wires": [
            [
                "25bb61fb943526d3",
                "7f312cb893175234"
            ],
            [],
            []
        ]
    },
    {
        "id": "25bb61fb943526d3",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 931.4930839538574,
        "y": 2197.5923194885254,
        "wires": []
    },
    {
        "id": "6640550f506821d1",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "1.0 litres Volume",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Volume",
        "payload": "1.0",
        "payloadType": "num",
        "x": 211.49305725097656,
        "y": 2374.8145332336426,
        "wires": [
            [
                "c49afb08352d8666"
            ]
        ]
    },
    {
        "id": "316e1579e4908791",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "30 seconds Time",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Time",
        "payload": "30",
        "payloadType": "num",
        "x": 206.49305725097656,
        "y": 2424.8145332336426,
        "wires": [
            [
                "c49afb08352d8666"
            ]
        ]
    },
    {
        "id": "8b22347179751445",
        "type": "link in",
        "z": "b9c733ef02f88472",
        "name": "",
        "links": [
            "f27f4d9ca1cd35bf"
        ],
        "x": 350.74650955200195,
        "y": 2144.895983695984,
        "wires": [
            []
        ]
    },
    {
        "id": "7f312cb893175234",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "name": "request to /Services/VolumeDiff",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "body",
        "url": "10.9.142.142:1880/Services/VolumeDiff",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1004.8263168334961,
        "y": 2249.259316444397,
        "wires": [
            [
                "c675e7a188c83b01"
            ]
        ]
    },
    {
        "id": "f80833836ea85308",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test Inject",
        "payload": "{\"h1\":46,\"h2\":51}",
        "payloadType": "json",
        "x": 263.1746520996094,
        "y": 2514.308427810669,
        "wires": [
            []
        ]
    },
    {
        "id": "c675e7a188c83b01",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1091.7311782836914,
        "y": 2309.84486579895,
        "wires": []
    },
    {
        "id": "5e2ae7cc4a5aba29",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "name": "incoming  45cm Depth packet mimic",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "units",
                "v": "cm",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Fishinator 005 Fish Tank Depth (cm)",
        "payload": "45",
        "payloadType": "num",
        "x": 249.07406616210938,
        "y": 2204.8380451202393,
        "wires": [
            [
                "c49afb08352d8666"
            ]
        ]
    },
    {
        "id": "ccad0489e42cecfe",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "Fishinator Sense Object definition",
        "func": "msg.FishinatorSenseObject = {\n                        \"lastTimeStamp\":null,\n                        \"TemperatureObject\":null,\n                        \"LightLevelObject\":null,\n                        \"WaterLevelObject\":null,\n                        \"AlarmsObject\":null,\n                        \"VoltagesObject\":null,\n                        \"CurrentsObject\":null,\n                        \"PowersObject\":null,\n                        \"comment1\": \"sense objects should have units as part of object\",\n                        \"comment2\": \"each sense object leaf should have its own timestamp\"\n}\n\n//Who's looking back at me writing this code?\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310.735234578451,
        "y": 83.99312019856774,
        "wires": [
            [
                "e078d96feb6b5a41"
            ]
        ]
    },
    {
        "id": "e078d96feb6b5a41",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "empty Fishinator State Object definition set to Flow variable",
        "func": "var FishinatorStateObject = {\n                        \"lastTimeStamp\":null,\n                        \"FanObjects\":null,\n                        \"LightingObjects\":null,\n                        \"PumpObjects\":null,\n                        \"AlarmsObjects\":null,\n                        \"HeatersObjects\":null,\n                        \"comment1\":\"All these objects explicitly have two states: off and on.\"\n}\n\nflow.set(\"FishinatorStateObject\",FishinatorStateObject);\nmsg.payload = FishinatorStateObject;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2503.159962972006,
        "y": 124.81487083943688,
        "wires": [
            [
                "b6baeabdb397f968"
            ]
        ]
    },
    {
        "id": "b6baeabdb397f968",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690.729630788168,
        "y": 179.06249332936608,
        "wires": []
    },
    {
        "id": "b7336b3434808d08",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "test injection - single object",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test injection",
        "payloadType": "str",
        "x": 1949.0800526936855,
        "y": 122.05445194753014,
        "wires": [
            [
                "ccad0489e42cecfe"
            ]
        ]
    },
    {
        "id": "af8d256d846415b9",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "use resource:  /Services/Depth4Volume",
        "info": "",
        "x": 589.0857391357422,
        "y": 2125.937568664551,
        "wires": []
    },
    {
        "id": "20bd5328532ba53e",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "name": "request to /Services/Depth4Volume",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "body",
        "url": "10.9.142.142:1880/Services/Depth4Volume",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 929.8262939453125,
        "y": 2132.036865234375,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb1e4fb93abc207",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "empty Fishinator State Object ARRAY set to Flow variable",
        "func": "var FishinatorStateObject = {\n                        \"lastTimeStamp\":null,\n                        \"FanObjects\":null,\n                        \"LightingObjects\":null,\n                        \"PumpObjects\":null,\n                        \"AlarmsObjects\":null,\n                        \"HeatersObjects\":null,\n                        \"comment1\":\"All these objects explicitly have two states: off and on.\"\n}\n\nvar FishinatorStateArray = [FishinatorStateObject,FishinatorStateObject];\n\nflow.set(\"FishinatorStateObject\",FishinatorStateArray);\nmsg.payload = FishinatorStateArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2319.826443990072,
        "y": 178.1480827382406,
        "wires": [
            [
                "b6baeabdb397f968"
            ]
        ]
    },
    {
        "id": "11c669a539ad0ac2",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "test injection - array of objects",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test injection",
        "payloadType": "str",
        "x": 1958.1597264607753,
        "y": 178.14812183888756,
        "wires": [
            [
                "1eb1e4fb93abc207"
            ]
        ]
    },
    {
        "id": "2c2d31a60e1724af",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "name": "these are Debug Outputs",
        "info": "",
        "x": 1265.7409210205078,
        "y": 491.4988374710083,
        "wires": []
    },
    {
        "id": "e188346dc9090cad",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "/Configs - GET info",
        "url": "/Configs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2009.8264668782558,
        "y": 364.8147430470785,
        "wires": [
            [
                "924dc06be34650f0"
            ]
        ]
    },
    {
        "id": "ca64f247f25c3e7a",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "get current object from flow",
        "func": "msg.payload = flow.get(\"FishinatorStateObject\")||null;\nmsg.topic = \"Fishinator Current Configuration State : \" + Date.now()\n                +\"\\n\\rState: \"+ JSON.stringify(msg.payload);\nmsg.advice = 'INPUT payload {??}  OUTPUT payload <??>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2351.0823364257812,
        "y": 399.9884853363037,
        "wires": [
            [
                "93658ef1aa02927d"
            ]
        ]
    },
    {
        "id": "fce47ad878ca7724",
        "type": "http response",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2543.165925343832,
        "y": 325.1621027043661,
        "wires": []
    },
    {
        "id": "880559e7e95f3933",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "request to /Configs GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/Configs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2269.4214909871425,
        "y": 458.848517422994,
        "wires": [
            [
                "448c119578f70e69"
            ]
        ]
    },
    {
        "id": "2cefd1be46323c1a",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2563.1543946039114,
        "y": 453.14853355807367,
        "wires": []
    },
    {
        "id": "fb3b9ea01d1116ab",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "/Configs - PUT",
        "url": "/Configs",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2012.5836118062343,
        "y": 587.5844612172446,
        "wires": [
            [
                "6dc549fe9eb70d2c"
            ]
        ]
    },
    {
        "id": "6dc549fe9eb70d2c",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "PUT not written yet",
        "func": "if (null == msg.payload) return;\nmsg.payload = \"No PUT authorization on /Configs\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2314.181246257964,
        "y": 583.1895425073535,
        "wires": [
            [
                "4c2b11bc92e817cd"
            ]
        ]
    },
    {
        "id": "4c2b11bc92e817cd",
        "type": "http response",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2606.8744748433437,
        "y": 587.8819551518759,
        "wires": []
    },
    {
        "id": "c92478911b6b5781",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "maybe set config /Configs",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "body",
        "url": "10.9.142.142:1880/Configs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2358.9427731831875,
        "y": 625.3324298909506,
        "wires": [
            [
                "58999d17e202cd76"
            ]
        ]
    },
    {
        "id": "bd559ea062167d31",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test Inject",
        "payload": "\"1\"",
        "payloadType": "str",
        "x": 2058.9576897394095,
        "y": 625.3818108789355,
        "wires": [
            [
                "c92478911b6b5781"
            ]
        ]
    },
    {
        "id": "58999d17e202cd76",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2587.514283498129,
        "y": 624.2515144399008,
        "wires": []
    },
    {
        "id": "f1b92d5df6d6835d",
        "type": "ui_text",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "group": "f6911848ab7866a8",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "resource:  /Configs",
        "format": "/Configs",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1957.1175664265957,
        "y": 284.43961430104576,
        "wires": []
    },
    {
        "id": "20636ecb9344c436",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "GET returns usage info",
        "info": "",
        "x": 2051.3180658249635,
        "y": 322.5564110626946,
        "wires": []
    },
    {
        "id": "eaf8fc6fa785f5e1",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "What is up?",
        "payload": "",
        "payloadType": "date",
        "x": 2083.40582784017,
        "y": 458.8064031651815,
        "wires": [
            [
                "880559e7e95f3933"
            ]
        ]
    },
    {
        "id": "448c119578f70e69",
        "type": "json",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2449.080172039214,
        "y": 455.81605503481927,
        "wires": [
            [
                "2cefd1be46323c1a"
            ]
        ]
    },
    {
        "id": "9d75aac659c24b2a",
        "type": "ui_button",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "",
        "group": "f6911848ab7866a8",
        "order": 2,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "show current config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2035.7411408197318,
        "y": 408.8022776249481,
        "wires": [
            [
                "924dc06be34650f0"
            ]
        ]
    },
    {
        "id": "93658ef1aa02927d",
        "type": "ui_text",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "group": "f6911848ab7866a8",
        "order": 3,
        "width": "6",
        "height": "4",
        "name": "",
        "label": "test feedback",
        "format": "{{msg.topic}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2601.1577758789062,
        "y": 378.59969186782837,
        "wires": []
    },
    {
        "id": "5a39b49db0d35b38",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "Not finished",
        "info": "",
        "x": 2305.914774395171,
        "y": 544.0914151422412,
        "wires": []
    },
    {
        "id": "de2164ede339cc1c",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "Initiates Config variables for TESTING",
        "info": "",
        "x": 1982.6044158935547,
        "y": 65.7755241394043,
        "wires": []
    },
    {
        "id": "924dc06be34650f0",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "aacab5d54d21372d",
        "name": "get Fan Object from flow",
        "func": "var flowAirFansState = flow.get(\"flowAirFansState\")||null;\nnode.status(\"flowAirFansState is \"+flowAirFansState);\nmsg.payload = flowAirFansState;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2317.03717549642,
        "y": 319.9075832417806,
        "wires": [
            [
                "fce47ad878ca7724",
                "93658ef1aa02927d"
            ]
        ]
    },
    {
        "id": "5b3fd2d2b4e33d17",
        "type": "http in",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "GET /fishnator/AirFans/command -localtest",
        "url": "/fishnator/AirFans/command",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2615.1101684570312,
        "y": 2252.176515106201,
        "wires": [
            [
                "7225f2b2f325359d"
            ]
        ]
    },
    {
        "id": "7225f2b2f325359d",
        "type": "function",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "Airfans command setup",
        "func": "//sanitize / reject bad input\n//if (!((\"0\" == msg.payload )||(\"1\" == msg.payload))) {return;}\n\nvar flowAirFansState = flow.get(\"flowAirFansState\")||null;\nnode.status(\"Fans state is \"+ flowAirFansState);\nmsg.payload = flowAirFansState;\nmsg.topic = \"AirFans REST command \"+Date.now()%1000;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2905.1058197021484,
        "y": 2251.655763153076,
        "wires": [
            [
                "6dbf997b9fdf165c",
                "0a917ea37c269dfe"
            ]
        ]
    },
    {
        "id": "0a917ea37c269dfe",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3107.6104679107666,
        "y": 2293.166518215179,
        "wires": []
    },
    {
        "id": "6dbf997b9fdf165c",
        "type": "http response",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3102.7758255004883,
        "y": 2251.0505518951413,
        "wires": []
    },
    {
        "id": "2519d2e0214c5b45",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "test local GET REST service",
        "info": "",
        "x": 2597.967140197754,
        "y": 2333.667485717773,
        "wires": []
    },
    {
        "id": "d462021189cd0e5d",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 2524.420036315918,
        "y": 2382.4083628692624,
        "wires": [
            [
                "e43bcd3e216d77a3"
            ]
        ]
    },
    {
        "id": "95894eb54115e998",
        "type": "inject",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 2522.4799041748047,
        "y": 2431.978614334106,
        "wires": [
            [
                "e43bcd3e216d77a3"
            ]
        ]
    },
    {
        "id": "e43bcd3e216d77a3",
        "type": "http request",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "to /fishnator/AirFans/command -localtest",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/fishnator/AirFans/command",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2821.9157104492188,
        "y": 2380.4292388000486,
        "wires": [
            [
                "d47f5564e0a35180"
            ]
        ]
    },
    {
        "id": "d47f5564e0a35180",
        "type": "debug",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3100.670063018799,
        "y": 2380.173257827759,
        "wires": []
    },
    {
        "id": "78642e55afa3291a",
        "type": "comment",
        "z": "b9c733ef02f88472",
        "g": "5cf488ebd61047ee",
        "name": "GET REST query the Air Fan State",
        "info": "",
        "x": 2549.0442810058594,
        "y": 2211.2576346435544,
        "wires": []
    },
    {
        "id": "12db3e620fc7a848",
        "type": "websocket in",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "incoming data on /ws/temperature",
        "server": "5d28b5a9dddb7718",
        "client": "",
        "x": 382.857234954834,
        "y": 345.2381052970886,
        "wires": [
            [
                "616fde658d80157c",
                "6d732cd1b012b9ff"
            ]
        ]
    },
    {
        "id": "7cc76417b1d388ff",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 872.857234954834,
        "y": 345.2381052970886,
        "wires": []
    },
    {
        "id": "3a248b206d888d46",
        "type": "websocket in",
        "z": "12eb165a2e3227f2",
        "name": "incoming from Fishinator - depth packet",
        "server": "dcd4a221e6419524",
        "client": "",
        "x": 245.00000762939453,
        "y": 549.5238261222839,
        "wires": [
            [
                "d1db82716919fd37"
            ]
        ]
    },
    {
        "id": "06a972c0d236fa22",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 558.5715560913086,
        "y": 783.8094854354858,
        "wires": []
    },
    {
        "id": "c4efad5c32715b45",
        "type": "ui_chart",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "group": "24fde1be574da614",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "water depth (cm)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1077.143138885498,
        "y": 678.095211982727,
        "wires": [
            [
                "78b13ffdfa8a0e3f"
            ]
        ]
    },
    {
        "id": "f27f4d9ca1cd35bf",
        "type": "link out",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "depth packets straight from fishinator",
        "mode": "link",
        "links": [
            "3622f51e7ef2f1dc",
            "14ef5ebb90e56c68",
            "f20f9fc3570389f4",
            "2b39cfdce77f2a89",
            "605ebdead3aebec3",
            "0c256185c6c7a201",
            "d3c0672533d2ddcc",
            "8b22347179751445",
            "b307c3247ca32050"
        ],
        "x": 645.0000715255737,
        "y": 699.5238103866577,
        "wires": []
    },
    {
        "id": "428613c7bf3532ed",
        "type": "ui_chart",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "",
        "group": "5510ef78b8261708",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "temperatures (C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 912.857234954834,
        "y": 305.2381052970886,
        "wires": [
            [
                "d4b665c3846eafcd"
            ]
        ]
    },
    {
        "id": "1b830f615d04eb1d",
        "type": "catch",
        "z": "12eb165a2e3227f2",
        "name": "Catch all flow errors",
        "scope": null,
        "uncaught": true,
        "x": 2243.3333015441895,
        "y": 456.6666269302368,
        "wires": [
            [
                "c74e96c170d37e76"
            ]
        ]
    },
    {
        "id": "c74e96c170d37e76",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2403.3333015441895,
        "y": 456.6666269302368,
        "wires": []
    },
    {
        "id": "b132b6bd04b54306",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 674.2857437133789,
        "y": 656.6666717529297,
        "wires": []
    },
    {
        "id": "24a4bfed0150a029",
        "type": "inject",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "clear",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "RESET",
        "x": 692.857234954834,
        "y": 385.2381052970886,
        "wires": [
            [
                "197d7e7777f2ead7"
            ]
        ]
    },
    {
        "id": "197d7e7777f2ead7",
        "type": "countula",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "temperature packet counter",
        "x": 942.857234954834,
        "y": 385.2381052970886,
        "wires": [
            [
                "e721b7b93d220764"
            ],
            [
                "e721b7b93d220764"
            ]
        ]
    },
    {
        "id": "e721b7b93d220764",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1152.857234954834,
        "y": 385.2381052970886,
        "wires": []
    },
    {
        "id": "616fde658d80157c",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 662.857234954834,
        "y": 345.2381052970886,
        "wires": [
            [
                "197d7e7777f2ead7",
                "428613c7bf3532ed",
                "7cc76417b1d388ff"
            ]
        ]
    },
    {
        "id": "3b7e2eb5a55a8394",
        "type": "ring-buffer",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "depth value buffer ring (48)",
        "capacity": "48",
        "order": "old-to-new",
        "sendOnlyIfFull": false,
        "pushAfterClear": true,
        "extra": true,
        "perTopic": true,
        "x": 468.5715560913086,
        "y": 823.8094854354858,
        "wires": [
            [
                "06a972c0d236fa22",
                "0c249d3f7c581c6d"
            ]
        ]
    },
    {
        "id": "d4b665c3846eafcd",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "d": true,
        "g": "9ddbb5706ec334b2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1092.857234954834,
        "y": 305.2381052970886,
        "wires": []
    },
    {
        "id": "f9c99f73.06366",
        "type": "inject",
        "z": "12eb165a2e3227f2",
        "g": "56db06dea7e19245",
        "name": "clear data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1520.0000457763672,
        "y": 283.33330249786377,
        "wires": [
            [
                "81fc1d3d.7e03e"
            ]
        ]
    },
    {
        "id": "81fc1d3d.7e03e",
        "type": "ui_button",
        "z": "12eb165a2e3227f2",
        "g": "56db06dea7e19245",
        "name": "clear ui data",
        "group": "4a4c0323d3062a9d",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "clear all live graphs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear data",
        "topicType": "str",
        "x": 1690.0000457763672,
        "y": 283.33330249786377,
        "wires": [
            [
                "28d8b2bb.d7274e"
            ]
        ]
    },
    {
        "id": "28d8b2bb.d7274e",
        "type": "link out",
        "z": "12eb165a2e3227f2",
        "g": "56db06dea7e19245",
        "name": "clear ui data",
        "links": [
            "56466c4a.a9b994",
            "39c46cf.fc63b94",
            "4a54e638.b5ab18",
            "e91614e9.16e9e8",
            "276683c6.d8997c",
            "aad86cf4.55279",
            "03e15373aefa1f5e",
            "ce5a6e75ad2f7876",
            "3b9cbbd129ef06e1",
            "ccd5a84631b478f1",
            "7b7864da325245e2",
            "3f6e9447359f310f",
            "782da88d397e490f"
        ],
        "x": 1815.0000457763672,
        "y": 283.33330249786377,
        "wires": []
    },
    {
        "id": "cd5c4fa4.32a3b",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "56db06dea7e19245",
        "name": "MASTER - CLEAR UI",
        "info": "",
        "x": 1520.0000457763672,
        "y": 243.33330249786377,
        "wires": []
    },
    {
        "id": "03e15373aefa1f5e",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "water depth graph in",
        "links": [
            "28d8b2bb.d7274e",
            "66e11c98c99bb3b0",
            "99cf6b8cb01ae768"
        ],
        "x": 992.1431045532227,
        "y": 728.0952644348145,
        "wires": [
            [
                "c4efad5c32715b45"
            ]
        ]
    },
    {
        "id": "ce5a6e75ad2f7876",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "",
        "links": [
            "28d8b2bb.d7274e"
        ],
        "x": 737.857234954834,
        "y": 305.2381052970886,
        "wires": [
            [
                "428613c7bf3532ed"
            ]
        ]
    },
    {
        "id": "d1db82716919fd37",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Fishinator 005 Fish Tank Depth (cm)",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480.00003814697266,
        "y": 676.6666173934937,
        "wires": [
            [
                "f27f4d9ca1cd35bf",
                "b132b6bd04b54306",
                "3b7e2eb5a55a8394",
                "49aa253b814dbb48",
                "7349ade3c692e0d8"
            ]
        ]
    },
    {
        "id": "9948c45dde9c8561",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "Various depth data conditioning to extract signals",
        "info": "",
        "x": 668.5714950561523,
        "y": 625.238091468811,
        "wires": []
    },
    {
        "id": "5596fed7.aa69",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "1st derivative - 3pt",
        "func": "var twoPtHistory = context.get('pthistory')||[{Temperature:null, topic: \"invalid init temp 0\",timestamp:null}, \n                                    {Temperature:null, topic: \"invalid init temp 1\",timestamp:null}];\n                                                \n//var oldtemp = context.get('lastTemp')||parseFloat(msg.payload);\n//var oldtime = context.get('lasttime')||(new Date());\n//need two variables for previous two readings, stored in context\n//use 2nd order (quadratic) slope analysis with three points\n//(3rd point is msg.payload)\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = parseFloat(msg.timestamp); \nif (0===nowtime) return {payload: null};\n\nvar timediff = (nowtime-twoPtHistory[1].timestamp).toFixed(0);//in milliseconds\n\n//shift the data for next time (lose oldest sample point).   2->1  1->0  0->gone\ncontext.set('pthistory',[{Temperature:twoPtHistory[1].Temperature, topic: \"temperature n-2\",timestamp:twoPtHistory[1].timestamp}, \n                                    {Temperature:nowtemp, topic: \"temperature n-1\",timestamp:nowtime}  ] );\n\nif (0 !== timediff && null !== twoPtHistory[0].Temperature)  //all 3 pts available\n{\n    //this forward derivative has error Order(h^2)\n    var deriv = (twoPtHistory[0].Temperature -4*(twoPtHistory[1].Temperature) +3*nowtemp)/(2*timediff);\n    msg.frequency = (3600000/timediff); //in count/hr\n    return {payload: Number(1000*deriv).toFixed(3), topic:\"d(\"+msg.topic+\")/dt (3pt)\", frequency: msg.frequency, timestamp: nowtime, timediff: timediff};\n\n}\nelse\n{\n    //could use this branch to calculate the 2pt 1st derivative - error Order(h)\n    //e.g.\n    /*\n    if (0 !== timediff && null !== twoPtHistory[1].Temperature)\n    {\n        return {payload: \"Two point derivative\"};\n    }  else  */\n    return {payload: null, topic:\"d(\"+msg.topic+\")/dt (3pt)\", frequency: null, timestamp: nowtime, timediff: timediff};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990.0001220703125,
        "y": 606.6666870117188,
        "wires": [
            []
        ]
    },
    {
        "id": "0bcca8bdcf1e3e09",
        "type": "ui_chart",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "group": "73d4e1821f59f9a0",
        "order": 1,
        "width": "6",
        "height": "7",
        "label": "water depth change (cm/s)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2420.0004806518555,
        "y": 748.0952606201172,
        "wires": [
            []
        ]
    },
    {
        "id": "3b9cbbd129ef06e1",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "links": [
            "28d8b2bb.d7274e"
        ],
        "x": 2242.1428842544556,
        "y": 689.5238494873047,
        "wires": [
            [
                "0bcca8bdcf1e3e09"
            ]
        ]
    },
    {
        "id": "055642bc0f54577a",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "get this 1st derivative function in git",
        "info": "",
        "x": 1720.0001220703125,
        "y": 606.6666870117188,
        "wires": []
    },
    {
        "id": "0c249d3f7c581c6d",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "buffer stats (max/min/mean)",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "buffer stats",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "averagemean",
                "pt": "msg",
                "to": "$average(msg.payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "maximum",
                "pt": "msg",
                "to": "$max(msg.payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "minimum",
                "pt": "msg",
                "to": "$min(msg.payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 748.5715560913086,
        "y": 823.8094854354858,
        "wires": [
            [
                "f7dad9e0dde32040",
                "b84f481c0c3e8243"
            ]
        ]
    },
    {
        "id": "f7dad9e0dde32040",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 738.5715560913086,
        "y": 783.8094854354858,
        "wires": []
    },
    {
        "id": "b84f481c0c3e8243",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "topic: 48-average",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "averagemean",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "48-average",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1018.5715560913086,
        "y": 823.8094854354858,
        "wires": [
            [
                "526b7630703b7dbb",
                "53d6e2945bdea4b4",
                "3724133a4c38f963",
                "49aa253b814dbb48",
                "9f4c26c6292d391b"
            ]
        ]
    },
    {
        "id": "526b7630703b7dbb",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "REPEAT 1st derivative - 2pt  muckabout",
        "func": "//this implements a 2pt numerical derivative with the current payload/timestamp and the previous one\n\n//var nowtemp = parseFloat(msg.payload);\n//var nowtime = parseFloat(msg.timestamp); \nvar nowtemp = Number(msg.payload);\nvar nowtime = Number(msg.timestamp); \n\nif (!( Number.isFinite(nowtemp) && Number.isFinite(nowtime))) return {payload: null, topic: \"payload/timestamp aren't numbers\" ,timestamp: (new Date()).getTime()}; //nothing to do\n\n\nvar oldtemp = context.get('lastValue_1st_deriv_00')||null;\nvar oldtime = context.get('lastTime_1st_deriv_00')||null;\n\n//set the current data/timestamp to the previous value for next time\ncontext.set('lastValue_1st_deriv_00',nowtemp);\ncontext.set('lastTime_1st_deriv_00',nowtime);\n\n//need two variables for previous two readings, stored in context\nif (!( Number.isFinite(oldtemp) && Number.isFinite(oldtime)) ) return null;\n//return {payload: null, topic: \"failed to load previous values (restart?)\",timestamp: (new Date()).getTime()};\n\nvar timediff = (nowtime-oldtime).toFixed(0);//in milliseconds\n\n//dont bother if there aren't enough valid values\nif ( 0 !== timediff)\n{\n    msg.frequency = (3600000/timediff); //in count/hr\n    \n    //stop the d/dt noise at the edge of signal resolution\n    measurementdiff = (nowtemp - oldtemp).toFixed(1);\n    node.status({text: \"(value) then: \"+oldtemp+\" now: \"+nowtemp});\n    \n    //if (Math.abs(measurementdiff) < 0.4) //max resolution is within +-0.3cm on ultrasonic sensor\n        return {payload: Number(1000*measurementdiff/timediff).toFixed(6), \n                topic:\"d(\"+msg.topic+\")/dt (2pt)\", \n                frequency: Number(msg.frequency).toFixed(0), \n                frequencyunits:\"counts/hr\", \n                timestamp: nowtime, \n                timediff: timediff, \n                timeunits:\"ms\"};\n    //else\n    /*    return {payload: Number(0).toFixed(3), \n                topic:\"d(\"+msg.topic+\")/dt (2pt)\", \n                frequency: Number(msg.frequency).toFixed(0), \n                frequencyunits:\"counts/hr\", \n                timestamp: nowtime, \n                timediff: timediff,\n                timeunits:\"ms\"};*/\n}\nelse\n    return {payload: null, topic:\"no time difference in samples\", frequency: null, timestamp: nowtime, timediff: timediff};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700.0001220703125,
        "y": 746.6666870117188,
        "wires": [
            [
                "0bcca8bdcf1e3e09"
            ]
        ]
    },
    {
        "id": "37433f3480417821",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330.000202178955,
        "y": 838.0952434539795,
        "wires": []
    },
    {
        "id": "53d6e2945bdea4b4",
        "type": "delay",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "rate limit 1:8s",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "8",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1590.0001220703125,
        "y": 806.6666870117188,
        "wires": [
            [
                "a46e2c372e236f65",
                "0511233d0d774d1d"
            ]
        ]
    },
    {
        "id": "cb03bd7b47c435ab",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "REPEAT 1st derivative - 2pt  muckabout",
        "func": "//this implements a 2pt numerical derivative with the current payload/timestamp and the previous one\n\n//var nowtemp = parseFloat(msg.payload);\n//var nowtime = parseFloat(msg.timestamp); \nvar nowtemp = Number(msg.payload);\nvar nowtime = Number(msg.timestamp); \n\nif (!( Number.isFinite(nowtemp) && Number.isFinite(nowtime))) return {payload: null, topic: \"payload/timestamp aren't numbers\" ,timestamp: (new Date()).getTime()}; //nothing to do\n\n//if (nowtemp)  nowtemp = nowtemp.toFixed(1);\n\nvar oldtemp = context.get('lastValue_1st_deriv_00')||null;\nvar oldtime = context.get('lastTime_1st_deriv_00')||null;\n\n//set the current data/timestamp to the previous value for next time\ncontext.set('lastValue_1st_deriv_00',nowtemp);\ncontext.set('lastTime_1st_deriv_00',nowtime);\n\n//need two variables for previous two readings, stored in context\nif (!( Number.isFinite(oldtemp) && Number.isFinite(oldtime)) ) return null;\n//return {payload: null, topic: \"failed to load previous values (restart?)\",timestamp: (new Date()).getTime()};\n\nvar timediff = (nowtime-oldtime).toFixed(0);//in milliseconds\n\n//dont bother if there aren't enough valid values\nif ( 0 !== timediff)\n{\n    msg.frequency = (3600000/timediff); //in count/hr\n    \n    //stop the d/dt noise at the edge of signal resolution\n    measurementdiff = (nowtemp - oldtemp).toFixed(1);\n    node.status({text: \"(value) then: \"+oldtemp+\" now: \"+nowtemp});\n    \n    //if (Math.abs(measurementdiff) < 0.4) //max resolution is within +-0.3cm on ultrasonic sensor\n        return {payload: Number(1000*measurementdiff/timediff).toFixed(6), \n                topic:\"d(\"+msg.topic+\")/dt (2pt)\", \n                frequency: Number(msg.frequency).toFixed(0), \n                frequencyunits:\"counts/hr\", \n                timestamp: nowtime, \n                timediff: timediff, \n                timeunits:\"ms\"};\n    //else\n    /*    return {payload: Number(0).toFixed(3), \n                topic:\"d(\"+msg.topic+\")/dt (2pt)\", \n                frequency: Number(msg.frequency).toFixed(0), \n                frequencyunits:\"counts/hr\", \n                timestamp: nowtime, \n                timediff: timediff,\n                timeunits:\"ms\"};*/\n}\nelse\n    return {payload: null, topic:\"no time difference in samples\", frequency: null, timestamp: nowtime, timediff: timediff};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080.0001220703125,
        "y": 806.6666870117188,
        "wires": [
            [
                "0bcca8bdcf1e3e09",
                "37433f3480417821",
                "7a23bcc17c45392c"
            ]
        ]
    },
    {
        "id": "a46e2c372e236f65",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "48av.8secInterval",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "48av.8secInterval",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790.0001220703125,
        "y": 806.6666870117188,
        "wires": [
            [
                "cb03bd7b47c435ab"
            ]
        ]
    },
    {
        "id": "e15b953ba394288b",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "48av.4secInterval",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "48av.4secInterval",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1790.0001220703125,
        "y": 686.6666870117188,
        "wires": [
            [
                "85e2b6e5247aa723"
            ]
        ]
    },
    {
        "id": "237805b4c99e35db",
        "type": "delay",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "rate limit 1:4s",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1610.0001220703125,
        "y": 686.6666870117188,
        "wires": [
            [
                "e15b953ba394288b"
            ]
        ]
    },
    {
        "id": "85e2b6e5247aa723",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "1st derivative - 3pt",
        "func": "var twoPtHistory = context.get('pthistory')||[{Temperature:null, topic: \"invalid init temp 0\",timestamp:null}, \n                                    {Temperature:null, topic: \"invalid init temp 1\",timestamp:null}];\n                                                \n//var oldtemp = context.get('lastTemp')||parseFloat(msg.payload);\n//var oldtime = context.get('lasttime')||(new Date());\n//need two variables for previous two readings, stored in context\n//use 2nd order (quadratic) slope analysis with three points\n//(3rd point is msg.payload)\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = parseFloat(msg.timestamp); \nif (0===nowtime) return {payload: null};\n\nvar timediff = (nowtime-twoPtHistory[1].timestamp).toFixed(0);//in milliseconds\n\n//shift the data for next time (lose oldest sample point).   2->1  1->0  0->gone\ncontext.set('pthistory',[{Temperature:twoPtHistory[1].Temperature, topic: \"temperature n-2\",timestamp:twoPtHistory[1].timestamp}, \n                                    {Temperature:nowtemp, topic: \"temperature n-1\",timestamp:nowtime}  ] );\n\nif (0 !== timediff && null !== twoPtHistory[0].Temperature)  //all 3 pts available\n{\n    //this forward derivative has error Order(h^2)\n    var deriv = (twoPtHistory[0].Temperature -4*(twoPtHistory[1].Temperature) +3*nowtemp)/(2*timediff);\n    msg.frequency = (3600000/timediff); //in count/hr\n    return {payload: Number(1000*deriv).toFixed(3), topic:\"d(\"+msg.topic+\")/dt (3pt)\", frequency: msg.frequency, timestamp: nowtime, timediff: timediff};\n\n}\nelse\n{\n    //could use this branch to calculate the 2pt 1st derivative - error Order(h)\n    //e.g.\n    /*\n    if (0 !== timediff && null !== twoPtHistory[1].Temperature)\n    {\n        return {payload: \"Two point derivative\"};\n    }  else  */\n    return {payload: null, topic:\"d(\"+msg.topic+\")/dt (3pt)\", frequency: null, timestamp: nowtime, timediff: timediff};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030.0001220703125,
        "y": 686.6666870117188,
        "wires": [
            [
                "0bcca8bdcf1e3e09"
            ]
        ]
    },
    {
        "id": "e7450b4155ef5bb3",
        "type": "inject",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1550.3810272216797,
        "y": 397.9047613143921,
        "wires": [
            [
                "658ae903229f4592"
            ]
        ]
    },
    {
        "id": "7cbaedbcee740b27",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "Fishinator 'Still Running' monitor",
        "info": "",
        "x": 1770.3810272216797,
        "y": 397.9047613143921,
        "wires": []
    },
    {
        "id": "3ee64059a5794383",
        "type": "ui_text",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "group": "4a4c0323d3062a9d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Fishinator Status Time",
        "label": "status time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1900.3810272216797,
        "y": 437.9047613143921,
        "wires": []
    },
    {
        "id": "3e0096d034202bba",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850.3810272216797,
        "y": 477.9047613143921,
        "wires": []
    },
    {
        "id": "658ae903229f4592",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "human time",
        "func": "msg.payload = Date(msg.timestamp).toLocaleString('en-US');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710.3810272216797,
        "y": 437.9047613143921,
        "wires": [
            [
                "3ee64059a5794383",
                "3e0096d034202bba"
            ]
        ]
    },
    {
        "id": "14ef5ebb90e56c68",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "",
        "links": [
            "f27f4d9ca1cd35bf"
        ],
        "x": 1435.3810272216797,
        "y": 437.9047613143921,
        "wires": [
            [
                "6ea06f74904c562c"
            ]
        ]
    },
    {
        "id": "6ea06f74904c562c",
        "type": "delay",
        "z": "12eb165a2e3227f2",
        "g": "6d917c3029e21bf3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1550.3810272216797,
        "y": 437.9047613143921,
        "wires": [
            [
                "658ae903229f4592"
            ]
        ]
    },
    {
        "id": "7a23bcc17c45392c",
        "type": "link out",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "mode": "link",
        "links": [
            "080c684149073d29",
            "078a6329f1f30b9f"
        ],
        "x": 2455.0004119873047,
        "y": 805.2381439208984,
        "wires": []
    },
    {
        "id": "c562c046446c3877",
        "type": "circularbuffer",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "Circular Buffer",
        "size": "10",
        "circular": "yes",
        "sliding_size": "10",
        "x": 817.4999618530273,
        "y": 1112.5002093315125,
        "wires": [
            [
                "305417155002157e",
                "ed2c3b42683e712f"
            ]
        ]
    },
    {
        "id": "19e45bb4ea8943a4",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "passthru",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 617.4999618530273,
        "y": 1112.5002093315125,
        "wires": [
            [
                "1789f286e36079e8",
                "c562c046446c3877"
            ]
        ]
    },
    {
        "id": "1789f286e36079e8",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 807.4999618530273,
        "y": 1052.5002093315125,
        "wires": []
    },
    {
        "id": "305417155002157e",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1007.4999618530273,
        "y": 1172.5002093315125,
        "wires": []
    },
    {
        "id": "ed2c3b42683e712f",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "round to nearest 0.1",
        "func": "var avg = (msg.payload.avg).toFixed(1);\nmsg.singledecimalaverage = avg;\nnode.status({text:avg});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1047.4999618530273,
        "y": 1112.5002093315125,
        "wires": [
            [
                "0a8f8b8267f52c8d"
            ]
        ]
    },
    {
        "id": "0a8f8b8267f52c8d",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1247.4999618530273,
        "y": 1112.5002093315125,
        "wires": []
    },
    {
        "id": "57c957211b2d667d",
        "type": "dweetio in",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "thing": "fishinator005_mean_steady_state_depth_cm",
        "name": "fishinator005_mean_steady_state_depth_cm",
        "x": 347.49996185302734,
        "y": 1112.5002093315125,
        "wires": [
            [
                "19e45bb4ea8943a4"
            ]
        ]
    },
    {
        "id": "ec729f32e863ce05",
        "type": "dweetio in",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "thing": "fishinator005",
        "name": "fishinator005",
        "x": 447.49996185302734,
        "y": 1152.5002093315125,
        "wires": [
            [
                "b9fc3ee6aebfbab0"
            ]
        ]
    },
    {
        "id": "b9fc3ee6aebfbab0",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 607.4999618530273,
        "y": 1152.5002093315125,
        "wires": []
    },
    {
        "id": "f3ef94b484f16057",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "~~~~~ dweet.io ~~~~~ incoming packets",
        "info": "",
        "x": 387.49996185302734,
        "y": 1052.5002093315125,
        "wires": []
    },
    {
        "id": "0511233d0d774d1d",
        "type": "dead-man-switch",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "delay": "5",
        "delayUnit": "seconds",
        "x": 1830.0001220703125,
        "y": 886.6666870117188,
        "wires": [
            [
                "38cd8813580e41e6"
            ]
        ]
    },
    {
        "id": "44fe59cf56ba57f5",
        "type": "inject",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1640.0001220703125,
        "y": 886.6666870117188,
        "wires": [
            [
                "0511233d0d774d1d"
            ]
        ]
    },
    {
        "id": "a3a7ca1520e26768",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200.0001220703125,
        "y": 886.6666870117188,
        "wires": []
    },
    {
        "id": "38cd8813580e41e6",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "human time",
        "func": "msg.timestamp = Date.now();\nmsg.humantime = Date(msg.timestamp).toLocaleString('en-US');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020.0001220703125,
        "y": 886.6666870117188,
        "wires": [
            [
                "a3a7ca1520e26768"
            ]
        ]
    },
    {
        "id": "3724133a4c38f963",
        "type": "delay",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "",
        "pauseType": "rate",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1545.9999694824219,
        "y": 1058.6666855812073,
        "wires": [
            [
                "dec6feb23248548a"
            ]
        ]
    },
    {
        "id": "7be34010e147b570",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "extract minimum/maximum",
        "func": "var maxis = { \"payload\": msg.maximum, \"timestamp\": msg.timestamp };\nvar minis = { \"payload\": msg.minimum, \"timestamp\": msg.timestamp };\n\nreturn [maxis,minis];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570.0000076293945,
        "y": 1166.666663646698,
        "wires": [
            [
                "d3b27917141ffe5a"
            ],
            [
                "6d2dbbc8ce506c26"
            ]
        ],
        "outputLabels": [
            "maximums",
            "minimums"
        ]
    },
    {
        "id": "d3b27917141ffe5a",
        "type": "circularbuffer",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "6-Buffer",
        "size": "6",
        "circular": "no",
        "sliding_size": "10",
        "x": 1790.0000076293945,
        "y": 1146.666663646698,
        "wires": [
            [
                "adc701c949545b88"
            ]
        ]
    },
    {
        "id": "6d2dbbc8ce506c26",
        "type": "circularbuffer",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "6-Buffer",
        "size": "6",
        "circular": "no",
        "sliding_size": "10",
        "x": 1790.0000076293945,
        "y": 1186.666663646698,
        "wires": [
            [
                "a197044a34dbba5f"
            ]
        ]
    },
    {
        "id": "adc701c949545b88",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "max of max",
        "func": "var max = null;\n//if ('undefined' !== typeof msg.maximum )\n    max = { \"payload\": msg.payload.max, \"timestamp\": msg.timestamp, \n        \"topic\": \"wide maximum depth\" };\n//not sure this timestamp is representative anymore\n\nreturn max;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960.0000076293945,
        "y": 1146.666663646698,
        "wires": [
            [
                "965918e38b5247c3",
                "0c6b70ade3b74108"
            ]
        ]
    },
    {
        "id": "a197044a34dbba5f",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "min of min",
        "func": "var min = null;\n//if ('undefined' !== typeof msg.minimum )\n    min = { \"payload\": msg.payload.min, \"timestamp\": msg.timestamp, \n        \"topic\": \"wide minimum depth\" };\n        \n//not sure this timestamp is representative anymore\nreturn min;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960.0000076293945,
        "y": 1186.666663646698,
        "wires": [
            [
                "965918e38b5247c3",
                "0c6b70ade3b74108"
            ]
        ]
    },
    {
        "id": "965918e38b5247c3",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2184.2858963012695,
        "y": 1110.952365398407,
        "wires": []
    },
    {
        "id": "0c6b70ade3b74108",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "pair max/min evaluations",
        "func": "\n\nvar localcount = context.get('localcount')||{\"compareok\":0,\"mismatch\":0};\n\n\n\nvar oldmax = context.get('last_maximum')||null;\nvar oldmin = context.get('last_minimum')||null;\nvar tmpobj = null;\n\nif ((msg.topic).includes(\"max\"))\n{\n    oldmax = { \"payload\": msg.payload, \"timestamp\":msg.timestamp }\n}\nelse if ((msg.topic).includes(\"min\"))\n{\n    oldmin = { \"payload\": msg.payload, \"timestamp\":msg.timestamp }\n}\nelse\n{\n    //how did we get here?\n}\n\ncontext.set('last_maximum',oldmax);\ncontext.set('last_minimum',oldmin);\n\nif ((null === oldmax)||(null === oldmin)) return null;\n\nif (oldmax.timestamp == oldmin.timestamp)\n{\n    localcount.compareok++;\n    tmpobj = { \"min\": oldmin.payload,\n                \"max\": oldmax.payload,\n                \"timestamp\":msg.timestamp};\n\n    msg.payload = tmpobj;\n}\nelse \n{\n    localcount.mismatch++;\n    msg = null;\n}\ncontext.set('localcount',localcount);\n\nnode.status({text: \"timestamps ok: \"+localcount.compareok\n                        +\" ~~ mismatch:\"+localcount.mismatch});\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2242.857322692871,
        "y": 1149.5238547325134,
        "wires": [
            [
                "df40062cfc313f36",
                "e6158370d6cdd543"
            ]
        ]
    },
    {
        "id": "0472861a2fef2f35",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2617.1431999206543,
        "y": 1225.238097190857,
        "wires": []
    },
    {
        "id": "49aa253b814dbb48",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "passthru",
        "func": "node.status({\"text\":\"last time: \"+Date.now()})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 891.428539276123,
        "y": 679.5237665176392,
        "wires": [
            [
                "c4efad5c32715b45"
            ]
        ]
    },
    {
        "id": "df40062cfc313f36",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "format for calc services",
        "func": "var tmpobj = {};\n\n//    tmpobj = { \"min\": oldmin.payload,\n//                \"max\": oldmax.payload,\n  //              \"timestamp\":msg.timestamp};\n\n//for preservation of values\ntmpobj.h1 = msg.payload.min;\ntmpobj.h2 = msg.payload.max;\ntmpobj.timestamp = msg.payload.timestamp;\nmsg.payload = tmpobj;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2288.5713500976562,
        "y": 1276.6667032241821,
        "wires": [
            [
                "20feae88e9c64b69"
            ]
        ]
    },
    {
        "id": "2839e7104ee08d09",
        "type": "link out",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "",
        "mode": "link",
        "links": [
            "16c40c4030caf0e3"
        ],
        "x": 2756.42870426178,
        "y": 1276.6667037010193,
        "wires": []
    },
    {
        "id": "09a17d82678bd53d",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "48-averages generated at every data point past 48",
        "info": "",
        "x": 648.5715560913086,
        "y": 883.8094854354858,
        "wires": []
    },
    {
        "id": "20feae88e9c64b69",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "topic: declare source: fishinator",
        "func": "msg.topic = \"Fishinator Delta-Volume Calc (litres)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2561.4289169311523,
        "y": 1276.6666159629822,
        "wires": [
            [
                "2839e7104ee08d09",
                "0472861a2fef2f35"
            ]
        ]
    },
    {
        "id": "dec6feb23248548a",
        "type": "ring-buffer",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "averaged depth value buffer (10)",
        "capacity": "10",
        "order": "old-to-new",
        "sendOnlyIfFull": false,
        "pushAfterClear": true,
        "extra": true,
        "perTopic": true,
        "x": 1775.9999694824219,
        "y": 1058.6666855812073,
        "wires": [
            [
                "c55a37947321ef3b"
            ]
        ]
    },
    {
        "id": "c55a37947321ef3b",
        "type": "change",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "min/max/ave",
        "rules": [
            {
                "t": "set",
                "p": "averagemean",
                "pt": "msg",
                "to": "$average(msg.payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "maximum",
                "pt": "msg",
                "to": "$max(msg.payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "minimum",
                "pt": "msg",
                "to": "$min(msg.payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1995.9999694824219,
        "y": 1058.6666855812073,
        "wires": [
            [
                "7be34010e147b570"
            ]
        ]
    },
    {
        "id": "10fe88e84d9b611f",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "period ~5 mins (10 x 1msg/0.5min)",
        "info": "",
        "x": 1765.9999694824219,
        "y": 998.6666855812073,
        "wires": []
    },
    {
        "id": "834808dc22ee2ad7",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "period ~30 mins (6 x 5 min/msg)",
        "info": "",
        "x": 1860.0000076293945,
        "y": 1226.666663646698,
        "wires": []
    },
    {
        "id": "e6158370d6cdd543",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "encode min/max for file log",
        "func": "\n\nvar localcount = context.get('localcount')||0;\nlocalcount++;\ncontext.set('localcount',localcount);\n\nvar lasttimestamp = context.get('lasttimestamp')||0;\nvar lastperiod = ((msg.timestamp - lasttimestamp)/1000).toFixed(0);//convert to seconds\nlasttimestamp = msg.timestamp;\ncontext.set('lasttimestamp',lasttimestamp);\n\nif (86400 >lastperiod)  //within the day\n    node.status({text: \"count: \"+localcount+\" period: \"+lastperiod+\" s\"});\nelse\n    node.status({text: \"count: \"+localcount+\" period: <is this startup?>\"});\n    \nreturn {\"payload\": { \"maximum\": Number(msg.payload.max).toFixed(1),\n                    \"minimum\": Number(msg.payload.min).toFixed(1),\n                    \"timestamp\": msg.timestamp,\n                    \"measurement\": \"water tank depths\",\n                    \"units\": \"cm\",\n                    \"units_long\": \"centimetres\"\n                    }\n        };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1912.8572006225586,
        "y": 1328.0953345298767,
        "wires": [
            [
                "27d11ae9a5407df4"
            ]
        ]
    },
    {
        "id": "27d11ae9a5407df4",
        "type": "file",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "append log/bihourly_minmax.log.txt",
        "filename": "log/bihourly_minmax.log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2232.8572006225586,
        "y": 1328.0953345298767,
        "wires": [
            [
                "b9645a9a8c83e685"
            ]
        ]
    },
    {
        "id": "b9645a9a8c83e685",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "a669d435cdaeb42c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2462.8572006225586,
        "y": 1328.0953345298767,
        "wires": []
    },
    {
        "id": "32fcf8759aea9c8d",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "log the data locally",
        "info": "",
        "x": 372.8572196960449,
        "y": 762.380898475647,
        "wires": []
    },
    {
        "id": "78b13ffdfa8a0e3f",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "03f7f54193104c9a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1165.7144813537598,
        "y": 723.8095369338989,
        "wires": []
    },
    {
        "id": "b9651e127d01dfee",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "GPS input on port 9170",
        "info": "http://10.9.142.161:1880/",
        "x": 317.4999084472656,
        "y": 1220.833447933197,
        "wires": []
    },
    {
        "id": "e6c230d5fde63c29",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "5e4c8e72a2708336",
        "name": "Secondary RATE LIMITING creates ALIASING",
        "info": "",
        "x": 1618.5717468261719,
        "y": 652.3810091018677,
        "wires": []
    },
    {
        "id": "7349ade3c692e0d8",
        "type": "subflow:7f4b805fc5436401",
        "z": "12eb165a2e3227f2",
        "d": true,
        "g": "03f7f54193104c9a",
        "name": "",
        "x": 711.4287338256836,
        "y": 735.2380132675171,
        "wires": []
    },
    {
        "id": "ce2abbba0f417c5d",
        "type": "tcp in",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "from pepwave gps 9170",
        "server": "server",
        "host": "",
        "port": "9170",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "",
        "base64": false,
        "tls": "",
        "x": 437.4999084472656,
        "y": 1280.833447933197,
        "wires": [
            [
                "d1b9d7d553ecdbfa"
            ]
        ]
    },
    {
        "id": "d1b9d7d553ecdbfa",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "e75aed1b3e63d102",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 687.4999084472656,
        "y": 1280.833447933197,
        "wires": []
    },
    {
        "id": "795dc160deb37f46",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "Accept Many Temperatures",
        "info": "",
        "x": 346.3591613769531,
        "y": 296.3789496421814,
        "wires": []
    },
    {
        "id": "719da17e38ae2e2c",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "9ddbb5706ec334b2",
        "name": "RESTful service available w/ Control Flow",
        "info": "",
        "x": 390.63494873046875,
        "y": 393.7401065826416,
        "wires": []
    },
    {
        "id": "6d732cd1b012b9ff",
        "type": "link out",
        "z": "12eb165a2e3227f2",
        "name": "Incoming Reported Temperatures",
        "mode": "link",
        "links": [
            "1deeb4f64323078b"
        ],
        "x": 625.7407887776692,
        "y": 164.48495292154945,
        "wires": []
    },
    {
        "id": "b307c3247ca32050",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "links": [
            "f27f4d9ca1cd35bf"
        ],
        "x": 189.42031288146973,
        "y": 1548.0172653198242,
        "wires": [
            [
                "e225197f3f56f3fd",
                "01754c0e7e6af565"
            ]
        ]
    },
    {
        "id": "74b8595094e7b918",
        "type": "regression",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "(Linear) Regression - 14 pts",
        "dataSetSize": "14",
        "regressionType": "linear",
        "polynomialOrder": 2,
        "precision": "4",
        "xInputField": "payload.x",
        "xInputFieldType": "msg",
        "yInputField": "payload.y",
        "yInputFieldType": "msg",
        "yOutputField": "payload.y",
        "yOutputFieldType": "msg",
        "functionOutputField": "Output",
        "functionOutputFieldType": "msg",
        "resultOnly": false,
        "x": 628.6000108718872,
        "y": 1550.6781482696533,
        "wires": [
            [
                "489f01d1d5ad8375",
                "84cc238882299f16"
            ]
        ]
    },
    {
        "id": "489f01d1d5ad8375",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 827.4888162612915,
        "y": 1484.3452625274658,
        "wires": []
    },
    {
        "id": "3c0278688e4d985c",
        "type": "inject",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"x\":2}",
        "payloadType": "json",
        "x": 611.9159898757935,
        "y": 1508.5383758544922,
        "wires": [
            [
                "74b8595094e7b918"
            ]
        ]
    },
    {
        "id": "e225197f3f56f3fd",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 313.7388582229614,
        "y": 1511.8452606201172,
        "wires": []
    },
    {
        "id": "01754c0e7e6af565",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "format for regression",
        "func": "\n//first time this is triggered\nvar now = Date.now();\n    \nvar adjust = context.get(\"nowtimems\")||Number(now)\ncontext.set(\"nowtimems\", adjust);\n\n//subtract time from when this first gets triggered\n//var modifiedx = Number(now)/1000.0 - adjust; //fucks with the regression implementation\n\nvar modifiedx = 1.0*Number(now);\n\nvar tmp = {\"x\": modifiedx, \"y\": Number(msg.payload)};\n\n//node.status(\"x: \"+tmp.x+\"  y: \"+tmp.y+\"   adjusted: \"+String(Number(msg.timestamp)-adjust));\nnode.status(\"x: \"+tmp.x+\"  y: \"+tmp.y);\n\n//var tmp = {\"x\": (msg.timestamp/Math.pow(10,12)), \"y\": msg.payload};\n//var tmp = {\"x\": msg.timestamp, \"y\": msg.payload};\nmsg.payload = tmp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360.6660203933716,
        "y": 1550.5345993041992,
        "wires": [
            [
                "74b8595094e7b918"
            ]
        ]
    },
    {
        "id": "ee59211a7992f946",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "format for chart slope",
        "func": "//var slopeval = (1000*10*1000.0*msg.Output.equation[0]).toFixed(1); //the slope is natively in cm/mS, change to cm/s\nvar slopeval = (msg.Output.equation[0]).toFixed(1); \nvar interceptval = (msg.Output.equation[1]).toFixed(1); //the intercept , not used here yet\nmsg.topic = \"Slope (33pt)\";\nmsg.payload = slopeval;\n\n\nnode.status(\" slope: \"+slopeval+\"   y-int: \"+interceptval);\n\nreturn msg;\n\n/* copied from other fcn\nmsg.topic = \"Intercept\";\nif (0.1 > slopeval)\n    msg.payload = interceptval;  //only give the intercept when the slope is near zero\nelse\n    msg.payload = null;\n    */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 886.9203996658325,
        "y": 1608.0345649719238,
        "wires": [
            [
                "170ce8fe5a7bcc6b"
            ]
        ]
    },
    {
        "id": "84cc238882299f16",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "format for chart Y-intercept",
        "func": "var interceptval = (msg.Output.equation[1]).toFixed(1); //the intercept, \nvar slopeval = (1000*1000.0*msg.Output.equation[0]).toFixed(1); //the slope in cm/ms , new units cm/s\n\nmsg.topic = \"Intercept (14pt)\";\nif (0.05 > Math.abs(slopeval))\n    msg.payload = interceptval;  //only give the intercept when the slope is near zero\nelse\n    msg.payload = null;\n\nnode.status(\" slope: \"+slopeval+\"   y-int: \"+interceptval);\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 918.7388200759888,
        "y": 1551.8452320098877,
        "wires": [
            [
                "c342a24cd21bd759"
            ]
        ]
    },
    {
        "id": "c342a24cd21bd759",
        "type": "ui_chart",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "group": "d6b31fdeabeda609",
        "order": 2,
        "width": "3",
        "height": "4",
        "label": "Y-intercept (cm)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1158.183403968811,
        "y": 1551.9799041748047,
        "wires": [
            []
        ]
    },
    {
        "id": "170ce8fe5a7bcc6b",
        "type": "ui_chart",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "group": "d6b31fdeabeda609",
        "order": 1,
        "width": "3",
        "height": "4",
        "label": "Slope (μm/s)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1164.9888277053833,
        "y": 1609.345232963562,
        "wires": [
            []
        ]
    },
    {
        "id": "782da88d397e490f",
        "type": "link in",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "CLEAR UI",
        "links": [
            "28d8b2bb.d7274e"
        ],
        "x": 1008.1746425628662,
        "y": 1483.1647653579712,
        "wires": [
            [
                "c342a24cd21bd759",
                "170ce8fe5a7bcc6b"
            ]
        ]
    },
    {
        "id": "b1dbf048da8c37a5",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "Regression of time (x) and depth (y) data",
        "info": "",
        "x": 370.67900562286377,
        "y": 1403.52933883667,
        "wires": []
    },
    {
        "id": "7d8ba4a0a2444e10",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "y-intercept works ok with small buffer sizes, but slope noisy",
        "info": "",
        "x": 478.1746873855591,
        "y": 1436.038251876831,
        "wires": []
    },
    {
        "id": "862268304494b82c",
        "type": "comment",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "large buffer sizes, and y-intercept responds slowly",
        "info": "",
        "x": 448.1789827346802,
        "y": 1466.025068283081,
        "wires": []
    },
    {
        "id": "06d6585183d86588",
        "type": "regression",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "(Linear) Regression - 33 pts",
        "dataSetSize": "33",
        "regressionType": "linear",
        "polynomialOrder": 2,
        "precision": "4",
        "xInputField": "payload.x",
        "xInputFieldType": "msg",
        "yInputField": "payload.y",
        "yInputFieldType": "msg",
        "yOutputField": "payload.y",
        "yOutputFieldType": "msg",
        "functionOutputField": "Output",
        "functionOutputFieldType": "msg",
        "resultOnly": false,
        "x": 655.2388458251953,
        "y": 1673.956340789795,
        "wires": [
            [
                "ee59211a7992f946",
                "da9866469c2f09c0"
            ]
        ]
    },
    {
        "id": "da9866469c2f09c0",
        "type": "debug",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 843.7388162612915,
        "y": 1692.95631980896,
        "wires": []
    },
    {
        "id": "b6ad89ee1c41b999",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "make big for slope calcs",
        "func": "//If the magnitude was too small, the regression palette\n//   node would set slope as zero.\n//   By doing this multiplication to raise the apparent magnitude\n//   the slope calculation is is not rounded off.\n\nmsg.payload.y = 1000*10*1000.0*Number(msg.payload.y);\n//convert cm/s to mm/ms (*10), to μm/ms (*1000), to μm/s (*1000)\nmsg.units = \"μm/s\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 382.31749725341797,
        "y": 1648.0021343231201,
        "wires": [
            [
                "06d6585183d86588"
            ]
        ]
    },
    {
        "id": "9f4c26c6292d391b",
        "type": "function",
        "z": "12eb165a2e3227f2",
        "g": "4d9552fe8ed150d4",
        "name": "format for regression",
        "func": "\n//first time this is triggered\nvar now = Date.now();\n    \n//var adjust = context.get(\"nowtimems\")||Number(now)\n//context.set(\"nowtimems\", adjust);\n\n//subtract time from when this first gets triggered\n//var modifiedx = Number(now)/1000.0 - adjust; //fucks with the regression implementation\n\nvar modifiedx = 1.0*Number(now);\n\nvar tmp = {\"x\": modifiedx, \"y\": Number(msg.payload)};\n\n//node.status(\"x: \"+tmp.x+\"  y: \"+tmp.y+\"   adjusted: \"+String(Number(msg.timestamp)-adjust));\nnode.status(\"x: \"+tmp.x+\"  y: \"+tmp.y);\n\n//var tmp = {\"x\": (msg.timestamp/Math.pow(10,12)), \"y\": msg.payload};\n//var tmp = {\"x\": msg.timestamp, \"y\": msg.payload};\nmsg.payload = tmp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330.0099334716797,
        "y": 1610.317527770996,
        "wires": [
            [
                "b6ad89ee1c41b999"
            ]
        ]
    },
    {
        "id": "3fbdf1c21e0130f4",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "draining event status",
        "func": "node.status({text:\"draining \"+msg.timestamp});\nmsg.topic = \"draining\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "3b1794810ed3ee45",
                "65d232c61da9bc87",
                "d70547cb69c792cf"
            ]
        ]
    },
    {
        "id": "9de27e22defa7b0b",
        "type": "switch",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "MAGIC: detect events",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.008",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "-0.15",
                "vt": "num"
            },
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 340,
        "y": 300,
        "wires": [
            [
                "3fbdf1c21e0130f4"
            ],
            [
                "d9f81b05d1ce676d"
            ],
            [
                "14ecfb0f0ecc9636"
            ],
            [
                "335a2209a4083a1d"
            ]
        ],
        "outputLabels": [
            "Draining to Tank",
            "Pumping from Tank",
            "Neither",
            "null packet"
        ]
    },
    {
        "id": "04712fbdadac8682",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 520,
        "wires": []
    },
    {
        "id": "d9f81b05d1ce676d",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "pumping event status",
        "func": "node.status({text:\"pumping \"+msg.timestamp});\n\nmsg.topic = \"pumping\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "4f0b84e0f1de9dc9",
                "65d232c61da9bc87",
                "657e5376ec3f27a2"
            ]
        ]
    },
    {
        "id": "14ecfb0f0ecc9636",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "idle event status",
        "func": "node.status({text:\"idle \"+msg.timestamp});\n\nmsg.topic = \"idle\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "65d232c61da9bc87",
                "0d69ce984f3c8404"
            ]
        ]
    },
    {
        "id": "335a2209a4083a1d",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "null event status",
        "func": "node.status({text:\"null packet \"+msg.timestamp});\n\nmsg.topic = \"null packet\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 460,
        "wires": [
            [
                "18e61900daf5e34e"
            ]
        ]
    },
    {
        "id": "4f0b84e0f1de9dc9",
        "type": "countula",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "pumping  count",
        "x": 820,
        "y": 340,
        "wires": [
            [
                "04712fbdadac8682"
            ],
            [
                "b958cd9e4a9009d4",
                "d2ae3ac0d646cecf"
            ]
        ]
    },
    {
        "id": "3b1794810ed3ee45",
        "type": "countula",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "draining count",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "04712fbdadac8682"
            ],
            [
                "b958cd9e4a9009d4",
                "ebf54d182970f9de"
            ]
        ]
    },
    {
        "id": "65d232c61da9bc87",
        "type": "countula",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "idle count (no event)",
        "x": 800,
        "y": 400,
        "wires": [
            [
                "04712fbdadac8682"
            ],
            [
                "b958cd9e4a9009d4",
                "fd9b64f0d810380e"
            ]
        ]
    },
    {
        "id": "c891a2602d7aa2e9",
        "type": "inject",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "reset Countula - THIS IS THE ONLY RESET THAT MATTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "RESET",
        "payload": "0",
        "payloadType": "num",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "a9d9f11f7d0033ee"
            ]
        ]
    },
    {
        "id": "03a03bd10f9a65d3",
        "type": "ui_chart",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "",
        "group": "56838d31b706d5b3",
        "order": 1,
        "width": "4",
        "height": "3",
        "label": "Duty Doughnut",
        "chartType": "pie",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Look for a Doughnut here",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "38",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1450.000129699707,
        "y": 494.00000762939453,
        "wires": [
            []
        ]
    },
    {
        "id": "18e61900daf5e34e",
        "type": "countula",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "null packet count",
        "x": 810,
        "y": 460,
        "wires": [
            [
                "04712fbdadac8682"
            ],
            [
                "39f0f5e2df6446b7"
            ]
        ]
    },
    {
        "id": "b958cd9e4a9009d4",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "counts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 560,
        "wires": []
    },
    {
        "id": "ebf54d182970f9de",
        "type": "change",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "topic: draining",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "draining",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 320,
        "wires": [
            [
                "eb75b932df5a5d44"
            ]
        ]
    },
    {
        "id": "d2ae3ac0d646cecf",
        "type": "change",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "topic: pumping",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "pumping",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 360,
        "wires": [
            [
                "eb75b932df5a5d44"
            ]
        ]
    },
    {
        "id": "fd9b64f0d810380e",
        "type": "change",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "topic: idle",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 400,
        "wires": [
            [
                "eb75b932df5a5d44"
            ]
        ]
    },
    {
        "id": "39f0f5e2df6446b7",
        "type": "change",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "topic: null packet",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "null packet",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 440,
        "wires": [
            [
                "eb75b932df5a5d44"
            ]
        ]
    },
    {
        "id": "0e1b852976cf8dae",
        "type": "inject",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "define initial packets",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "39f0f5e2df6446b7",
                "fd9b64f0d810380e",
                "d2ae3ac0d646cecf",
                "ebf54d182970f9de"
            ]
        ]
    },
    {
        "id": "eb75b932df5a5d44",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "unite event running totals",
        "func": "var myvents = context.get(\"local_event_numbers_tracker\")||{ \"idle\":0, \"pumping\":0, \"draining\":0, \"total\":0, \"other\":0, \"timestamp\":0};\n\nswitch(msg.topic) {\n    case \"idle\":    myvents.idle = msg.payload;\n                    break;\n                    \n    case \"pumping\": myvents.pumping = msg.payload;\n                    break;\n                    \n    case \"draining\":myvents.draining = msg.payload;\n                    break;\n                    \n    case \"reset\":                    \n    case \"RESET\":                    \n    case \"CLEAR\":\n    case \"clear\":   myvents.idle = 0;\n                        myvents.pumping=0; \n                        myvents.draining=0;\n                        myvents.total=0;\n                        myvents.other=0;\n                    break;\n    default:        myvents.other++;\n}\n\n\nmyvents.total = myvents.idle + myvents.pumping + myvents.draining;\nmyvents.timestamp = Date.now();\nmsg.topic = \"duty cycle\";\n\ncontext.set(\"local_event_numbers_tracker\", myvents);\n\nmsg.payload = myvents;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370.0001220703125,
        "y": 320.00000762939453,
        "wires": [
            [
                "76cf86c920e41a65"
            ]
        ]
    },
    {
        "id": "7041b6c9f576964d",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420.000129699707,
        "y": 454.00000762939453,
        "wires": []
    },
    {
        "id": "0de44ed4e530edcd",
        "type": "inject",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "reset event running totals",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "0",
        "payloadType": "num",
        "x": 1430.0001220703125,
        "y": 270.00003814697266,
        "wires": [
            [
                "eb75b932df5a5d44"
            ]
        ]
    },
    {
        "id": "76cf86c920e41a65",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "rechart event ratios",
        "func": "var pie_chart_data = null;\n\n //payload exists, payload is array with length\nif (null !== msg.payload && 0<msg.payload.total )\n{\n    mylen = msg.payload.length;\n    node.status({text:\"new packet \"+Date.now()});\n   \n    pie_chart_data = {\n            \"series\": [\"Fishinator Duty\"],\n            \"data\": [[(100*msg.payload.idle/msg.payload.total).toFixed(0), \n                      (100*msg.payload.pumping/msg.payload.total).toFixed(0),\n                      (100*msg.payload.draining/msg.payload.total).toFixed(0) ]],\n            \"labels\":[\"idle\",\"pumping\", \"draining\"]\n    };\n}\nelse\n{\n    pie_chart_data = {\n            \"series\": [\"Fishinator Duty\"],\n            \"data\": [[0, 0, 0]],\n            \"labels\":[\"idle\",\"pumping\", \"draining\"]\n    };\n}\n\nmsg.timestamp = msg.payload.timestamp;\nmsg.payload = [pie_chart_data];\nmsg.comment = \"Remember that these are percentages!-cm2022\"\n\nreturn msg;\n\n\n/*\nvar m = {};\nm.labels = [\"Download\", \"In-Store\", \"Mail-Order\"];\nm.data = [[300, 500, 100]];\nm.series = [\"Sales\"];\nreturn {payload:[m],topic:msg.topic};\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1396.0001220703125,
        "y": 384.00000762939453,
        "wires": [
            [
                "7041b6c9f576964d",
                "03a03bd10f9a65d3"
            ]
        ]
    },
    {
        "id": "2c0b806788c64dbf",
        "type": "comment",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "Event detection and duty cycle donut graph",
        "info": "",
        "x": 380.00001525878906,
        "y": 128.00001049041748,
        "wires": []
    },
    {
        "id": "078a6329f1f30b9f",
        "type": "link in",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "to derivative event detection",
        "links": [
            "7a23bcc17c45392c"
        ],
        "x": 195,
        "y": 300,
        "wires": [
            [
                "9de27e22defa7b0b"
            ]
        ]
    },
    {
        "id": "7a65feea44a019cb",
        "type": "comment",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "Use the 48av version for noisy low magnitude +ve slope values (draining into tank detect > +0.01 cm/s)",
        "info": "",
        "x": 1142,
        "y": 700.000075340271,
        "wires": []
    },
    {
        "id": "292c9224d537f8e8",
        "type": "comment",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "Use the rate-limited version for stronger -ve slope values (pump running detect < -0.1 cm/s)",
        "info": "",
        "x": 1122,
        "y": 740.000075340271,
        "wires": []
    },
    {
        "id": "bebf3c94211c01da",
        "type": "comment",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "Old comments - revisit",
        "info": "",
        "x": 862,
        "y": 660.000075340271,
        "wires": []
    },
    {
        "id": "a9d9f11f7d0033ee",
        "type": "ui_button",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "reset Countulae",
        "group": "56838d31b706d5b3",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": true,
        "label": "Clear Duty Doughnut",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "RESET",
        "topicType": "str",
        "x": 840,
        "y": 240,
        "wires": [
            [
                "18e61900daf5e34e",
                "65d232c61da9bc87",
                "4f0b84e0f1de9dc9",
                "3b1794810ed3ee45"
            ]
        ]
    },
    {
        "id": "d70547cb69c792cf",
        "type": "dead-man-switch",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "20sec deadman",
        "delay": "20",
        "delayUnit": "seconds",
        "x": 242.0000762939453,
        "y": 666.0000762939453,
        "wires": [
            [
                "148534975e92fd9c"
            ]
        ]
    },
    {
        "id": "826c91cf2c11dd3d",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 592.0000762939453,
        "y": 666.0000762939453,
        "wires": []
    },
    {
        "id": "148534975e92fd9c",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "human time",
        "func": "msg.timestamp = Date.now();\nmsg.humantime = Date(msg.timestamp).toLocaleString('en-US');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 432.0000762939453,
        "y": 666.0000762939453,
        "wires": [
            [
                "826c91cf2c11dd3d"
            ]
        ]
    },
    {
        "id": "657e5376ec3f27a2",
        "type": "dead-man-switch",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "20sec deadman",
        "delay": "20",
        "delayUnit": "seconds",
        "x": 242.0000762939453,
        "y": 706.0000762939453,
        "wires": [
            [
                "485be57c3f310348"
            ]
        ]
    },
    {
        "id": "7dec1bdb9d037983",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 592.0000762939453,
        "y": 706.0000762939453,
        "wires": []
    },
    {
        "id": "485be57c3f310348",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "human time",
        "func": "msg.timestamp = Date.now();\nmsg.humantime = Date(msg.timestamp).toLocaleString('en-US');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 432.0000762939453,
        "y": 706.0000762939453,
        "wires": [
            [
                "7dec1bdb9d037983"
            ]
        ]
    },
    {
        "id": "0d69ce984f3c8404",
        "type": "dead-man-switch",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "20sec deadman",
        "delay": "20",
        "delayUnit": "seconds",
        "x": 242.0000762939453,
        "y": 746.0000762939453,
        "wires": [
            [
                "425a72797a92a282"
            ]
        ]
    },
    {
        "id": "9b1eb37312d409a6",
        "type": "debug",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 592.0000762939453,
        "y": 746.0000762939453,
        "wires": []
    },
    {
        "id": "425a72797a92a282",
        "type": "function",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "human time",
        "func": "msg.timestamp = Date.now();\nmsg.humantime = Date(msg.timestamp).toLocaleString('en-US');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 432.0000762939453,
        "y": 746.0000762939453,
        "wires": [
            [
                "9b1eb37312d409a6"
            ]
        ]
    },
    {
        "id": "cc4af4d9fabe6e49",
        "type": "comment",
        "z": "48d1e9daf41c3154",
        "g": "cd41f03dc27972a4",
        "name": "Undocumented Magic",
        "info": "",
        "x": 340.8888931274414,
        "y": 241.56944751739502,
        "wires": []
    },
    {
        "id": "f20f9fc3570389f4",
        "type": "link in",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "links": [
            "f27f4d9ca1cd35bf"
        ],
        "x": 282.0000915527344,
        "y": 579.6668100357056,
        "wires": [
            [
                "5f98346b0cd2cc32",
                "781f10dc9e12b370",
                "6e1375ab5fc707d9"
            ]
        ]
    },
    {
        "id": "6e1375ab5fc707d9",
        "type": "ring-buffer",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "buffer 512",
        "capacity": "512",
        "order": "old-to-new",
        "sendOnlyIfFull": false,
        "pushAfterClear": false,
        "extra": true,
        "perTopic": true,
        "x": 427.0000915527344,
        "y": 559.6668100357056,
        "wires": [
            [
                "bbbbfef5c0587672",
                "a315a19f96128d12"
            ]
        ]
    },
    {
        "id": "a315a19f96128d12",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "fft wrapper (2^N only)",
        "func": "var a = msg.payload.length;\nvar b = Math.log(a)/Math.log(2);\n\n\nmsg.fillpercent = Number(100.0*a/512.0).toFixed(0);\nvar timestamp1 = Date.now();\nmsg.timedatabuffersize = a;\n\nif ((b != Math.floor(b) ) || (1 >= a ))\n{\n    node.status({text:\"Reject: Not a natural power of two (\"+a+\")\"});\n    msg.fft = null;\n    msg.fftcalcdelay = \"n/a\";\n    return msg; //not a power of two (and at least two)\n}\nelse\n{\n    node.status({text:\"processing array size (\"+a+\")\"});\n\n    //var fftjs = context.global.fftrootjs; //this for root\n    var fftjs = context.global.fftjs;   //this for normal\n\n    if (undefined != fftjs)\n    {\n         msg.fft = fftjs.fft(msg.payload);\n    }\n    msg.fftcalcdelay = (Date.now())-timestamp1;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 627.0000915527344,
        "y": 619.6668100357056,
        "wires": [
            [
                "f9ebf34253fbd688",
                "e17170831a1a1b1b",
                "9d3afa3fdfc110e5",
                "f8e02ca0fbf3f4e6"
            ]
        ]
    },
    {
        "id": "f9ebf34253fbd688",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 817.0000915527344,
        "y": 579.6668100357056,
        "wires": []
    },
    {
        "id": "890fc14c98d44686",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "test with 16-array",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "payloadType": "jsonata",
        "x": 407.0000915527344,
        "y": 719.6668100357056,
        "wires": [
            [
                "a315a19f96128d12"
            ]
        ]
    },
    {
        "id": "beab9a209235b1dc",
        "type": "catch",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "catch stupid buffer error",
        "scope": [
            "6e1375ab5fc707d9"
        ],
        "uncaught": false,
        "x": 427.0000915527344,
        "y": 519.6668100357056,
        "wires": [
            [
                "e3134c413767e03c"
            ]
        ]
    },
    {
        "id": "e3134c413767e03c",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 617.0000915527344,
        "y": 519.6668100357056,
        "wires": []
    },
    {
        "id": "5f98346b0cd2cc32",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 417.0000915527344,
        "y": 619.6668100357056,
        "wires": []
    },
    {
        "id": "781f10dc9e12b370",
        "type": "countula",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "x": 427.0000915527344,
        "y": 659.6668100357056,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bbbbfef5c0587672",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 577.0000915527344,
        "y": 559.6668100357056,
        "wires": []
    },
    {
        "id": "198c3b65f3b1f66b",
        "type": "ui_chart",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "short fft magnitudes",
        "group": "bea23e66643ca7ab",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "{{msg.label}}",
        "chartType": "bar",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "fft goes here",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2283.1904525756836,
        "y": 698.3572015762329,
        "wires": [
            [
                "f248f4c114b92660"
            ]
        ]
    },
    {
        "id": "e17170831a1a1b1b",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "strip magnitudes & phases, add to msg",
        "func": "if ((null === msg.fft)||(null == msg.fft)) return null;\nif (0 >= msg.fft.length) return null;\nif ((undefined == msg.payload)||(null == msg.payload)) return null;\nvar magnitudes = new Array(msg.fft.length/2);\nvar phases = new Array(msg.fft.length/2);\nvar mp_pairs = new Array(msg.fft.length/2);\nnode.status({text:\"json: \", shape:\"dot\", fill:\"red\"});\n\nfor (var i=0; i<msg.fft.length/2; i++)\n{\n    var myobj = msg.fft[i];\n    var myjsonobj = { \"magnitude\":myobj[0], \"phase\":myobj[1], \n                        \"index\":i, \n                        \"note\":\"These are unadulterated fft calculations from fftjs\" };\n\n    magnitudes[i] = myjsonobj.magnitude/msg.fft.length;\n    if (!(  Number.isFinite(magnitudes[i]) )) magnitudes[i] = 0;\n    phases[i] = myjsonobj.phase;\n    mp_pairs[i] = myjsonobj;\n}    \n\n//it doesn't really matter which value is used because the status text \n//is more a confirmation/affirmation of life.\n//remember: myjsonobj has the //old, unprocessed// FFT information\n//      if you want to see corrected values, use magnitudes[] and phases[]\n//\nnode.status({text:\"json: mag=\"+myjsonobj.magnitude.toFixed(3)\n                            +\" phase=\"+myjsonobj.phase.toFixed(3),\n                            shape:\"dot\", fill:\"green\"});\n\nmsg.magnitudes = magnitudes;\nmsg.phases = phases;\nmsg.mp_pairs = mp_pairs;\ndelete(msg.fft);\ndelete(msg.oldest);\ndelete(msg.newest);\ndelete(msg.reading);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 917.0000915527344,
        "y": 619.6668100357056,
        "wires": [
            [
                "0f573e62ee884616",
                "e833cfd20fe3bfa2",
                "5901b88dd38ca2a8",
                "1d6c61a9832796ed"
            ]
        ]
    },
    {
        "id": "0f573e62ee884616",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 987.0000915527344,
        "y": 579.6668100357056,
        "wires": []
    },
    {
        "id": "e833cfd20fe3bfa2",
        "type": "change",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "magnitudes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "magnitudes",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "magnitude",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1202.0002746582031,
        "y": 698.0002813339233,
        "wires": [
            [
                "c787922b79e7db92",
                "9c55813007abd395"
            ]
        ]
    },
    {
        "id": "5901b88dd38ca2a8",
        "type": "change",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "phases",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "phases",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "phase",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1197.0000915527344,
        "y": 619.6668100357056,
        "wires": [
            [
                "f40c7dc5fbcc2d9e",
                "ea83601dd10e8255"
            ]
        ]
    },
    {
        "id": "c787922b79e7db92",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1202.0002746582031,
        "y": 738.0002813339233,
        "wires": []
    },
    {
        "id": "f40c7dc5fbcc2d9e",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1208.6667442321777,
        "y": 661.3335103988647,
        "wires": []
    },
    {
        "id": "9c55813007abd395",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "prep FFT for dashboard graph - magnitude",
        "func": "var fft_log_freq_flag = flow.get('fft_log_freq_flag')||\"linear\";\nvar fft_log_magnitude_flag = flow.get('fft_log_magnitude_flag')||\"linear\";\nvar fft_include_a0_in_mags = flow.get('fft_include_a0_in_mags')||\"false\";\nvar fft_PowerSpectrum = flow.get('fft_PowerSpectrum')||\"false\";\nvar maxHarmonicDisplay = flow.get('maxHarmonicDisplay')||255;\n\nconst mostFFTBinsShown = 255;\nconst minFFTBinsShown = 1;\nmsg.maxHarmonicDisplay = maxHarmonicDisplay;\n\nvar foo = (\"xaxis\" == msg.topic);\nvar bar = (\"yaxis\" == msg.topic);\nvar chet = (\"Includea0\" == msg.topic);\nvar barnes = (\"PowerSpectrum\" == msg.topic);\nvar toto = (\"maxHarmonicDisplay\" == msg.topic);\n//node.warn({text:msg.topic});\n\nif (foo || bar || chet || barnes || toto) //not data, commands or whatever\n{\n    /*\n    if (foo) \n    {\n        fft_log_freq_flag = msg.payload;\n        context.set('fft_log_freq_flag',fft_log_freq_flag);\n        //node.warn({text: \"xaxis set to \"+fft_log_freq_flag});\n    }\n    if (bar) \n    {\n        fft_log_magnitude_flag = msg.payload;\n        context.set('fft_log_magnitude_flag',fft_log_magnitude_flag);\n        //node.warn({text: \"yaxis set to \"+fft_log_magnitude_flag});\n    }\n    if (chet)\n    {\n        \n        fft_include_a0_in_mags = String(msg.payload);//fudging Boolean fudging me around\n        context.set('fft_include_a0_in_mags',fft_include_a0_in_mags);\n    }\n    if (barnes)\n    {\n        \n        fft_PowerSpectrum = String(msg.payload);//fudging Boolean fudging me around\n        context.set('fft_PowerSpectrum',fft_PowerSpectrum);\n    }\n    if (toto) \n    {\n        maxHarmonicDisplay = Number(msg.payload);\n        if (minFFTBinsShown > maxHarmonicDisplay) maxHarmonicDisplay = minFFTBinsShown;\n        if (mostFFTBinsShown < maxHarmonicDisplay) maxHarmonicDisplay = mostFFTBinsShown;\n        context.set('maxHarmonicDisplay',maxHarmonicDisplay);\n    }*/\n    \n    //msg.payload = null;\n    return null; // just get the hell out of here; you're done\n \n}\nelse\n{\n    var powsum = 0;\n    msg.a0 = msg.magnitudes[0];\n    \n    var maxshow = 0;\n    if (msg.mp_pairs.length < maxHarmonicDisplay) maxshow = msg.mp_pairs.length;\n    else maxshow = maxHarmonicDisplay;\n    \n    var datavalues = new Array(maxshow);\n    var xlabels = new Array(maxshow);\n    var titlelabel = \"\";\n    \n    //for (var i=0; i< msg.mp_pairs.length; i++)\n    for (var i=0; i< maxshow; i++)\n    {\n        //Check the magnitude axis scaling (y-axis)\n        if (\"linear\" == fft_log_magnitude_flag)\n        {\n            titlelabel = \" (cm)\";\n            //i wrote the cweird looking logic below to force a similar comparison\n            if ((0 == i) & (\"false\" == fft_include_a0_in_mags)) //null the DC (a0) value\n                datavalues[i] = null; //it's easier just to do this\n            else\n            {\n                if (\"true\" == fft_PowerSpectrum)\n                    datavalues[i] = (1000000*msg.magnitudes[i]*msg.magnitudes[i]).toFixed(3); //in cm^2x10^-6\n                else\n                    datavalues[i] = (Math.abs(msg.magnitudes[i])).toFixed(3); //in cm\n            }\n            if (0 != i)\n                powsum = powsum + msg.magnitudes[i]*msg.magnitudes[i]\n        }\n        else if (\"log\" == fft_log_magnitude_flag)\n        {\n            titlelabel = \" (dBcm)\";\n            if ( 0 != msg.magnitudes[i])\n            {        //i wrote the cweird looking logic below to force a similar comparison\n                if ((0 == i) & (\"false\" == fft_include_a0_in_mags)) //null the DC (a0) value\n                    datavalues[i] = null; //it's easier just to do this\n                else\n                    datavalues[i] = (20*Math.log(msg.magnitudes[i])).toFixed(0); //in 'dBcm'\n            }\n            else\n                datavalues[i] = null; //cross your fingers! (won't plot nulls)\n            //else\n            //    datavalues[i] = 20*Math.log(msg.magnitudes[i]/msg.magnitudes[0]); //normalize\n            //no good reason to normalize\n        }\n        else\n            datavalues[i] = 0; //shouldn't happen\n        \n        //the frequency axis (x-axis)\n        if (\"linear\" == fft_log_freq_flag)\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toFixed(3))+\" Hz\";\n        else if (\"log\" == fft_log_freq_flag)\n        {\n            //this is currently no different from linear\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toFixed(3))+\" Hz\";\n        }\n        else\n            xlabels[i] = \"?\"; //short, to the point.\n    }\n\n    var graphdata = [{\n    \"series\": [\"Depth - FFT mags (\"+msg.mp_pairs.length+\" freqs)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n    \n    msg.powsum = powsum;\n    msg.DCACratio = Math.log(msg.a0*msg.a0 / powsum);\n    msg.payload = graphdata;\n    msg.timestamp = Date.now();\n}\n\nmsg.label = \"Magnitudes\"+titlelabel;\n\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1554.8574905395508,
        "y": 701.690601348877,
        "wires": [
            [
                "1ee1d8e7d97c0436",
                "42992f8cb33f27cd",
                "0a7f2b1871654d2a",
                "43273ebb74a60b92",
                "abcc772a5138145a"
            ]
        ]
    },
    {
        "id": "1ee1d8e7d97c0436",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1843.1908111572266,
        "y": 658.3572788238525,
        "wires": []
    },
    {
        "id": "f248f4c114b92660",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2366.2864151000977,
        "y": 649.3095970153809,
        "wires": []
    },
    {
        "id": "e3fdfef2e3c75dce",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "d461a2ee89a36ec9",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1230.5000228881836,
        "y": 1274.881748199463,
        "wires": [
            [
                "df0204e9cd4a76da"
            ]
        ]
    },
    {
        "id": "bac0eee676981e38",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "group": "bea23e66643ca7ab",
        "order": 16,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "last update time",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2135.096103668213,
        "y": 617.4050035476685,
        "wires": []
    },
    {
        "id": "c97a2177beea5049",
        "type": "ui_chart",
        "z": "7ae603f70a4e9e14",
        "g": "c0fdf8a256575b08",
        "name": "Eerie AI Eye",
        "group": "5f821c044b7e075b",
        "order": 1,
        "width": "6",
        "height": "4",
        "label": "",
        "chartType": "radar",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "fft goes here",
        "dot": false,
        "ymin": "-3.1415926",
        "ymax": "+3.1415926",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2332.9292068481445,
        "y": 1234.76203250885,
        "wires": [
            []
        ]
    },
    {
        "id": "d43a2d975ce1fd3b",
        "type": "ui_switch",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "label": "log frequency scale",
        "tooltip": "This currently does not change the frequency scaling.  Linear only.",
        "group": "bea23e66643ca7ab",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "xaxis",
        "topicType": "str",
        "style": "",
        "onvalue": "log",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "linear",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 619.6667658487959,
        "y": 1172.33401171875,
        "wires": [
            [
                "b03f19a34aaf997c"
            ]
        ]
    },
    {
        "id": "d61863ee158dbe5e",
        "type": "ui_switch",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "label": "log magnitude scale",
        "tooltip": "Change the scale between log and linear",
        "group": "bea23e66643ca7ab",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "yaxis",
        "topicType": "str",
        "style": "",
        "onvalue": "log",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "linear",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 629.6667404174805,
        "y": 844.0005626678467,
        "wires": [
            [
                "b03f19a34aaf997c"
            ]
        ]
    },
    {
        "id": "3f9bfdf5224dc1b3",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "xaxis",
        "payload": "log",
        "payloadType": "str",
        "x": 409.6667658487959,
        "y": 1172.33401171875,
        "wires": [
            [
                "d43a2d975ce1fd3b"
            ]
        ]
    },
    {
        "id": "f62b319c35371785",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "xaxis",
        "payload": "linear",
        "payloadType": "str",
        "x": 419.6667658487959,
        "y": 1132.33401171875,
        "wires": [
            [
                "d43a2d975ce1fd3b"
            ]
        ]
    },
    {
        "id": "ea6137d4292e491f",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "yaxis",
        "payload": "log",
        "payloadType": "str",
        "x": 409.66674041748047,
        "y": 884.0005626678467,
        "wires": [
            [
                "d61863ee158dbe5e"
            ]
        ]
    },
    {
        "id": "7784540128aa3fbe",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "yaxis",
        "payload": "linear",
        "payloadType": "str",
        "x": 419.66674041748047,
        "y": 844.0005626678467,
        "wires": [
            [
                "d61863ee158dbe5e"
            ]
        ]
    },
    {
        "id": "ea83601dd10e8255",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "prep FFT for dashboard graph - phase",
        "func": "\nvar fft_log_freq_flag = flow.get('fft_log_freq_flag')||\"linear\";\n\nif (\"xaxis\" == msg.topic) \n{\n    fft_log_freq_flag = msg.payload;\n    flow.set('fft_log_freq_flag',fft_log_freq_flag);\n    //node.warn({text: \"xaxis set to \"+fft_log_freq_flag});\n    //msg.payload = null;\n    return null; // just get the hell out of here; you're done\n}\nelse\n{\n\n    var datavalues = new Array(msg.mp_pairs.length);\n    var xlabels = new Array(msg.mp_pairs.length);\n\n    for (var i=0; i< msg.mp_pairs.length; i++)\n    {\n        datavalues[i] = msg.mp_pairs[i].phase; //only linear phases\n        \n                //the frequency axis (x-axis)\n        if (\"linear\" == fft_log_freq_flag)\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toFixed(3))+\" Hz\";\n        else if (\"log\" == fft_log_freq_flag)\n        {\n            //this is currently no different from linear\n            xlabels[i] = String((msg.mp_pairs[i].index*1.25/msg.mp_pairs.length).toFixed(3))+\" Hz\";\n        }\n        else\n            xlabels[i] = \"?\"; //short, to the point.\n    }\n\n    var graphdata = [{\n    \"series\": [\"Depth Level phase angles (\"+msg.mp_pairs.length+\" pts)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n    \n    msg.payload = graphdata;\n    msg.timestamp = Date.now();\n}\n\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1559.5717849731445,
        "y": 617.6429796218872,
        "wires": [
            [
                "c97a2177beea5049",
                "42992f8cb33f27cd"
            ]
        ]
    },
    {
        "id": "cb4949a55bc606fb",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "group": "bea23e66643ca7ab",
        "order": 17,
        "width": 0,
        "height": 0,
        "name": "ui update advice",
        "label": "",
        "format": "Changes appear with next graph update",
        "layout": "row-spread",
        "className": "",
        "x": 629.6667658487959,
        "y": 1132.33401171875,
        "wires": []
    },
    {
        "id": "42992f8cb33f27cd",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "pretty time",
        "func": "delete(msg.payload);\nvar xx = Date.now();\nxx = Math.floor(xx/1000);//convert to seconds\nvar sec = xx % 60;\nxx = Math.floor(xx/60); //convert to minutes\nvar min = xx % 60;\nxx = Math.floor(xx/60); //convert to hours\nvar hrs = xx % 24;\nxx = Math.floor(xx/60); //convert to days\n\nmsg.payload = hrs+\":\"+min+\":\"+sec+\"s (UTC)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1862.952865600586,
        "y": 617.404706954956,
        "wires": [
            [
                "bac0eee676981e38"
            ]
        ]
    },
    {
        "id": "c0262b19c97b6e0e",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "group": "bea23e66643ca7ab",
        "order": 4,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "a[0] = ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1941.5715293884277,
        "y": 504.7858467102051,
        "wires": []
    },
    {
        "id": "264125ac141fcbc2",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1939.8573036193848,
        "y": 462.5001411437988,
        "wires": []
    },
    {
        "id": "d4b2aac6a976cfa1",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "add units to payload",
        "func": "\nmsg.payload = msg.payload+\" cm\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1731.5715293884277,
        "y": 504.7858467102051,
        "wires": [
            [
                "264125ac141fcbc2",
                "c0262b19c97b6e0e"
            ]
        ]
    },
    {
        "id": "395eebcf926884f5",
        "type": "ui_multistate_switch",
        "z": "7ae603f70a4e9e14",
        "d": true,
        "g": "e2a768de188dc0b8",
        "name": "Non-2^N data behaviour",
        "group": "bea23e66643ca7ab",
        "order": 18,
        "width": "6",
        "height": 1,
        "label": "Non - 2^n",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Pad",
                "value": "Pad",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Discard",
                "value": "Discard",
                "valueType": "str",
                "color": "#ff6666"
            },
            {
                "label": "Trucate",
                "value": "Truncate",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "configPOTaction",
        "x": 919.1668701171875,
        "y": 205.6667890548706,
        "wires": [
            [
                "6f0ac1cec4d5e6c0"
            ]
        ]
    },
    {
        "id": "6f0ac1cec4d5e6c0",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1099.1668701171875,
        "y": 205.6667890548706,
        "wires": []
    },
    {
        "id": "cb15c26c10b4d188",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "Discard",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Discard",
        "payloadType": "str",
        "x": 709.1668701171875,
        "y": 165.6667890548706,
        "wires": [
            [
                "395eebcf926884f5"
            ]
        ]
    },
    {
        "id": "8786065b874f69fd",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "Pad",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Pad",
        "payloadType": "str",
        "x": 699.1668701171875,
        "y": 205.6667890548706,
        "wires": [
            [
                "395eebcf926884f5"
            ]
        ]
    },
    {
        "id": "2ca49f56c7e94043",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "Truncate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "configPOTaction",
        "payload": "Truncate",
        "payloadType": "str",
        "x": 709.1668701171875,
        "y": 245.6667890548706,
        "wires": [
            [
                "395eebcf926884f5"
            ]
        ]
    },
    {
        "id": "fe487465865cbc55",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "The FFT here is made for 2^n data - choose what to do if its not",
        "info": "",
        "x": 1039.1668701171875,
        "y": 165.6667890548706,
        "wires": []
    },
    {
        "id": "a1c830f957bd3fea",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "disable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enable",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 729.1668701171875,
        "y": 305.6667890548706,
        "wires": [
            [
                "395eebcf926884f5"
            ]
        ]
    },
    {
        "id": "cb59272133e3d516",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "e2a768de188dc0b8",
        "name": "enable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enable",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 719.1668701171875,
        "y": 345.6667890548706,
        "wires": [
            [
                "395eebcf926884f5"
            ]
        ]
    },
    {
        "id": "1d6c61a9832796ed",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "isolate a0 - value only",
        "func": "var origtimestamp = msg.timestamp;\ndelete(msg.payload);\nmsg.payload = (msg.magnitudes[0]).toFixed(1);\nmsg.timestamp = origtimestamp;\nnode.status({\"text\":\"a0=\"+msg.payload+\" FBins:\"+msg.mp_pairs.length})\nmsg.topic = \"FFT a0\"\ndelete(msg.magnitudes);\ndelete(msg.phases);\ndelete(msg.mp_pairs);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1455.8571128845215,
        "y": 506.2143974304199,
        "wires": [
            [
                "daeeb7e04ebe07b6",
                "d4b2aac6a976cfa1",
                "c83b383690b9d184",
                "4fbcd7d17c6bfe87"
            ]
        ]
    },
    {
        "id": "daeeb7e04ebe07b6",
        "type": "ui_chart",
        "z": "7ae603f70a4e9e14",
        "d": true,
        "g": "367d603d3ebe1a2b",
        "name": "",
        "group": "bea23e66643ca7ab",
        "order": 12,
        "width": "6",
        "height": "3",
        "label": "a0(t) graph",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "512",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1706.9287109375,
        "y": 455.500093460083,
        "wires": [
            []
        ]
    },
    {
        "id": "c83b383690b9d184",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "Detect steady-state DC from FFT",
        "func": "var lastValueTracker = context.get('lastValueTracker')||\n                        { \"lastvalue\": 0, \n                            \"runningcount\": 0,\n                            \"SSdetectTest\": false,\n                            \"SScounts\": 0,\n                            \"timestamp\": Date.now() };\ncontext.set('lastValueTracker',lastValueTracker);\n\nconst triggerCount = 150; //150 is ~60 sec,  225 is ~90 seconds\n//at 2.5Hz, 750 count ~~ 5 minutes, seems reasonable\n\n    node.status({\"text\":\"value: \"+msg.payload\n                    +\" ts:\"+msg.timestamp\n    });\n    \n//msg.payload should be a numerical value\nif (Number(msg.payload))\n{\n    msg.payload = Number(msg.payload);\n    if (lastValueTracker.lastvalue == msg.payload)\n    {   //still same value\n        lastValueTracker.runningcount = 1 + lastValueTracker.runningcount;\n        \n    }\n    else\n    {   //screw it, everything is new!\n        lastValueTracker.lastvalue = msg.payload;\n        lastValueTracker.runningcount = 0;\n        lastValueTracker.SScounts = 0;\n        lastValueTracker.SSdetectTest = false;\n    }\n    \n    if (triggerCount < lastValueTracker.runningcount)\n    {\n        lastValueTracker.SSdetectTest = true;\n        lastValueTracker.SScounts++;\n    }\n        \n    lastValueTracker.timestamp = msg.timestamp;\n    context.set('lastValueTracker',lastValueTracker);\n    msg.lastValueTracker = lastValueTracker;\n    \n    if (0 < lastValueTracker.SScounts)\n    {\n        //we are in steady state  (count is greater than zero)\n        //cyan circle\n        node.status({\"text\":\"Value: \"+lastValueTracker.lastvalue+\" Count:\"+lastValueTracker.runningcount\n                            +\" SS Count:\"+lastValueTracker.SScounts,\n                 \"shape\": \"dot\",\n                 \"fill\": \"green\"\n                    });\n    } else\n    {\n        //no steady state.  \n        //red circle\n        node.status({\"text\":\"Value: \"+lastValueTracker.lastvalue+\" Count:\"+lastValueTracker.runningcount\n                            +\" SS Count:\"+lastValueTracker.SScounts,\n                 \"shape\": \"dot\",\n                 \"fill\": \"red\"\n                    });\n    }\n}\nelse\n{\n    //node.status({\"text\":\"\"});//clear\n    return null;  //reject\n}\n\nif (lastValueTracker.SSdetectTest)\n    return msg;\nelse \n    return null;//not in steady state.",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1513.3336868286133,
        "y": 332.73847579956055,
        "wires": [
            [
                "a0bc67968b69d692",
                "b64b62e49463e22b"
            ]
        ],
        "info": "This function only passes the payload \n(the a0 depth value) if the \n\ntriggerCount\n\nis reached."
    },
    {
        "id": "0ff653b8dff350df",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1963.3336868286133,
        "y": 292.73847579956055,
        "wires": []
    },
    {
        "id": "a0bc67968b69d692",
        "type": "delay",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "12",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1773.3336868286133,
        "y": 332.73847579956055,
        "wires": [
            [
                "0ff653b8dff350df",
                "7f54c870048434e3"
            ]
        ]
    },
    {
        "id": "c55dcdc3a8b52992",
        "type": "dweetio out",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "thing": "fishinator005_daily",
        "name": "Dweet to fishinator005_daily",
        "x": 2383.3336868286133,
        "y": 332.73847579956055,
        "wires": []
    },
    {
        "id": "b64b62e49463e22b",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1743.3336868286133,
        "y": 292.73847579956055,
        "wires": []
    },
    {
        "id": "7f54c870048434e3",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "reformat payload as object for dweet.io",
        "func": "var tmpobj = { \"payload\": msg.payload,\n                \"units\": msg.units,\n                \"timestamp\": msg.timestamp,\n                \"topic\": msg.topic,\n                \"comment\": \"Work in progress, timing may vary\",\n                \"super-secret code\": \"j8fnsewk347ufhgFLAW\"\n};\nmsg.payload = tmpobj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2043.3336868286133,
        "y": 332.73847579956055,
        "wires": [
            [
                "c55dcdc3a8b52992",
                "85b08dafc066cd59"
            ]
        ]
    },
    {
        "id": "89fb8b1b4220ebc3",
        "type": "ui_switch",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "label": "include a0 in magnitudes",
        "tooltip": "include or remove a0, which is probably big",
        "group": "bea23e66643ca7ab",
        "order": 8,
        "width": "6",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "Includea0",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 601.3332443237305,
        "y": 959.0004367828369,
        "wires": [
            [
                "b03f19a34aaf997c"
            ]
        ]
    },
    {
        "id": "0b01cd30185d9bd3",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 401.33324432373047,
        "y": 939.0004367828369,
        "wires": [
            [
                "89fb8b1b4220ebc3"
            ]
        ]
    },
    {
        "id": "d2dceb7b6f2e30a8",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "str",
        "x": 401.33324432373047,
        "y": 979.0004367828369,
        "wires": [
            [
                "89fb8b1b4220ebc3"
            ]
        ]
    },
    {
        "id": "7fdc85bff0fe8cc9",
        "type": "ui_switch",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "label": "Power Spectrum",
        "tooltip": "Squares of the harmonic magnitudes",
        "group": "bea23e66643ca7ab",
        "order": 9,
        "width": "6",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "PowerSpectrum",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 569.6667404174805,
        "y": 1055.6672477722168,
        "wires": [
            [
                "b03f19a34aaf997c"
            ]
        ]
    },
    {
        "id": "8f94f02204a94f05",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 399.66674041748047,
        "y": 1035.6672477722168,
        "wires": [
            [
                "7fdc85bff0fe8cc9"
            ]
        ]
    },
    {
        "id": "3277df8729dfccc8",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "str",
        "x": 399.66674041748047,
        "y": 1075.6672477722168,
        "wires": [
            [
                "7fdc85bff0fe8cc9"
            ]
        ]
    },
    {
        "id": "85b08dafc066cd59",
        "type": "file",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "fishinator005_daily log file",
        "filename": "log/fishinator005_daily.JSON.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2373.3336868286133,
        "y": 292.73847579956055,
        "wires": [
            []
        ]
    },
    {
        "id": "36b81cea4e65bac5",
        "type": "ui_button",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "un/pause FFT display ui button",
        "group": "bea23e66643ca7ab",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "un/pause FFT display",
        "color": "{{colour}}",
        "bgcolor": "{{\"#FFF0F0\"}}",
        "className": "",
        "icon": "fa-pause-circle",
        "payload": "pauseclick",
        "payloadType": "str",
        "topic": "FFTpausetoggle",
        "topicType": "str",
        "x": 1971.5241012573242,
        "y": 771.6906814575195,
        "wires": [
            [
                "0a7f2b1871654d2a"
            ]
        ]
    },
    {
        "id": "0a7f2b1871654d2a",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "FFT passthru (pauseable)",
        "func": "var currentFFPauseState = context.get('FFPauseState')||\"run\";\n    \nif (\"FFTpausetoggle\" == msg.topic)\n{\n    //msg.colour will change the button \n    if (\"pause\" == currentFFPauseState)\n    {\n        currentFFPauseState = \"run\"\n        msg.colour = \"green\";\n        msg.payload = \"running\";\n    }\n    else\n    {\n        \n        currentFFPauseState = \"pause\"  \n        msg.colour = \"red\";\n        msg.payload = \"paused\";\n    }\n    context.set('FFPauseState',currentFFPauseState);\n    node.status({\"text\": \"State: \"+currentFFPauseState, \"shape\": \"ring\", \"fill\":msg.colour});\n    //msg.payload = null;\n    return [null,msg];\n}\nelse\n{\n    if (\"pause\" == currentFFPauseState) return [null,null];\n    else return [msg,null];\n}\n\nreturn [null,null];//should have ducked out by now",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1976.5240173339844,
        "y": 705.023928642273,
        "wires": [
            [
                "0bfca062d05d2e3a",
                "198c3b65f3b1f66b"
            ],
            [
                "36b81cea4e65bac5",
                "3a9509fe3a0782ff"
            ]
        ],
        "outputLabels": [
            "passthru packet",
            "update button control"
        ]
    },
    {
        "id": "0bfca062d05d2e3a",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1996.5239486694336,
        "y": 658.3572216033936,
        "wires": []
    },
    {
        "id": "f026eb415ef86e0f",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "bab8c992c45c0254",
        "name": "FFT-based STEADY STATE depth value : LOG + DWEET",
        "info": "a0 is literally the _mean_ over the\nsize of the time-domain buffer",
        "x": 1574.7622680664062,
        "y": 247.02424335479736,
        "wires": []
    },
    {
        "id": "57529332168adc4c",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "group": "bea23e66643ca7ab",
        "order": 14,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "log(DC:AC spectral power ratio): ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 2364.8576889038086,
        "y": 948.3576183319092,
        "wires": []
    },
    {
        "id": "43273ebb74a60b92",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "floor DCACratio",
        "func": "msg.payload = (msg.DCACratio).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1884.8576889038086,
        "y": 948.3576183319092,
        "wires": [
            [
                "f5e00e10d042be31",
                "57529332168adc4c"
            ]
        ]
    },
    {
        "id": "9e6c2d8d9ff8c8fe",
        "type": "ui_chart",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "group": "bea23e66643ca7ab",
        "order": 13,
        "width": "6",
        "height": "3",
        "label": "graph: log(DC:AC power ratio)",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "log(DC:AC power ratio)",
        "dot": false,
        "ymin": "5",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2e762e",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2364.8576889038086,
        "y": 988.3576183319092,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e00e10d042be31",
        "type": "delay",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2074.8576889038086,
        "y": 988.3576183319092,
        "wires": [
            [
                "9e6c2d8d9ff8c8fe",
                "fb448a7f13323c59"
            ]
        ]
    },
    {
        "id": "9cf6986215f262fe",
        "type": "ui_slider",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "# of harmonics shown",
        "label": "# of harmonics shown",
        "tooltip": "",
        "group": "bea23e66643ca7ab",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "maxHarmonicDisplay",
        "topicType": "str",
        "min": "1",
        "max": "256",
        "step": 1,
        "className": "",
        "x": 696.333366394043,
        "y": 1282.3338871002197,
        "wires": [
            [
                "b03f19a34aaf997c"
            ]
        ]
    },
    {
        "id": "50b2a33231b06f32",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "maxHarmonicDisplay",
        "payload": "33",
        "payloadType": "num",
        "x": 459.6668014526367,
        "y": 1284.0005702972412,
        "wires": [
            [
                "9cf6986215f262fe"
            ]
        ]
    },
    {
        "id": "3a9509fe3a0782ff",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "group": "bea23e66643ca7ab",
        "order": 3,
        "width": "2",
        "height": "1",
        "name": "ui pause/run state",
        "label": "fft display",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2278.904998779297,
        "y": 737.6431980133057,
        "wires": []
    },
    {
        "id": "c0a062c9cdc4d946",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "name": "FFT - buffer input, calculate MAG + PHS",
        "info": "",
        "x": 668.6667785644531,
        "y": 454.666823387146,
        "wires": []
    },
    {
        "id": "42e5cbdc7f41c170",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "This is great for non-steady-state detection !!",
        "info": "",
        "x": 1973.1914138793945,
        "y": 913.3575668334961,
        "wires": []
    },
    {
        "id": "abcc772a5138145a",
        "type": "link out",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "Short FFT Magnitudes out",
        "mode": "link",
        "links": [
            "98bdd1bc750f4bb4"
        ],
        "x": 1838.190987110138,
        "y": 840.0241947174072,
        "wires": []
    },
    {
        "id": "104c950aac75120f",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "c0fdf8a256575b08",
        "name": "I made this 'Eye' by accident, but then loved it",
        "info": "",
        "x": 2311.500663757324,
        "y": 1160.4763259887695,
        "wires": []
    },
    {
        "id": "4fbcd7d17c6bfe87",
        "type": "link out",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "SEcond Output - a0 only",
        "mode": "link",
        "links": [],
        "x": 1645.5001180171967,
        "y": 561.5715703964233,
        "wires": []
    },
    {
        "id": "fb448a7f13323c59",
        "type": "dweetio out",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "thing": "periodic3003s",
        "name": "dweet: periodic3003s",
        "x": 2354.8576889038086,
        "y": 1048.3576183319092,
        "wires": []
    },
    {
        "id": "9d3afa3fdfc110e5",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "group": "bea23e66643ca7ab",
        "order": 7,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "fft calc time: ",
        "format": "{{msg.fftcalcdelay}} mSec",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 824.3958435058594,
        "y": 729.7249135971069,
        "wires": []
    },
    {
        "id": "f8e02ca0fbf3f4e6",
        "type": "ui_text",
        "z": "7ae603f70a4e9e14",
        "g": "ca9eaa91e1e5454c",
        "group": "bea23e66643ca7ab",
        "order": 6,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "Data Buffer Percent Full: ",
        "format": "{{msg.fillpercent}}%",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 891.0625762939453,
        "y": 681.4144430160522,
        "wires": []
    },
    {
        "id": "df0204e9cd4a76da",
        "type": "ui_button",
        "z": "7ae603f70a4e9e14",
        "g": "d461a2ee89a36ec9",
        "name": "",
        "group": "bea23e66643ca7ab",
        "order": 15,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "clr",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 1360.141960144043,
        "y": 1274.5981588363647,
        "wires": [
            [
                "daeeb7e04ebe07b6",
                "90e977df1105fca5"
            ]
        ]
    },
    {
        "id": "da913ddf9723f31c",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "c0fdf8a256575b08",
        "name": "msg.enabled = true",
        "props": [
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2316.594957987467,
        "y": 1282.5953575719197,
        "wires": [
            [
                "c97a2177beea5049"
            ]
        ]
    },
    {
        "id": "ba08e7a090cdac9c",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "c0fdf8a256575b08",
        "name": "msg.enabled = false",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2324.025291442871,
        "y": 1318.6774110794067,
        "wires": [
            [
                "c97a2177beea5049"
            ]
        ]
    },
    {
        "id": "a4c790fb0312d13f",
        "type": "inject",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "false (initial disenable)",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 373.5556411743164,
        "y": 1214.9438257217407,
        "wires": [
            [
                "d43a2d975ce1fd3b"
            ]
        ]
    },
    {
        "id": "b03f19a34aaf997c",
        "type": "function",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "FFT Dash Options",
        "func": "var fft_log_freq_flag = flow.get('fft_log_freq_flag')||\"linear\";\nvar fft_log_magnitude_flag = flow.get('fft_log_magnitude_flag')||\"linear\";\nvar fft_include_a0_in_mags = flow.get('fft_include_a0_in_mags')||\"false\";\nvar fft_PowerSpectrum = flow.get('fft_PowerSpectrum')||\"false\";\n\nconst mostFFTBinsShown = 255;\nconst minFFTBinsShown = 1;\nvar maxHarmonicDisplay = context.get('maxHarmonicDisplay')||255;\nmsg.maxHarmonicDisplay = maxHarmonicDisplay;\n\n\n// is there some reason i didn't make this section a switch/case?\nvar foo = (\"xaxis\" == msg.topic);\nvar bar = (\"yaxis\" == msg.topic);\nvar chet = (\"Includea0\" == msg.topic);\nvar barnes = (\"PowerSpectrum\" == msg.topic);\nvar toto = (\"maxHarmonicDisplay\" == msg.topic);\n\nif (foo || bar || chet || barnes || toto) //not data, commands or whatever\n{\n    if (foo) \n    {\n        fft_log_freq_flag = msg.payload;\n        flow.set('fft_log_freq_flag',fft_log_freq_flag);\n        node.status({text: \"xaxis set to \"+fft_log_freq_flag});\n    }\n    if (bar) \n    {\n        fft_log_magnitude_flag = msg.payload;\n        flow.set('fft_log_magnitude_flag',fft_log_magnitude_flag);\n        node.status({text: \"yaxis set to \"+fft_log_magnitude_flag});\n    }\n    if (chet)\n    {\n        \n        fft_include_a0_in_mags = String(msg.payload);//fudging Boolean fudging me around\n        flow.set('fft_include_a0_in_mags',fft_include_a0_in_mags);\n        node.status({text: \"including a0 in mags: \"+fft_include_a0_in_mags});\n    }\n    if (barnes)\n    {\n        \n        fft_PowerSpectrum = String(msg.payload);//fudging Boolean fudging me around\n        flow.set('fft_PowerSpectrum',fft_PowerSpectrum);\n        node.status({text: \"Power Spectrum: \"+fft_PowerSpectrum});\n    }\n    if (toto) \n    {\n        maxHarmonicDisplay = Number(msg.payload);\n        if (minFFTBinsShown > maxHarmonicDisplay) maxHarmonicDisplay = minFFTBinsShown;\n        if (mostFFTBinsShown < maxHarmonicDisplay) maxHarmonicDisplay = mostFFTBinsShown;\n        flow.set('maxHarmonicDisplay',maxHarmonicDisplay);\n        node.status({text: \"Power maxHarmonicDisplay: \"+maxHarmonicDisplay});\n    }\n}\nelse \n    node.status({\"text\":\"Something went wrong\"})\n\nreturn msg; // just get the hell out of here; you're done",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 922.6410751342773,
        "y": 979.9262809753418,
        "wires": [
            [
                "753604be24ab68d1"
            ]
        ]
    },
    {
        "id": "753604be24ab68d1",
        "type": "debug",
        "z": "7ae603f70a4e9e14",
        "g": "1f89f3d6c980c45e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 894.307804107666,
        "y": 926.592939376831,
        "wires": []
    },
    {
        "id": "90e977df1105fca5",
        "type": "link out",
        "z": "7ae603f70a4e9e14",
        "g": "d461a2ee89a36ec9",
        "name": "FFT clear signal",
        "mode": "link",
        "links": [
            "afbf0312e4e43ff9",
            "9f1506aa7a900697",
            "dd3bed64f1dc02c6"
        ],
        "x": 1449.283579826355,
        "y": 1274.922031402588,
        "wires": []
    },
    {
        "id": "afbf0312e4e43ff9",
        "type": "link in",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "clear",
        "links": [
            "90e977df1105fca5"
        ],
        "x": 1987.2238941192627,
        "y": 593.1970138549805,
        "wires": [
            [
                "bac0eee676981e38"
            ]
        ]
    },
    {
        "id": "9f1506aa7a900697",
        "type": "link in",
        "z": "7ae603f70a4e9e14",
        "g": "367d603d3ebe1a2b",
        "name": "clear",
        "links": [
            "90e977df1105fca5"
        ],
        "x": 2085.7947998046875,
        "y": 831.7451801300049,
        "wires": [
            [
                "9e6c2d8d9ff8c8fe",
                "57529332168adc4c",
                "198c3b65f3b1f66b",
                "3a9509fe3a0782ff"
            ]
        ]
    },
    {
        "id": "974b606ce24f139c",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "g": "d461a2ee89a36ec9",
        "name": "Master FFT UI Clear",
        "info": "",
        "x": 1244.954704284668,
        "y": 1235.3823728561401,
        "wires": []
    },
    {
        "id": "dd3bed64f1dc02c6",
        "type": "link in",
        "z": "7ae603f70a4e9e14",
        "g": "c0fdf8a256575b08",
        "name": "clear",
        "links": [
            "90e977df1105fca5"
        ],
        "x": 2197.3201112747192,
        "y": 1216.9526100158691,
        "wires": [
            [
                "c97a2177beea5049"
            ]
        ]
    },
    {
        "id": "825d98ca56d52229",
        "type": "ui_ui_control",
        "z": "7ae603f70a4e9e14",
        "name": "",
        "events": "all",
        "x": 479.90055084228516,
        "y": 120.99665546417236,
        "wires": [
            []
        ]
    },
    {
        "id": "66412d83dbc58597",
        "type": "comment",
        "z": "7ae603f70a4e9e14",
        "name": "See MAN - {\"group\":{\"hide\":[\"Home_Group_2\",\"Home_Group_3\"],\"show\":[\"Home_Group_1\"]}}",
        "info": "",
        "x": 536.5441233317058,
        "y": 91.43638325246184,
        "wires": []
    },
    {
        "id": "6845cf605a2af339",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "enable + make data pretty for file log",
        "func": "\n\nvar loggingenabled = context.get('loggingenabled')||0;\nvar localcount = context.get('localcount')||0;\n\nif (\"enabledisable\" == msg.topic)\n{\n    loggingenabled = Number(msg.payload);\n    context.set('loggingenabled',loggingenabled);\n    if (loggingenabled) \n    {\n        localcount = 0; //reset count at new enable\n        context.set('localcount',localcount);\n        node.status({text: \"logging enabled\"});\n    }\n    else node.status({text: \"logging disabled\"});\n    return null;\n}\n\nif (loggingenabled) //if anything other than 0\n{\n    localcount++;\n    context.set('localcount',localcount);\n\n    var lasttimestamp = context.get('lasttimestamp')||0;\n    var lastperiod = ((msg.timestamp - lasttimestamp)).toFixed(0);\n    lasttimestamp = msg.timestamp;\n    context.set('lasttimestamp',lasttimestamp);\n\n    //if the last reading was within the last three days, keep counting\n    //at startup, the timestamp is 1970 Jan 1 00:00:00\n    if (259200 >lastperiod)  \n        node.status({text: \"count: \"+localcount+\" period: \"+lastperiod+\" ms  logging:\"+loggingenabled});\n    else\n        node.status({text: \"count: \"+localcount+\" period: <is this startup?>\"});\n    \n    return {\"payload\": { \"depth\": Number(msg.payload).toFixed(1),\n                    //\"humantime\": Date(msg.timestamp).toString('en-US'),\n                    \"timestamp\": msg.timestamp,\n                    \"measurement\": \"water tank depths\",\n                    \"units\": \"cm\",\n                    \"units_long\": \"centimetres\"\n                    },\n            \"count\": localcount\n            };\n}\nelse\n    return null;\n        ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 500,
        "wires": [
            [
                "96bd8ac6b92e01d3",
                "c96db0743c00efa6"
            ]
        ]
    },
    {
        "id": "96bd8ac6b92e01d3",
        "type": "file",
        "z": "db97f80ff5147756",
        "name": "append log/raw_depth.log.txt",
        "filename": "log/raw_depth.log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "0b78209027cff55c"
            ]
        ]
    },
    {
        "id": "0b78209027cff55c",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "d7dfb3263b32bd59",
        "type": "ui_multistate_switch",
        "z": "db97f80ff5147756",
        "name": "logging enable (depth)",
        "group": "d56303e9864f1712",
        "order": 1,
        "width": 0,
        "height": 1,
        "label": "depth logging",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": false,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Disabled",
                "value": "0",
                "valueType": "num",
                "color": "#e70808"
            },
            {
                "label": "Enabled",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            }
        ],
        "topic": "enabledisable",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "4d03adaeed1a54f3",
                "6d82068f05f82722"
            ]
        ]
    },
    {
        "id": "4b8c8a39d5886d78",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "c96db0743c00efa6",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "capture count only",
        "func": "delete(msg.payload);\nmsg.payload = msg.count\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 440,
        "wires": [
            [
                "eaf219368f685cb3"
            ]
        ]
    },
    {
        "id": "eaf219368f685cb3",
        "type": "ui_text",
        "z": "db97f80ff5147756",
        "group": "d56303e9864f1712",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "data points captured: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1340,
        "y": 440,
        "wires": []
    },
    {
        "id": "55340da0109feeab",
        "type": "file",
        "z": "db97f80ff5147756",
        "name": "append log/raw_depth.log.txt",
        "filename": "log/raw_depth.log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1340,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ab321007d4a4020a",
        "type": "ui_button",
        "z": "db97f80ff5147756",
        "name": "",
        "group": "d56303e9864f1712",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "delete depth log file (!)",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1080,
        "y": 280,
        "wires": [
            [
                "55340da0109feeab",
                "eaf219368f685cb3"
            ]
        ]
    },
    {
        "id": "45161fc14fcbd932",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "delete depth log file (!)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 320,
        "wires": [
            [
                "ab321007d4a4020a"
            ]
        ]
    },
    {
        "id": "fd5bed106df64465",
        "type": "file in",
        "z": "db97f80ff5147756",
        "name": "read log/raw_depth.log.txt",
        "filename": "log/raw_depth.log.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1650,
        "y": 320,
        "wires": [
            [
                "5a7b1c19d690a330",
                "139e08d2e4ee532c"
            ]
        ]
    },
    {
        "id": "22e971135a03b04a",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "trim fat from file make copy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "fd5bed106df64465"
            ]
        ]
    },
    {
        "id": "f318e0695f4f68fb",
        "type": "file",
        "z": "db97f80ff5147756",
        "name": "append log/raw_depth.log-RAWEST.txt",
        "filename": "log/raw_depth.log-RAWEST.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "0b11ab7b599c1101",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "JSON to ShortString",
        "func": "if (\"object\" == typeof(msg.payload) \n            && Number(msg.payload.timestamp)\n            && Number(msg.payload.depth) )\n{\n    var shorts = String(msg.payload.timestamp)+\",\"+String(msg.payload.depth);\n    delete(msg.payload);\n    msg.payload = shorts;\n    return msg;\n}\nelse return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 320,
        "wires": [
            [
                "f318e0695f4f68fb"
            ]
        ]
    },
    {
        "id": "5a7b1c19d690a330",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 280,
        "wires": []
    },
    {
        "id": "139e08d2e4ee532c",
        "type": "json",
        "z": "db97f80ff5147756",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1850,
        "y": 320,
        "wires": [
            [
                "0b11ab7b599c1101",
                "9a6f252f331b5016",
                "60cf8c6ff28ab946"
            ]
        ]
    },
    {
        "id": "f4281e963a6c62ad",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "This small tool converts the verbose JSON strings into compressed numbers and writes to a second file.",
        "info": "",
        "x": 1810,
        "y": 400,
        "wires": []
    },
    {
        "id": "9a6f252f331b5016",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 280,
        "wires": []
    },
    {
        "id": "81db4cc8084a6d3e",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "DELETE RAWEST FILE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2190,
        "y": 360,
        "wires": [
            [
                "16d139f0826732ba"
            ]
        ]
    },
    {
        "id": "16d139f0826732ba",
        "type": "file",
        "z": "db97f80ff5147756",
        "name": "append log/raw_depth.log-RAWEST.txt",
        "filename": "log/raw_depth.log-RAWEST.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 2470,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "60cf8c6ff28ab946",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "JSON to value only",
        "func": "if (\"object\" == typeof(msg.payload) \n            && Number(msg.payload.depth) )\n{\n    var shorts = String(msg.payload.depth)+\",\";\n    delete(msg.payload);\n    msg.payload = shorts;\n    return msg;\n}\nelse return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 220,
        "wires": [
            [
                "ada12c2b585219b0"
            ]
        ]
    },
    {
        "id": "ada12c2b585219b0",
        "type": "file",
        "z": "db97f80ff5147756",
        "name": "append log/raw_depth.log-VALONLY.txt",
        "filename": "log/raw_depth.log-VALONLY.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2400,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "96d6be3790ae0fd1",
        "type": "websocket in",
        "z": "db97f80ff5147756",
        "name": "incoming from Fishinator - depth packet",
        "server": "dcd4a221e6419524",
        "client": "",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "6845cf605a2af339"
            ]
        ]
    },
    {
        "id": "a6f8a2db762c2932",
        "type": "file in",
        "z": "db97f80ff5147756",
        "name": "read log/bihourly_minmax.log.txt",
        "filename": "log/bihourly_minmax.log.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 730,
        "y": 800,
        "wires": [
            [
                "2cbab4bde64a25f2"
            ]
        ]
    },
    {
        "id": "d4ad861574b14907",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "format packet for display",
        "func": "if ((undefined === msg.payload)||(null === msg.payload)||(\"\" === msg.payload)) return null;\n\n\n /*\n \nreturn {\"payload\": { \"maximum\": msg.payload.max,\n                    \"minimum\": msg.payload.min,\n                    \"timestamp\": msg.timestamp,\n                    \"measurement\": \"water tank depths\",\n                    \"units\": \"cm\",\n                    \"units_long\": \"centimetres\"\n                    }\n        };\n        */\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 800,
        "wires": [
            [
                "09d5afa8fd94d643",
                "1af9ea17a1548d4d",
                "b75a60ba3d73c75d"
            ]
        ]
    },
    {
        "id": "09d5afa8fd94d643",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 760,
        "wires": []
    },
    {
        "id": "3aaecf0291658fac",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "ij",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "d755cc58f5d2541b"
            ]
        ]
    },
    {
        "id": "2cbab4bde64a25f2",
        "type": "json",
        "z": "db97f80ff5147756",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 800,
        "wires": [
            [
                "d4ad861574b14907"
            ]
        ]
    },
    {
        "id": "eebf2381113b4180",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "Load a log file with JSON lines",
        "info": "",
        "x": 740,
        "y": 840,
        "wires": []
    },
    {
        "id": "1af9ea17a1548d4d",
        "type": "change",
        "z": "db97f80ff5147756",
        "name": "max",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "payload.timestamp",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.maximum",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "max",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 800,
        "wires": [
            [
                "2d83ddd137758979",
                "e908d2c9202a7b4b"
            ]
        ]
    },
    {
        "id": "b75a60ba3d73c75d",
        "type": "change",
        "z": "db97f80ff5147756",
        "name": "min",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "msg.payload.timestamp",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.minimum",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "min",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 840,
        "wires": [
            [
                "2d83ddd137758979",
                "e908d2c9202a7b4b"
            ]
        ]
    },
    {
        "id": "2d83ddd137758979",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 800,
        "wires": []
    },
    {
        "id": "e908d2c9202a7b4b",
        "type": "ui_chart",
        "z": "db97f80ff5147756",
        "name": "",
        "group": "de4aabe88cbd2aa6",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "file values chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1620,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "ae5dcdbae7355b7f",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "clear data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1260,
        "y": 880,
        "wires": [
            [
                "bdd31305c24200cf"
            ]
        ]
    },
    {
        "id": "bdd31305c24200cf",
        "type": "ui_button",
        "z": "db97f80ff5147756",
        "name": "clear data",
        "group": "de4aabe88cbd2aa6",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "clear data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear data",
        "topicType": "str",
        "x": 1400,
        "y": 880,
        "wires": [
            [
                "e908d2c9202a7b4b"
            ]
        ]
    },
    {
        "id": "d755cc58f5d2541b",
        "type": "ui_button",
        "z": "db97f80ff5147756",
        "name": "load 30 min file values",
        "group": "de4aabe88cbd2aa6",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "load 30 min file values",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "load",
        "topicType": "str",
        "x": 480,
        "y": 800,
        "wires": [
            [
                "a6f8a2db762c2932"
            ]
        ]
    },
    {
        "id": "fd43c8005b65333e",
        "type": "catch",
        "z": "db97f80ff5147756",
        "name": "Catch json",
        "scope": [
            "2cbab4bde64a25f2"
        ],
        "uncaught": false,
        "x": 960,
        "y": 840,
        "wires": [
            [
                "5a00cea25ac0cb8e"
            ]
        ]
    },
    {
        "id": "5a00cea25ac0cb8e",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 840,
        "wires": []
    },
    {
        "id": "26919becb3b0e845",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "now load daily values for the thing.",
        "info": "",
        "x": 420,
        "y": 680,
        "wires": []
    },
    {
        "id": "69710ff0017201a6",
        "type": "file in",
        "z": "db97f80ff5147756",
        "name": "read log/daily_minmax.log.txt",
        "filename": "log/daily_minmax.log.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 740,
        "y": 760,
        "wires": [
            [
                "2cbab4bde64a25f2"
            ]
        ]
    },
    {
        "id": "7a27de83d4c28759",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "ij",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 310,
        "y": 740,
        "wires": [
            [
                "ba82eb501e03d8ac"
            ]
        ]
    },
    {
        "id": "750c576ed1ac77a9",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "Load a log file with JSON lines",
        "info": "",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "ba82eb501e03d8ac",
        "type": "ui_button",
        "z": "db97f80ff5147756",
        "name": "load DAILY file values",
        "group": "de4aabe88cbd2aa6",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "load DAILY file values",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "load",
        "topicType": "str",
        "x": 480,
        "y": 740,
        "wires": [
            [
                "69710ff0017201a6"
            ]
        ]
    },
    {
        "id": "97f88afb09ae59b5",
        "type": "ui_button",
        "z": "db97f80ff5147756",
        "name": "Start a JSON depth logfile",
        "group": "d56303e9864f1712",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Start a JSON depth logfile",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "add_shopping_cart",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1090,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ee852ebf07be97ef",
        "type": "ui_dropdown",
        "z": "db97f80ff5147756",
        "name": "Sample Size Dropdown",
        "label": "Sample Size",
        "tooltip": "Sample Size power of 2 for FFT usage",
        "place": "Sample Size (2^n)",
        "group": "d56303e9864f1712",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "524288 (2^19)",
                "value": 524288,
                "type": "num"
            },
            {
                "label": "262144 (2^18)",
                "value": 262144,
                "type": "num"
            },
            {
                "label": "131072 (2^17)",
                "value": 131072,
                "type": "num"
            },
            {
                "label": "65536 (2^16)",
                "value": 65536,
                "type": "num"
            },
            {
                "label": "32768 (2^15)",
                "value": 32768,
                "type": "num"
            },
            {
                "label": "16384 (2^14)",
                "value": 16384,
                "type": "num"
            },
            {
                "label": "8192 (2^13)",
                "value": "8192",
                "type": "str"
            },
            {
                "label": "4096 (2^12)",
                "value": 4096,
                "type": "num"
            },
            {
                "label": "2048 (2^11)",
                "value": 2048,
                "type": "num"
            },
            {
                "label": "1024 (2^10)",
                "value": 1024,
                "type": "num"
            },
            {
                "label": "0 (off)",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 450,
        "y": 140,
        "wires": [
            [
                "18da27cb1d9b7102"
            ]
        ]
    },
    {
        "id": "d76f007f095aa2e4",
        "type": "debug",
        "z": "db97f80ff5147756",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "71dd3bd7f8cf81d9",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "set to default size (0)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "ee852ebf07be97ef"
            ]
        ]
    },
    {
        "id": "1e26595fbad910b2",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "default to disabled",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "enabledisable",
        "payload": "0",
        "payloadType": "num",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "d7dfb3263b32bd59"
            ]
        ]
    },
    {
        "id": "df1b586053960e6c",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "Enable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "enabledisable",
        "payload": "1",
        "payloadType": "num",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "d7dfb3263b32bd59"
            ]
        ]
    },
    {
        "id": "4d03adaeed1a54f3",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "passthru",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "4b8c8a39d5886d78"
            ]
        ]
    },
    {
        "id": "6c207e5405c7b0bf",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "How the loggging enable needs to go.... <todo>",
        "info": "\n1. logging gets enabled (select switch)\n2. the sample size defaults to 0\n3. if you select a valid sample size, \n        the \"start json file\" enables,\n        but otherwise disables.\n4. close file after fixed number of samples\n        is reached.",
        "x": 420,
        "y": 60,
        "wires": []
    },
    {
        "id": "9ad469fae4e9d439",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "default to disabled",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "enabledisable",
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "97f88afb09ae59b5",
                "ab321007d4a4020a"
            ]
        ]
    },
    {
        "id": "1e1ca090839fdc3f",
        "type": "inject",
        "z": "db97f80ff5147756",
        "name": "Enable",
        "props": [
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "enabledisable",
        "x": 1110,
        "y": 160,
        "wires": [
            [
                "97f88afb09ae59b5"
            ]
        ]
    },
    {
        "id": "18da27cb1d9b7102",
        "type": "function",
        "z": "db97f80ff5147756",
        "name": "check if valid",
        "func": "var val = Number(msg.payload);\nif (0 > val) return;  //dont even bother with negatives\n\n    msg.samplesize = val;\n    var logvaln = Math.log(val)/Math.log(2);\n    var logval_floor = Math.floor(logvaln);\n    if ((0 != val) && (0 == logvaln - logval_floor))  //is a non-zero whole number\n    {\n        //valid!\n        msg.payload = 1;\n        msg.enabled = 1;\n    }\n    else\n    {\n        msg.payload = 0;\n        msg.enabled = 0;\n    }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 140,
        "wires": [
            [
                "ab321007d4a4020a",
                "97f88afb09ae59b5",
                "d7dfb3263b32bd59",
                "d76f007f095aa2e4"
            ]
        ]
    },
    {
        "id": "6d82068f05f82722",
        "type": "change",
        "z": "db97f80ff5147756",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "enabledisable",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 280,
        "wires": [
            [
                "97f88afb09ae59b5",
                "ab321007d4a4020a"
            ]
        ]
    },
    {
        "id": "489ac12050516fea",
        "type": "comment",
        "z": "db97f80ff5147756",
        "name": "The Logging needs to be ENABLED",
        "info": "",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "605ebdead3aebec3",
        "type": "link in",
        "z": "ec6a1ca7762bce4e",
        "name": "depths",
        "links": [
            "f27f4d9ca1cd35bf"
        ],
        "x": 245,
        "y": 800,
        "wires": [
            [
                "cf862f0fa523ced4"
            ]
        ]
    },
    {
        "id": "a73d97a5705dcabc",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "passthru (pauseable)",
        "func": "var currentFFPauseState = context.get('FFPauseState')||\"run\";\n    \nif (\"FFTpausetoggle\" == msg.topic)\n{\n    //msg.colour will change the button \n    if (\"pause\" == currentFFPauseState)\n    {\n        currentFFPauseState = \"run\"\n        msg.colour = \"green\";\n        msg.payload = \"running\";\n    }\n    else\n    {\n        \n        currentFFPauseState = \"pause\"  \n        msg.colour = \"red\";\n        msg.payload = \"paused\";\n    }\n    context.set('FFPauseState',currentFFPauseState);\n    node.status({\"text\": \"State: \"+currentFFPauseState, \"shape\": \"ring\", \"fill\":msg.colour});\n    //msg.payload = null;\n    return [null,msg];\n}\nelse\n{\n    if (\"pause\" == currentFFPauseState) return [null,null];\n    else return [msg,null];\n}\n\nreturn [null,null];//should have ducked out by now",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 800,
        "wires": [
            [
                "906eba5f443c383d",
                "455c0ff6cd1cc043"
            ],
            [
                "b07cd71bfd5375dd",
                "18a9f7a920db48b8"
            ]
        ],
        "outputLabels": [
            "passthru packet",
            "update button control"
        ]
    },
    {
        "id": "906eba5f443c383d",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 760,
        "wires": []
    },
    {
        "id": "b07cd71bfd5375dd",
        "type": "ui_button",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "un/pause Histogram Update ui button",
        "group": "992be2bfd81a60f3",
        "order": 4,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "un/pause Histogram Update",
        "color": "{{colour}}",
        "bgcolor": "{{\"#FFF0F0\"}}",
        "className": "",
        "icon": "fa-pause-circle",
        "payload": "pauseclick",
        "payloadType": "str",
        "topic": "FFTpausetoggle",
        "topicType": "str",
        "x": 1850,
        "y": 700,
        "wires": [
            [
                "a73d97a5705dcabc"
            ]
        ]
    },
    {
        "id": "18a9f7a920db48b8",
        "type": "ui_text",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "group": "992be2bfd81a60f3",
        "order": 6,
        "width": "3",
        "height": "1",
        "name": "histogram ui pause/run state",
        "label": "Histogram State",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 2140,
        "y": 840,
        "wires": []
    },
    {
        "id": "cf862f0fa523ced4",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "input data buffer + management",
        "func": "//This function doesn't care what type of object is in the buffer\n//This function buffers whatever is in msg.payload\n//set msg.setNewBufferSize to a 2^N number for a new buffer size\n\nconst default_buffer_size = 2; //two is arbitrary and conservative\n\nvar thebuffer = context.get('buffer')||[];\nvar buffsize = context.get('bufferSize')||default_buffer_size;\n\n//only enter if() the buffer size needs a reset\nif ((thebuffer.length != buffsize)||(undefined != msg.setNewBufferSize))\n{\n    if (undefined != msg.setNewBufferSize)\n    {\n        if (Number.isFinite(msg.setNewBufferSize))\n        {\n            buffsize = msg.setNewBufferSize;\n        }\n        else\n            buffsize = default_buffer_size; //failure\n    }\n    else if (thebuffer.length != buffsize)\n    {\n        buffsize = default_buffer_size; //buffer size was reset asynchronously \n    } else\n    {\n        buffsize = default_buffer_size; //how'd we even get here?\n    }\n    \n    //check for +ve power of two (i.e., at least two)\n    if ((Math.log(buffsize)/Math.log(2) != \n            Math.floor(Math.log(buffsize)/Math.log(2)) )\n            || (2>buffsize))\n    {\n        //reject this size, get out.\n        node.warn({\"text\":\"Buffer must be power of two (2^N)\"});\n        return null;\n    }\n    \n    //at this point, everything should be OK with the new buffer size\n    thebuffer = Array(buffsize);//cross fingers for garbage collection\n    thebuffer.fill(0);\n    context.set('bufferSize',buffsize); //make sure it knows\n    context.set('buffer',thebuffer);  //store newly-sized, zeroed buffer\n    node.status({\"text\":\"New buffer size: \"+buffsize});\n    return null;  //throw away buffer-changing packets\n}\n\n//By here, the only payloads should be elements for the buffer\nthebuffer.push(msg.payload);  //put in the back of the line\nwhile (thebuffer.length > buffsize)\n{\n    thebuffer.shift(); //remove the front of the line\n}\n\n\n    msg.payload = thebuffer;\n    msg.topic = \"Entire Buffer size \"+thebuffer.length+\" released\";\n    node.status({\"text\":\"last buffer size: \"+thebuffer.length});\n\n\ncontext.set('buffer',thebuffer);\n\nif (null !== msg.payload) return msg;\nelse return null; //how'd we get here?",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "6d6351956018f3f9",
                "26edbb4cdf2b09ce"
            ]
        ]
    },
    {
        "id": "e60eb97359c23acf",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "check if valid power of two",
        "func": "var val = Number(msg.payload);\nif (0 > val) return;  //dont even bother with negatives\n\n    msg.setNewBufferSize = val;\n    \n    var logvaln = Math.log(val)/Math.log(2);\n    var logval_floor = Math.floor(logvaln);\n    var bSizeisPowerofTwo = ((0 != val) && (0 == logvaln - logval_floor));\n\n//    if (bSizeisPowerofTwo)  //is a non-zero whole number if val is 2^n\n\n    if (Number.isFinite(val))  //whatever size\n    {\n        //valid!\n        msg.payload = 1;\n        msg.enabled = 1;\n    }\n    else\n    {\n        msg.payload = 0;\n        msg.enabled = 0;\n    }\n\n//set a new BUFFER size (stored in msg.setNewBufferSize)\n//if msg.payload or msg.enabled are equal to 0, the size is not valid\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 816.6666107177734,
        "y": 956.6666927337646,
        "wires": [
            [
                "cf862f0fa523ced4"
            ]
        ]
    },
    {
        "id": "12c159d7574fda4c",
        "type": "ui_dropdown",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "Sample Size Dropdown",
        "label": "Samples",
        "tooltip": "Number of data points used to make histogram",
        "place": "Sample Size (2^n)",
        "group": "992be2bfd81a60f3",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "524288 (2^19)",
                "value": 524288,
                "type": "num"
            },
            {
                "label": "262144 (2^18)",
                "value": 262144,
                "type": "num"
            },
            {
                "label": "131072 (2^17)",
                "value": 131072,
                "type": "num"
            },
            {
                "label": "65536 (2^16)",
                "value": 65536,
                "type": "num"
            },
            {
                "label": "32768 (2^15)",
                "value": 32768,
                "type": "num"
            },
            {
                "label": "16384 (2^14)",
                "value": 16384,
                "type": "num"
            },
            {
                "label": "8192 (2^13)",
                "value": "8192",
                "type": "str"
            },
            {
                "label": "4096 (2^12)",
                "value": 4096,
                "type": "num"
            },
            {
                "label": "2048 (2^11)",
                "value": 2048,
                "type": "num"
            },
            {
                "label": "1024 (2^10)",
                "value": 1024,
                "type": "num"
            },
            {
                "label": "512 (2^9)",
                "value": 512,
                "type": "num"
            },
            {
                "label": "256 (2^8)",
                "value": 256,
                "type": "num"
            },
            {
                "label": "128 (2^7)",
                "value": 128,
                "type": "num"
            },
            {
                "label": "64 (2^6)",
                "value": 64,
                "type": "num"
            },
            {
                "label": "32 (2^5)",
                "value": 32,
                "type": "num"
            },
            {
                "label": "16 (2^4)",
                "value": 16,
                "type": "num"
            },
            {
                "label": "8 (2^3)",
                "value": 8,
                "type": "num"
            },
            {
                "label": "4 (2^2)",
                "value": 4,
                "type": "num"
            },
            {
                "label": "2 (2^1)",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 796.6666107177734,
        "y": 996.6666927337646,
        "wires": [
            [
                "e60eb97359c23acf"
            ]
        ]
    },
    {
        "id": "b98717b61fcb9784",
        "type": "inject",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "set to default size (32)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "32",
        "payloadType": "num",
        "x": 766.6666107177734,
        "y": 916.6666927337646,
        "wires": [
            [
                "12c159d7574fda4c"
            ]
        ]
    },
    {
        "id": "6d6351956018f3f9",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1013.3332977294922,
        "y": 868.3333606719971,
        "wires": []
    },
    {
        "id": "26edbb4cdf2b09ce",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "Histogram construction and Control",
        "func": "var depth_array = Array(msg.payload);\nconst LOWEST_DEPTH = 250;\n\n//var histBins = context.get('histBins')||null;\nvar histBins;\nif (null == histBins)\n{\n    histBins = Array(300);\n    histBins.fill(0);\n}\n\n//This is really tailored to my ONE SPECIFIC APPLICATION\n\nif (1 || \"reset\" == msg.topic)\n{\n    //sets everything to zero\n    histBins.forEach( (element,index) => histBins[index]=0  );\n}\n\n//count the depth readings into the bins\n//range of depths is 25.0 to 55.0, so 250 to 550.  subtract 250 for 0-300 bins.\ndepth_array[0].forEach( element => {  var localindex = parseInt(10*Number(element));\n                                   if (Number.isFinite(localindex)) \n                                    {\n                                        localindex = localindex - LOWEST_DEPTH; //bottom measured value\n                                        histBins[localindex]++; \n                                        //node.status({\"text\":\"last histgram bin's count: \"+histBins[localindex]}) \n                                    }\n                                });\n            \n//pull out only the non-zero bins for use                \nvar nonzeroBins = [];\nvar maxcount = 0;var bestBin = 0; var mindepth = 9999999999; var maxdepth = 0;\nhistBins.forEach( (element,index) => { \n                                            var depthindex = (index + LOWEST_DEPTH)/10; //bottom measured value\n                                            if (0 < element)\n                                            {\n                                                nonzeroBins.push([ depthindex , element ] );\n                                                \n                                                if (mindepth > depthindex) \n                                                {\n                                                    mindepth = JSON.parse(JSON.stringify(depthindex)); //for no RAISIN!\n                                                }\n                                                if (maxdepth < depthindex) \n                                                {\n                                                    maxdepth = depthindex;\n                                                }\n                                                \n                                                //the following could be in or out of the loop,\n                                                //but will get executed less often here\n                                                if (maxcount < element) \n                                                {\n                                                   maxcount = element;\n                                                    bestBin = depthindex;\n                                                } \n                                            }\n                                    });\n                                    \nnode.status({\"text\":\"#of Bins: \"+(1+nonzeroBins.length)\n        + \" --  maxBinCount ratio = \"+maxcount+\" / \"+depth_array[0].length\n        + \" -- bestBin: \"+bestBin+\" cm\"\n}) \n\n\n//msg.histBins = histBins;\nmsg.nonzeroBins = nonzeroBins;\nmsg.maxdepth = maxdepth;\nmsg.mindepth = mindepth;\nmsg.bestBin = bestBin;\nmsg.maxcount = maxcount;\n\n//IF YOU WANT A RUNNING COUNT, UNCOMMENT THIS\n//otherwise, the output will only be the histogram of the values in this array\n\n//context.set('histBins',histBins);  //this will preserve a running count\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 800,
        "wires": [
            [
                "90d92b2b07adb0bc",
                "0ef0c2259e4435ba",
                "9fa2b91a88909f13"
            ]
        ]
    },
    {
        "id": "90d92b2b07adb0bc",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1388.3333587646484,
        "y": 760.0001277923584,
        "wires": []
    },
    {
        "id": "31a4582d4b7d4c02",
        "type": "comment",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "Create a histogram from an array of values - output non-zero bins",
        "info": "",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "db1f28774ce1c4f5",
        "type": "comment",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "Can also work as single-value inputs with running buffer",
        "info": "needs bit of tweak, code already there",
        "x": 860,
        "y": 760,
        "wires": []
    },
    {
        "id": "0ef0c2259e4435ba",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "prep HISTOGRAM for dashboard ui graph",
        "func": "var config_A = context.get('config_A')||\"false\";\n\nlocalArray = msg.nonzeroBins;\n\nif ( !Array.isArray(localArray) ) {node.warn({\"text\":\"Warning: missing Bins array\"});return null;}\n\nif (\"config_A\" == msg.topic) //not data, commands or whatever\n{   //Function config\n    config_A = String(msg.payload);//fudging Boolean fudging me around\n    context.set('config_A',config_A);   \n    return null; // just get the hell out of here; you're done\n}\nelse\n{\n    var datavalues = new Array(localArray.length);\n    var xlabels = new Array(localArray.length);\n    var titlelabel = \"\";\n    \n    var SteadyState_boo = 0;\n    if (0 == localArray.length) {\n        //in javascript you can just throw new subscripts in there.\n        datavalues.push(0); //heyyyyy! the Fonz!\n        xlabels.push(\"O.O.Range  (bin < 25.0cm || bin > 55.0cm)\");\n    } else {\n        var mmin = 9999.9, mmax = 0.0;\n        for (var i=0; i< localArray.length; i++)\n        {\n            titlelabel = \"\";\n            datavalues[i] = (localArray[i])[1]; //in count\n            var tmplblval = (localArray[i])[0].toFixed(1);\n            xlabels[i] = String(tmplblval)+\"\";\n            if (mmin > tmplblval ) mmin = tmplblval;\n            if (mmax < tmplblval) mmax = tmplblval;\n        }\n        \n        //GENERAL NOTE: This is a crappy method, time needs\n        //                  to be included.\n        //this is empirically derived, sensor accurate +-0.2cm\n        // the 0.6 version has too much noise to be useful\n        //if (0.6 >= (mmax-mmin)) SteadyState_boo = 1;\n        // the 0.7 version is better, but not much\n        //if (0.7 >= (mmax-mmin)) SteadyState_boo = 1;\n        // 0.8 still too noisy on detecting \"not steady state\"\n        if (1.0 >= (mmax-mmin)) SteadyState_boo = 1;\n        //node.warn(\"max: \"+mmax+\"   min: \"+mmin);\n    }\n\n    var graphdata = [{\n    \"series\": [\"Depth Histogram (\"+localArray.length+\" bins)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n\n    msg.payload = graphdata;\n    msg.timestamp = Date.now();\n    msg.steadystatedetected = SteadyState_boo;\n}\n\nmsg.label = \"Depth Histogram\"+titlelabel;\n\nnode.status({\"text\":\"In Steady State : \"+SteadyState_boo+\"\"}) \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 800,
        "wires": [
            [
                "8e41708877b1608a",
                "a73d97a5705dcabc",
                "ac7e53c2dfc9a8a8"
            ]
        ]
    },
    {
        "id": "455c0ff6cd1cc043",
        "type": "ui_chart",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "histo bar graph",
        "group": "992be2bfd81a60f3",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "{{msg.label}}",
        "chartType": "bar",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "histogram goes here",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "256",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2100,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "25443186c0bec9ab",
        "type": "comment",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "This number doesn't have to be a power of two, I just copied the code from the FFT",
        "info": "",
        "x": 916.6666107177734,
        "y": 1056.6666927337646,
        "wires": []
    },
    {
        "id": "8e41708877b1608a",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 760,
        "wires": []
    },
    {
        "id": "9fa2b91a88909f13",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "v2: prep HISTOGRAM-y for dashboard ui graph",
        "func": "const highCountOf32 = 28; //how many votes is declared winner\n\nvar config_A = context.get('config_A')||\"false\";\n\nlocalArray = msg.nonzeroBins;\n\nif ( !Array.isArray(localArray) ) {node.warn({\"text\":\"Warning: missing Bins array\"});return [null,null];}\nif ( 0 == (localArray).length ) {/*node.warn({\"text\":\"Warning: zero Bins array\"});*/return [null,null];}\n\nif (\"config_A\" == msg.topic) //not data, commands or whatever\n{   //Function config\n    config_A = String(msg.payload);//fudging Boolean fudging me around\n    context.set('config_A',config_A);   \n    return null; // just get the hell out of here; you're done\n}\nelse\n{\n    var datavalues = new Array(localArray.length);\n    var xlabels = new Array(localArray.length);\n    var bucketSeries = new Array(localArray.length);\n    var titlelabel = \"\";\n    var graphdatum = {};\n    var indexOfLargest = 0;\n    \n    if (0 == localArray.length) {\n        //we should never have a zero length array\n        //in javascript you can just throw new subscripts in there.\n        datavalues.push(0); //heyyyyy! the Fonz!\n        node.warn(\"localArray.length == 0\");\n        xlabels.push(\"O.O.Range  (bin < 25.0cm || bin > 55.0cm)\");\n    } else {\n        for (var i=0; i< localArray.length; i++)\n        {\n            titlelabel = \"\";\n            datavalues[i] = (localArray[i])[1]; //in counts\n            xlabels[i] = String((localArray[i])[0].toFixed(1))+\"\";\n            //each bucket gets its own series name\n            bucketSeries[i] = (localArray[i])[0].toFixed(1);\n            \n            //which bucket has the highest count?\n            if (datavalues[i] > datavalues[indexOfLargest])\n                indexOfLargest = i;\n            \n            //send data to graph one at a time\n            graphdatum = [{\n                \"topic\": bucketSeries[i],\n                \"payload\":  datavalues[i],\n                \"timestamp\": msg.timestamp\n                //\"labels\": xlabels\n             }];\n            graphdatum.extravalue = indexOfLargest;\n            node.send([graphdatum,null]);\n        }\n        \n        \n    }\n    var steady_state_msg = {};\n    if (highCountOf32 <  ((localArray[indexOfLargest])[1]) )\n    {\n        //with 32 bins, consider highCountOf32 to be \"high agreement\"\n        steady_state_msg = [{\n            \"payload\": (localArray[indexOfLargest])[0],\n            \"steadystate\": true,\n            \"timestamp\": msg.timestamp,\n            \"votes32\": ((localArray[indexOfLargest])[1]),\n            \"votes_threshold\": highCountOf32\n        }];\n        node.send([null,steady_state_msg]);\n    }\n    /*\n    else \n    {\n        steady_state_msg = [{\n            \"steadystate\": false,\n            \"payload\": 0,\n            \"timestamp\": msg.timestamp\n        }];\n    }*/\n\n    //node.send([null,steady_state_msg]);\n    \n    node.done();\n    return;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1516.666561126709,
        "y": 928.3333578109741,
        "wires": [
            [
                "9a243e1b6bdcd220"
            ],
            [
                "432d1a40.c81184",
                "9a243e1b6bdcd220"
            ]
        ],
        "outputLabels": [
            "histogram count array 4 graph",
            "SS data log packet"
        ]
    },
    {
        "id": "9a243e1b6bdcd220",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1824.9998970031738,
        "y": 928.3333539962769,
        "wires": []
    },
    {
        "id": "61267df0a036de68",
        "type": "dweetio out",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "thing": "fishinator005-stabledepth",
        "name": "fishinator005-stabledepth",
        "x": 1889.999659538269,
        "y": 1168.3332500457764,
        "wires": []
    },
    {
        "id": "030834c3dbd6b832",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1825.0000686645508,
        "y": 1219.999677658081,
        "wires": []
    },
    {
        "id": "432d1a40.c81184",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "put entire object in new payload",
        "func": "msg.depth = msg.payload;\n\nvar tmp = JSON.stringify(msg);\n\nmsg.payload = JSON.parse(tmp);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1449.9999771118164,
        "y": 1173.333209991455,
        "wires": [
            [
                "61267df0a036de68",
                "030834c3dbd6b832",
                "a36f4b24f2a48968"
            ]
        ]
    },
    {
        "id": "e476d7169c25a1a5",
        "type": "file",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "Depths/steady-state_depths-json.txt",
        "filename": "/home/mintuser/.node-red/log/steady-state_depths-json.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1924.1667337417603,
        "y": 1119.9999141693115,
        "wires": [
            [
                "a95c28559e1bec5c"
            ]
        ]
    },
    {
        "id": "9391a398c1695c54",
        "type": "catch",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "catch v2: prep",
        "scope": [
            "9fa2b91a88909f13"
        ],
        "uncaught": false,
        "x": 1404.1665973663328,
        "y": 973.3333765665689,
        "wires": [
            [
                "f0d5851874134cac"
            ]
        ]
    },
    {
        "id": "f0d5851874134cac",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1542.4998817443848,
        "y": 973.3333349227905,
        "wires": []
    },
    {
        "id": "a36f4b24f2a48968",
        "type": "delay",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "1 hr filter",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1717.4998979568481,
        "y": 1143.3332901000977,
        "wires": [
            [
                "e476d7169c25a1a5"
            ]
        ],
        "l": false
    },
    {
        "id": "a95c28559e1bec5c",
        "type": "debug",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2154.999885559082,
        "y": 1111.666540145874,
        "wires": []
    },
    {
        "id": "d86ede1b52fa50fd",
        "type": "ui_led",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "order": 5,
        "group": "992be2bfd81a60f3",
        "width": "3",
        "height": "1",
        "label": "Steady State {{msg.payload}}",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 2181.666488647461,
        "y": 883.3334426879883,
        "wires": []
    },
    {
        "id": "ac7e53c2dfc9a8a8",
        "type": "change",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "msg adapter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "steadystatedetected",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1830,
        "y": 860,
        "wires": [
            [
                "dd1adbc03a28a875"
            ]
        ]
    },
    {
        "id": "dd1adbc03a28a875",
        "type": "function",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "0/1-false/true",
        "func": "if (msg.payload) x = true;\nelse x = false;\ndelete(msg.payload);\nmsg.payload = x;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2021.666488647461,
        "y": 883.3334426879883,
        "wires": [
            [
                "d86ede1b52fa50fd"
            ]
        ]
    },
    {
        "id": "d1da8064cb64cf4c",
        "type": "comment",
        "z": "ec6a1ca7762bce4e",
        "g": "a23c0834275c9395",
        "name": "logfile and DWEET",
        "info": "",
        "x": 1749.438720703125,
        "y": 1086.1401748657227,
        "wires": []
    },
    {
        "id": "6aeabcea728097b2",
        "type": "file in",
        "z": "a33e4f285e34df02",
        "name": "import raw cal data",
        "filename": "caldata/cal_000.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "2c51bf281152b265",
                "e6af86e35c21c2c9"
            ]
        ]
    },
    {
        "id": "084ca6f248bcd25f",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "6aeabcea728097b2"
            ]
        ]
    },
    {
        "id": "f91cbe8918f78984",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 120,
        "wires": []
    },
    {
        "id": "2c51bf281152b265",
        "type": "function",
        "z": "a33e4f285e34df02",
        "name": "Convert my raw file to JSON data",
        "func": "if (\"\"==msg.payload) return null;\n\nconst DEFAULT_VOLUME = 2.00; //in litres, 3 sig figs\n\n//if first character is #\nif ('#' == (msg.payload).charAt(0)) \n{\n    context.set('previousvalue',0); //reset if new group of data.\n    return null;\n}\n\n\nvar myValue = Number(msg.payload);\n\nnode.status({\"text\": myValue});\n\nif ((60 < myValue)||(10 > myValue)) return null;  //anything else most likely real\n\nvar myPreviousValue = context.get('previousvalue')||0;\n\nif (0 == myPreviousValue) \n{\n    context.set('previousvalue',myValue);\n    return null; //no computation to be had.\n}\n\n//JSON format\nvar mySingleDatumObject = {   \"hlower\": String(myPreviousValue),\n                    \"hhigher\": String(myValue),\n                    \"deltaVol\": String(DEFAULT_VOLUME) };\n\ndelete(msg.filename);\nmsg.topic = \"Single Volume Calibration Datum\"\nmsg.payload = { \"Bins\": JSON.stringify(mySingleDatumObject)};\n\ncontext.set('previousvalue',myValue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 120,
        "wires": [
            [
                "2e5a79b579d475c6",
                "a1773ab6c4e949f8"
            ]
        ]
    },
    {
        "id": "070c56a0464eff80",
        "type": "file",
        "z": "a33e4f285e34df02",
        "name": "output datum to caldata/main_volume_cal_data-json.txt",
        "filename": "caldata/main_volume_cal_data-json.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "f91cbe8918f78984"
            ]
        ]
    },
    {
        "id": "2e5a79b579d475c6",
        "type": "json",
        "z": "a33e4f285e34df02",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "070c56a0464eff80"
            ]
        ]
    },
    {
        "id": "a1773ab6c4e949f8",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "e6af86e35c21c2c9",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "dd7a43048925f821",
        "type": "file in",
        "z": "a33e4f285e34df02",
        "name": "read (existing) main Volume Calibration Data",
        "filename": "caldata/main_volume_cal_data-json.txt",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 590,
        "y": 400,
        "wires": [
            [
                "9c34e4b78b73e57b",
                "3b237033a5576c9c"
            ]
        ]
    },
    {
        "id": "d5a9ef64e1936606",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 400,
        "wires": [
            [
                "dd7a43048925f821"
            ]
        ]
    },
    {
        "id": "2bb4278e8a486599",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 480,
        "wires": []
    },
    {
        "id": "eba023ecfcf1ddfd",
        "type": "function",
        "z": "a33e4f285e34df02",
        "name": "init Calibration Bin Storage",
        "func": "/*\n\n# of Bins = (hhigherMax - hlowerMin)/0.1;\n\n\n*/\n\nconst binMax = 55.0;\nconst binMin = 25.0;\nconst binSize = 0.1;\nconst numberBins = 1+(binMax - binMin)/binSize;  //explicit for clarity.\nvar Bins = new Array(numberBins); \n\n//I'd rather use Array.fill() or Array.forEach();\nfor (var i = 0; i < numberBins; i++)\n{\n    var mySmallObject = { \"Bin\": String(binMin+i*binSize),\n                            \"Votes\":\"0\",\n                            \"meanVol\":\"0\",\n                            \"binIndex\":String(i) };\n    Bins[i] = mySmallObject;\n}\n\ncontext.set('VolCalBins',Bins); \n\nmsg.payload = { \"Bins\": JSON.stringify(Bins) } ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "314fdc503af78f17"
            ]
        ]
    },
    {
        "id": "5c907d1df5817f10",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "eba023ecfcf1ddfd"
            ]
        ]
    },
    {
        "id": "51d3843c7657af79",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "314fdc503af78f17",
        "type": "file",
        "z": "a33e4f285e34df02",
        "name": "new caldata/running_bin_votes-json.txt",
        "filename": "caldata/running_bin_votes-json.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 280,
        "wires": [
            [
                "51d3843c7657af79"
            ]
        ]
    },
    {
        "id": "3a9a611cfd9263db",
        "type": "file in",
        "z": "a33e4f285e34df02",
        "name": "read caldata/running_bin_votes.txt",
        "filename": "caldata/running_bin_votes-json.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 680,
        "y": 480,
        "wires": [
            [
                "4dd380150244bda0"
            ]
        ]
    },
    {
        "id": "48036a5b77e5088e",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "Raw Cal data expected in caldata/cal_000.txt",
        "info": "",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "8bd1be6bb46252f2",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "Initialize all the Depth Volume Voting Bins",
        "info": "",
        "x": 300,
        "y": 240,
        "wires": []
    },
    {
        "id": "9871d7c5807b1e23",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "Read Current Volume Cal Data - Sort into Bins from ",
        "info": "",
        "x": 330,
        "y": 360,
        "wires": []
    },
    {
        "id": "9c34e4b78b73e57b",
        "type": "function",
        "z": "a33e4f285e34df02",
        "name": "mv payload to cal data element",
        "func": "var x = msg.payload;\nnode.warn({\"x text\":x});\n\nvar y = String(x);\nnode.warn({\"y text\":y});\n\n\nreturn null;\n\nvar firstobject = JSON.parse(x);\nnode.warn({\"firstobject text\":firstobject});\nmsg.calibration_data = firstobject.Bins;\ndelete(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "3a9a611cfd9263db",
                "e2f0881a0053e765"
            ]
        ]
    },
    {
        "id": "4dd380150244bda0",
        "type": "function",
        "z": "a33e4f285e34df02",
        "name": "mv payload to bin_votes element",
        "func": "var x = msg.payload;\nvar firstobject = JSON.parse(x); //firstobject\nvar firstarr = firstobject.Bins;\n\nmsg.bin_votes = firstarr.length;\n\ndelete(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "2bb4278e8a486599",
                "22737e7273e8327c"
            ]
        ]
    },
    {
        "id": "22737e7273e8327c",
        "type": "function",
        "z": "a33e4f285e34df02",
        "name": "Fill Bins from Data",
        "func": "msg.payload = \"T.B.A.\";\nmsg.topic = \"I haven't written this code yet\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 580,
        "wires": [
            [
                "c6e3477ee4345387"
            ]
        ]
    },
    {
        "id": "c6e3477ee4345387",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 580,
        "wires": []
    },
    {
        "id": "e2f0881a0053e765",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 400,
        "wires": []
    },
    {
        "id": "edbd7783e3f1a6b4",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "3a9a611cfd9263db"
            ]
        ]
    },
    {
        "id": "95f2f7d83f361780",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "STEP 1: ",
        "info": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "3c1467d0b74b7ea3",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "STEP 2: ",
        "info": "",
        "x": 100,
        "y": 280,
        "wires": []
    },
    {
        "id": "f0fc11f95494b969",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "STEP 3: ",
        "info": "",
        "x": 100,
        "y": 400,
        "wires": []
    },
    {
        "id": "ed6114984b1044ee",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "22737e7273e8327c"
            ]
        ]
    },
    {
        "id": "9ee8c2f5be399547",
        "type": "inject",
        "z": "a33e4f285e34df02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 960,
        "y": 160,
        "wires": [
            [
                "384cd8183213e836"
            ]
        ]
    },
    {
        "id": "384cd8183213e836",
        "type": "file",
        "z": "a33e4f285e34df02",
        "name": "DELETE datum to caldata/main_volume_cal_data-json.txt",
        "filename": "caldata/main_volume_cal_data-json.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1270,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f95a2237d172309c",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "JSON ERROR right here still",
        "info": "",
        "x": 1060,
        "y": 360,
        "wires": []
    },
    {
        "id": "3b237033a5576c9c",
        "type": "debug",
        "z": "a33e4f285e34df02",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 360,
        "wires": []
    },
    {
        "id": "16ec9539ea730ce4",
        "type": "comment",
        "z": "a33e4f285e34df02",
        "name": "THIS SERVICE **NOT** AVAILABLE ON DASHBOARD OR IP TUNNEL - here only",
        "info": "********",
        "x": 295,
        "y": 22.723236083984375,
        "wires": []
    },
    {
        "id": "5a06f5e05cfe740e",
        "type": "ui_heat_map",
        "z": "7365b264de2bdff4",
        "group": "f2720420ca6aabc2",
        "order": 1,
        "width": "6",
        "height": "4",
        "name": "heat map",
        "rows": "3",
        "columns": "3",
        "minMax": false,
        "minimumValue": 0,
        "maximumValue": 0,
        "backgroundType": "color",
        "backgroundColor": "#dafbfb",
        "image": "never",
        "radius": "3",
        "opacity": 0.6,
        "blur": 0.85,
        "showValues": false,
        "gridType": "none",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "dcc852f8fd541ba6"
            ]
        ]
    },
    {
        "id": "9f55d20f5c603ceb",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "inject basic 3x3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "rows",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "columns",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[0,1,0,1,2,1,0,1,0]",
        "payloadType": "jsonata",
        "x": 980,
        "y": 620,
        "wires": [
            [
                "5a06f5e05cfe740e"
            ]
        ]
    },
    {
        "id": "dcc852f8fd541ba6",
        "type": "debug",
        "z": "7365b264de2bdff4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 480,
        "wires": []
    },
    {
        "id": "f6bf012136f5d117",
        "type": "function",
        "z": "7365b264de2bdff4",
        "name": "heat map: convert data for rolling FFT",
        "func": "//function isNumber - detects if something is an actual number, and not infinite, etc.\n//var isNumber = function isNumber(value) {return typeof value === 'number' && isFinite(value);}\n//object to send to heat map\n    const dfHarmonicRows = 75; //arbitrary //these are the harmonics - ROWS\n    const dfmaxHeatTimeCols = 150; //arbitrary  //this is time length - COLUMNS\nvar maxHeatTimeCols = context.get('maxHeatTimeCols')||dfmaxHeatTimeCols;\nvar maxHarmonicRows = context.get('maxHarmonicRows')||dfHarmonicRows; \n\n\nif (\"maxHarmonicDisplay\" == msg.topic)\n{/*\n        heatmapRows = Number(msg.payload);\n        if (heatmapRows < maxHarmonicRows) maxHarmonicRows = heatmapRows;\n        \n        if (2 > maxHarmonicRows) maxHarmonicRows = 2;\n        context.set('maxHarmonicRows',maxHarmonicRows);\n            context.set('lastHeatmap',[]);//blow away the last heat map\n        node.warn({\"text\": \"new harmonic frequency limit = \"+maxHarmonicRows +\" harmonics/rows\"})\n        //done, get out\n        \n    return {\"payload\":[],\"rows\":0,\"columns\":0};\n    */\n    return null;\n}\nelse if (\"maxTimeDisplay\" == msg.topic)\n{\n    //TODO\n    /*\n        heatmapCols = Number(msg.payload);\n        if (heatmapCols < maxHeatTimeCols) maxHeatTimeCols = heatmapCols;\n        \n        if (2 > maxHeatTimeCols) maxHeatTimeCols = 2;\n        context.set('maxHeatTimeCols',maxHeatTimeCols);\n    context.set('lastHeatmap',[]);//blow away the last heat map\n        node.warn({\"text\": \"new time history limit = \"+maxHeatTimeCols +\" samples\"})\n        //done, get out\n        \n    return {\"payload\":[],\"rows\":0,\"columns\":0};\n      */ \n        return null;\n}\nelse if (\"reset\" == msg.topic)\n{\n    //node.warn({\"text\":\"There is no reset feature.\"})\n    //new Array(msg.columns*msg.rows).fill(0);\n    context.set('lastHeatmap',[]);//blow away the last heat map\n    return {\"payload\":[],\"rows\":0,\"columns\":0};\n}\nelse\n{   //this is a frequency magnitude payload\n\n    //don't let data exceed grid sizes\n\n    var localgd = msg.payload; //something magic about that local variable\n    \n    node.status({\"text\":\"typeof payload = \"+typeof localgd});//+\"  val: \"+value});\n    \n    if ('object' != typeof localgd)\n    {\n        node.warn({\"text\":\"payload not object\"});\n        return null;\n    }\n    \n    if (false == Array.isArray(localgd[0].data[0])) //data is the array of values\n    {\n        node.warn({\"text\":\"payload not array\"});\n        return null;\n    }\n \n    node.status({\"text\":\"localgd[0].data[0] is type \"+typeof localgd[0].data[0]});\n\n    //if magnitudes array is larger than preconfigured Rows, limit to Rows\n    //otherwise, limit to the array length\n    if (maxHarmonicRows < localgd[0].data[0].length) msg.rows = maxHarmonicRows;\n    else msg.rows = localgd[0].data[0].length;\n    \n    msg.columns = maxHeatTimeCols;\n    \n    //get last heatmap, or a new one filled with zeros\n    var heatmap = context.get('lastHeatmap')||new Array(msg.columns*msg.rows).fill(0);\n    //if the old heatmap is the wrong size, discard and start a new one.\n    if (msg.columns*msg.rows != heatmap.length)\n    {\n        //fix heatmap\n        //this shouldn't happen often enough to care about garbage collection\n        node.warn({\"text\": \"Fixing heatmap size to \"\n                            +msg.columns*msg.rows+\" (\"\n                            +msg.rows+\" rows, \"+msg.columns+\" cols)\"});\n        heatmap = new Array(msg.columns*msg.rows).fill(0);\n        node.warn({\"text\": \"New heatmap size: \"+heatmap.length })\n    }\n\n    //fill in the heatmap, column by column\n \n    //starting at the end (right), \n    //fill in the columns with with the previous (left) columns, \n    //repeat\n    for (c = msg.columns-1; c > 0  ; c--)\n    {\n        for (r = 0; r < msg.rows-1; r++)\n        {\n            heatmap[r+ c*msg.rows] = heatmap[r+ (c-1)*msg.rows];\n        }\n    }\n\n    //fill in the new first column\n    for (var r = 0; r < msg.rows-1; r++)\n       heatmap[r] = 1000*(localgd[0].data[0])[r];\n   \n    msg.payload = heatmap;\n    context.set('lastHeatmap',heatmap);\n}\n\nreturn msg;\n\n\n/* // the test inject\nmsg.payload = [0,1,0,1,2,1,0,1,0,0,0,0,0,0,0,0]\nmsg.rows =\nmsg.columns\n*/\n\n\n//This is the structure the incoming msg.payload should follow:\n\n/*\n    var graphdata = [{\n    \"series\": [\"Depth Level FFT (\"+msg.mp_pairs.length+\" pts)\"],\n    \"data\":  [datavalues],\n    \"labels\": xlabels\n    }];\n    */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 480,
        "wires": [
            [
                "9870f5775eb3387a",
                "5a06f5e05cfe740e"
            ]
        ]
    },
    {
        "id": "dc7363df15ef406a",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "test graph data inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{     \"series\": [\"Test Data\"],     \t        \"data\":  [0,1,2,3,4],     \t        \"labels\": [\"a\",\"b\",\"c\",\"d\",\"e\"] }]",
        "payloadType": "jsonata",
        "x": 550,
        "y": 480,
        "wires": [
            [
                "f6bf012136f5d117"
            ]
        ]
    },
    {
        "id": "9870f5775eb3387a",
        "type": "debug",
        "z": "7365b264de2bdff4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1181.666660308838,
        "y": 436.6666793823242,
        "wires": []
    },
    {
        "id": "82a573232a635bb5",
        "type": "comment",
        "z": "7365b264de2bdff4",
        "name": "make a rolling FFT out of a heat map",
        "info": "",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "e392efeaa0daf75b",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "inject empty array",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "rows",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "columns",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "[]",
        "payloadType": "jsonata",
        "x": 970,
        "y": 580,
        "wires": [
            [
                "5a06f5e05cfe740e"
            ]
        ]
    },
    {
        "id": "1c49a3f04a6aa212",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "enable",
        "props": [
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 950,
        "y": 660,
        "wires": [
            [
                "5a06f5e05cfe740e"
            ]
        ]
    },
    {
        "id": "d331b8a4849c9908",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "disable",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 950,
        "y": 700,
        "wires": [
            [
                "5a06f5e05cfe740e"
            ]
        ]
    },
    {
        "id": "a4a50f4c6058d109",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "maxHarmonicDisplay",
        "payload": "100",
        "payloadType": "num",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "f6bf012136f5d117"
            ]
        ]
    },
    {
        "id": "79f02285361d6117",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "test graph zero inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{     \"series\": [\"Test Data\"],     \"data\":  [0,0,0,0,0],     \"labels\": [\"a\",\"b\",\"c\",\"d\",\"e\"] }]",
        "payloadType": "jsonata",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "f6bf012136f5d117"
            ]
        ]
    },
    {
        "id": "c95347f478e4636e",
        "type": "function",
        "z": "7365b264de2bdff4",
        "name": "FFT passthru (pauseable)",
        "func": "var currentFFPauseState = context.get('FFPauseState')||\"run\";\n    \nif (\"FFTpausetoggle\" == msg.topic)\n{\n    //msg.colour will change the button \n    if (\"pause\" == currentFFPauseState)\n    {\n        currentFFPauseState = \"run\"\n        msg.colour = \"green\";\n        msg.payload = \"running\";\n    }\n    else\n    {\n        \n        currentFFPauseState = \"pause\"  \n        msg.colour = \"red\";\n        msg.payload = \"paused\";\n    }\n    context.set('FFPauseState',currentFFPauseState);\n    node.status({\"text\": \"State: \"+currentFFPauseState, \"shape\": \"ring\", \"fill\":msg.colour});\n    //msg.payload = null;\n    return [null,msg];\n}\nelse\n{\n    if (\"pause\" == currentFFPauseState) return [null,null];\n    else return [msg,null];\n}\n\nreturn [null,null];//should have ducked out by now",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "f6bf012136f5d117",
                "e66c2987dfb9735a"
            ],
            [
                "86b4ede72e79d47d",
                "478519c50ff7a032"
            ]
        ],
        "outputLabels": [
            "passthru packet",
            "update button control"
        ]
    },
    {
        "id": "86b4ede72e79d47d",
        "type": "ui_button",
        "z": "7365b264de2bdff4",
        "name": "un/pause FFT scroll",
        "group": "f2720420ca6aabc2",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "un/pause FFT scroll",
        "color": "{{colour}}",
        "bgcolor": "{{\"#FFF0F0\"}}",
        "className": "",
        "icon": "fa-pause-circle",
        "payload": "pauseclick",
        "payloadType": "str",
        "topic": "FFTpausetoggle",
        "topicType": "str",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "c95347f478e4636e"
            ]
        ]
    },
    {
        "id": "478519c50ff7a032",
        "type": "ui_text",
        "z": "7365b264de2bdff4",
        "group": "f2720420ca6aabc2",
        "order": 3,
        "width": "2",
        "height": "1",
        "name": "ui pause/run state",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "913d9e084ec450f4",
        "type": "ui_slider",
        "z": "7365b264de2bdff4",
        "name": "# of harmonics shown",
        "label": "# of depth harmonics for heatmap",
        "tooltip": "",
        "group": "f2720420ca6aabc2",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": true,
        "outs": "end",
        "topic": "maxHarmonicDisplay",
        "topicType": "str",
        "min": "1",
        "max": "256",
        "step": 1,
        "className": "",
        "x": 580,
        "y": 440,
        "wires": [
            [
                "f6bf012136f5d117",
                "f5501922c9bd6d1d"
            ]
        ]
    },
    {
        "id": "a74e60a666435347",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "maxHarmonicDisplay",
        "payload": "33",
        "payloadType": "num",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "913d9e084ec450f4"
            ]
        ]
    },
    {
        "id": "c2109d771ea33519",
        "type": "ui_slider",
        "z": "7365b264de2bdff4",
        "name": "# of spectogram time samples",
        "label": "heatmap spectogram time samples",
        "tooltip": "This controls the number of old spectrums shown",
        "group": "f2720420ca6aabc2",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": true,
        "outs": "end",
        "topic": "maxTimeDisplay",
        "topicType": "str",
        "min": "2",
        "max": "150",
        "step": 1,
        "className": "",
        "x": 610,
        "y": 560,
        "wires": [
            [
                "f6bf012136f5d117",
                "f5501922c9bd6d1d"
            ]
        ]
    },
    {
        "id": "6e4d9e99885b4d32",
        "type": "inject",
        "z": "7365b264de2bdff4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "maxTimeDisplay",
        "payload": "75",
        "payloadType": "num",
        "x": 340,
        "y": 560,
        "wires": [
            [
                "c2109d771ea33519"
            ]
        ]
    },
    {
        "id": "98bdd1bc750f4bb4",
        "type": "link in",
        "z": "7365b264de2bdff4",
        "name": "",
        "links": [
            "abcc772a5138145a",
            "433adff617e1db9c"
        ],
        "x": 220.00001788139343,
        "y": 255.00003051757812,
        "wires": [
            [
                "c95347f478e4636e"
            ]
        ]
    },
    {
        "id": "e66c2987dfb9735a",
        "type": "countula",
        "z": "7365b264de2bdff4",
        "name": "",
        "x": 793.3334350585938,
        "y": 256.66668176651,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f5501922c9bd6d1d",
        "type": "debug",
        "z": "7365b264de2bdff4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 838.3334617614746,
        "y": 533.3334369659424,
        "wires": []
    },
    {
        "id": "42930cfffde80215",
        "type": "comment",
        "z": "7365b264de2bdff4",
        "name": "",
        "info": "",
        "x": 900,
        "y": 420,
        "wires": []
    },
    {
        "id": "08012c060ed59768",
        "type": "comment",
        "z": "7365b264de2bdff4",
        "name": "FFT Values input to flow",
        "info": "",
        "x": 301.66666412353516,
        "y": 176.66666793823242,
        "wires": []
    },
    {
        "id": "d3281caa.2cd7e",
        "type": "comment",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L (0x1E - 7 bit addr) Digital Compass",
        "info": "",
        "x": 310,
        "y": 100,
        "wires": []
    },
    {
        "id": "dcb8caac.234738",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 250,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d794b4fc.286b48",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 220,
        "wires": []
    },
    {
        "id": "466c103b.b993f",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 250,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1fac328c.e053cd",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L read Mode",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 290,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c2e95fcb.3d16a",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d3dc9d6.72c238",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 250,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ed216def.12de9",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L Continuous Mode - 00",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 250,
        "y": 780,
        "wires": [
            [
                "1f110ad7.e0eef5"
            ]
        ]
    },
    {
        "id": "1f110ad7.e0eef5",
        "type": "function",
        "z": "b40cba0a.4bf348",
        "name": "mode write",
        "func": "return {command:\"02\", payload:(0x03 & msg.payload)};",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 780,
        "wires": [
            [
                "cc4d9d12.33b26"
            ]
        ],
        "outputLabels": [
            "get ID1"
        ]
    },
    {
        "id": "408ba033.bf746",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L Single Mode - 01",
        "props": [
            {
                "p": "payload",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 270,
        "y": 820,
        "wires": [
            [
                "1f110ad7.e0eef5"
            ]
        ]
    },
    {
        "id": "67d5c0a6.982a4",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L idle - 10",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 320,
        "y": 940,
        "wires": [
            [
                "1f110ad7.e0eef5"
            ]
        ]
    },
    {
        "id": "1212a076.eded6",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "HMC5883L idle - 11",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 320,
        "y": 900,
        "wires": [
            [
                "1f110ad7.e0eef5"
            ]
        ]
    },
    {
        "id": "cc4d9d12.33b26",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 830,
        "y": 820,
        "wires": []
    },
    {
        "id": "9a386cf0.65c79",
        "type": "comment",
        "z": "b40cba0a.4bf348",
        "name": "Single Mode reverts to Idle 0b11",
        "info": "This is normal - the device makes\na single measurement and returns to\nidle mode.",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "d09a30b0.2f65d",
        "type": "comment",
        "z": "b40cba0a.4bf348",
        "name": "Mode get/set",
        "info": "",
        "x": 220,
        "y": 640,
        "wires": []
    },
    {
        "id": "e89935a4.1766c8",
        "type": "comment",
        "z": "b40cba0a.4bf348",
        "name": "Measurements",
        "info": "",
        "x": 560,
        "y": 500,
        "wires": []
    },
    {
        "id": "1215bbb.fedea44",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "XYZ - HMC5883L ",
        "props": [
            {
                "p": "payload",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 250,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c22cedf5.3dd31",
        "type": "inject",
        "z": "b40cba0a.4bf348",
        "name": "info - HMC5883L ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 170,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "790d336e.86f2cc",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "461dee16.b9e21",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "5e32406e.a1cdc",
        "type": "debug",
        "z": "b40cba0a.4bf348",
        "name": "msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "d21d2b8a.2de2d8",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "Aquaponic Control System - see inside",
        "info": "Sensors:\n\n    -tank-N water low \n    -tank-N water high \n    -tank-N analog height sensor\n    -flow meters (plant drain, tank-N drain, pump)\n    -temperature (tank-N, soil, ambient)\n    -light intensity (multispectral)\n    -failsafe sensors\n        -tank/bed float switch\n        -water in overflow\n    \nActuators:\n\n    -tank2bed pump \n    -lights (50-200W, IR, PAR, white)\n    \nAlerts:\n\n    -email (subscribe model)\n    -SMS (subscribe model)\n    -audible\n    -status light\n    -UI\n    -dweet\n\nUI:\n\n    -graphs of variables with time\n    -physical system controls\n    -camera\n    -alerts",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "75548a78.8aab74",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "water low - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f18d0bfe.0e72f8"
            ]
        ]
    },
    {
        "id": "9be663c7.6419a",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "water high - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 380,
        "wires": [
            [
                "25349732.dacb68"
            ]
        ]
    },
    {
        "id": "11b2abb.fee4d54",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "light intensity - White",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2290,
        "y": 440,
        "wires": [
            [
                "b2520751.4dadf8"
            ]
        ]
    },
    {
        "id": "67eeefc.f98111",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "light intensity - PAR",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2300,
        "y": 480,
        "wires": [
            [
                "f5cc1e7b.0a33e"
            ]
        ]
    },
    {
        "id": "3e72dd76.c18d22",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "power consumption - pump N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1260,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "2c5bc35.fd3a43c",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "float alarm - bed N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 600,
        "wires": [
            [
                "1896df43.e76921"
            ]
        ]
    },
    {
        "id": "1fd47eaa.e02b81",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "wet alarm - bed N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 560,
        "wires": [
            [
                "1896df43.e76921"
            ]
        ]
    },
    {
        "id": "a5dbfde5.5a24",
        "type": "debug",
        "z": "2655b249.d9aa4e",
        "name": "PWM out to light",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 2970,
        "y": 380,
        "wires": []
    },
    {
        "id": "2edb3a60.d124c6",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "light intensity - IR",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2310,
        "y": 520,
        "wires": [
            [
                "9a042c01.65fbd"
            ]
        ]
    },
    {
        "id": "31bb8099.ce448",
        "type": "ui_chart",
        "z": "2655b249.d9aa4e",
        "name": "aquaponic ui chart",
        "group": "ffe36dc8.001c9",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 2,
        "x": 940,
        "y": 1080,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8d3eefaf.72c11",
        "type": "ui_switch",
        "z": "2655b249.d9aa4e",
        "name": "System Power on/off",
        "label": "switch",
        "group": "ffe36dc8.001c9",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "8a9b02ec.7565"
            ]
        ]
    },
    {
        "id": "b2520751.4dadf8",
        "type": "ui_slider",
        "z": "2655b249.d9aa4e",
        "name": "White Intensity slider",
        "label": "slider",
        "group": "ffe36dc8.001c9",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 2630,
        "y": 320,
        "wires": [
            [
                "a5dbfde5.5a24",
                "3b90b606.c46f4a"
            ]
        ]
    },
    {
        "id": "3217176e.cde8e8",
        "type": "ui_gauge",
        "z": "2655b249.d9aa4e",
        "name": "aquaponic ui gauge",
        "group": "ffe36dc8.001c9",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 940,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f1803f.ff0e7fc",
        "type": "ui_text",
        "z": "2655b249.d9aa4e",
        "group": "ffe36dc8.001c9",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "aquaponic ui text",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 930,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5b56170e.a4a9e8",
        "type": "ui_switch",
        "z": "2655b249.d9aa4e",
        "name": "White Lights on/off",
        "label": "switch",
        "group": "ffe36dc8.001c9",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 2920,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c3369d16.3cc96",
        "type": "ui_switch",
        "z": "2655b249.d9aa4e",
        "name": "PAR Lights on/off",
        "label": "switch",
        "group": "ffe36dc8.001c9",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 2920,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "be54db07.41ab28",
        "type": "ui_switch",
        "z": "2655b249.d9aa4e",
        "name": "IR Lights on/off",
        "label": "switch",
        "group": "ffe36dc8.001c9",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 2910,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cc1e7b.0a33e",
        "type": "ui_slider",
        "z": "2655b249.d9aa4e",
        "name": "PAR Intensity slider",
        "label": "slider",
        "group": "ffe36dc8.001c9",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 2620,
        "y": 360,
        "wires": [
            [
                "3b90b606.c46f4a",
                "a5dbfde5.5a24"
            ]
        ]
    },
    {
        "id": "9a042c01.65fbd",
        "type": "ui_slider",
        "z": "2655b249.d9aa4e",
        "name": "IR Intensity slider",
        "label": "slider",
        "group": "ffe36dc8.001c9",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 2620,
        "y": 400,
        "wires": [
            [
                "3b90b606.c46f4a",
                "a5dbfde5.5a24"
            ]
        ]
    },
    {
        "id": "8957ad9b.76a85",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "all lights - full on",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2310,
        "y": 340,
        "wires": [
            [
                "b2520751.4dadf8",
                "f5cc1e7b.0a33e",
                "9a042c01.65fbd",
                "60b6a05b.9f496"
            ]
        ]
    },
    {
        "id": "f7c17d65.083e8",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "all lights - full off",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2310,
        "y": 380,
        "wires": [
            [
                "b2520751.4dadf8",
                "f5cc1e7b.0a33e",
                "9a042c01.65fbd",
                "60b6a05b.9f496"
            ]
        ]
    },
    {
        "id": "60b6a05b.9f496",
        "type": "ui_switch",
        "z": "2655b249.d9aa4e",
        "name": "Master Lights on/off",
        "label": "switch",
        "group": "ffe36dc8.001c9",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 2620,
        "y": 460,
        "wires": [
            [
                "5b56170e.a4a9e8",
                "c3369d16.3cc96",
                "be54db07.41ab28"
            ]
        ]
    },
    {
        "id": "965d3c0f.69a2c",
        "type": "ui_form",
        "z": "2655b249.d9aa4e",
        "name": "config form",
        "label": "",
        "group": "ffe36dc8.001c9",
        "order": 12,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "",
                "value": "config",
                "type": "checkbox",
                "required": true
            }
        ],
        "formValue": {
            "config": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "",
        "x": 1310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "85ac6ddd.7a539",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "event one",
        "payload": "",
        "payloadType": "date",
        "x": 1450,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "81f79ce9.7e086",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "event two",
        "payload": "",
        "payloadType": "date",
        "x": 1450,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "86e8a98a.791758",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "event three",
        "payload": "",
        "payloadType": "date",
        "x": 1440,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8b71821d.748e8",
        "type": "debug",
        "z": "2655b249.d9aa4e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1910,
        "y": 800,
        "wires": []
    },
    {
        "id": "f5ab0d88.0a54f",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "A State Machine(s) is probably useful here",
        "info": "",
        "x": 1780,
        "y": 900,
        "wires": []
    },
    {
        "id": "77d6562e.8829a8",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "todo: Turn on Heater Tank N - LOW priority",
        "info": "",
        "x": 2410,
        "y": 140,
        "wires": []
    },
    {
        "id": "be44a51d.41bb58",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "float alarm - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "25349732.dacb68"
            ]
        ]
    },
    {
        "id": "6c592d47.93a6d4",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "wet alarm - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "25349732.dacb68"
            ]
        ]
    },
    {
        "id": "1896df43.e76921",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "Turn off Pump to bed N",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "58c90b25.a736f4"
            ]
        ]
    },
    {
        "id": "b2435c05.4dbca",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "Turn on Pump to bed N",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2580,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "f18d0bfe.0e72f8",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "Turn off Pump from tank N",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 420,
        "wires": [
            [
                "58c90b25.a736f4"
            ]
        ]
    },
    {
        "id": "89a0ff17.765f",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "Turn on Pump from tank N",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2590,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "25349732.dacb68",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "tank overflow!  do something!  send URGENT alarm?  turn off Drain? ?",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 320,
        "wires": [
            [
                "58c90b25.a736f4"
            ]
        ]
    },
    {
        "id": "5a35b367.a5ca4c",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "tank overflow",
        "info": "",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "4b02da89.b4fd24",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "fish water too low",
        "info": "",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "dfad1764.2052e8",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "bed overflow",
        "info": "",
        "x": 620,
        "y": 540,
        "wires": []
    },
    {
        "id": "7ef8534b.8107ac",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "flow rate - bed N drain",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 980,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "9c1966f5.63e698",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "flow rate - pump N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "bac3979.f453c68",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "flow rate - tank N drain",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1060,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "36dadcb5.c92524",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "temperature - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1120,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "30e276a8.cf1d8a",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "temperature - bed soil N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "dc33a768.23cc58",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "temperature - ambient",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "9d5c6c97.62a39",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "analog water height - tank N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 880,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "21cd85e.fde327a",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "analog water height - bed N",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "bb53dbcf.44ac28",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "informational",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "3217176e.cde8e8",
                "31bb8099.ce448",
                "f1803f.ff0e7fc",
                "ccdc6dfc.33239"
            ]
        ]
    },
    {
        "id": "303e11f4.cfc1ee",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "sensor inputs (non-alarm condition)",
        "info": "",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "e22d1913.1dd2e8",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "state machine commands",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "8a9b02ec.7565",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "system intelligence",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 620,
        "wires": [
            [
                "395b3ae7.c6a4c6"
            ]
        ]
    },
    {
        "id": "2ed300f1.d12d",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "Full-spectrum Lighting",
        "info": "",
        "x": 2330,
        "y": 280,
        "wires": []
    },
    {
        "id": "3b90b606.c46f4a",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "update PWM value(s)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2990,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6641c0c.f99be4",
        "type": "link in",
        "z": "2655b249.d9aa4e",
        "name": "Commands from System Intelligence",
        "links": [
            "395b3ae7.c6a4c6"
        ],
        "x": 1275,
        "y": 800,
        "wires": [
            [
                "e22d1913.1dd2e8"
            ]
        ]
    },
    {
        "id": "275ba79a.d8a458",
        "type": "link out",
        "z": "2655b249.d9aa4e",
        "name": "System Intelligence Input",
        "links": [
            "bf7656ca.4089a8"
        ],
        "x": 1935,
        "y": 860,
        "wires": []
    },
    {
        "id": "ccdc6dfc.33239",
        "type": "link out",
        "z": "2655b249.d9aa4e",
        "name": "System Intelligence Input",
        "links": [
            "bf7656ca.4089a8"
        ],
        "x": 815,
        "y": 940,
        "wires": []
    },
    {
        "id": "395b3ae7.c6a4c6",
        "type": "link out",
        "z": "2655b249.d9aa4e",
        "name": "Commands from System Intelligence",
        "links": [
            "6641c0c.f99be4",
            "987b5a14.6784a8",
            "5b866329.a4799c",
            "a812d4cc.57ed28"
        ],
        "x": 1855,
        "y": 620,
        "wires": []
    },
    {
        "id": "bf7656ca.4089a8",
        "type": "link in",
        "z": "2655b249.d9aa4e",
        "name": "Input to System Intelligence",
        "links": [
            "275ba79a.d8a458",
            "ccdc6dfc.33239",
            "58c90b25.a736f4"
        ],
        "x": 1535,
        "y": 620,
        "wires": [
            [
                "8a9b02ec.7565"
            ]
        ]
    },
    {
        "id": "987b5a14.6784a8",
        "type": "link in",
        "z": "2655b249.d9aa4e",
        "name": "Commands from System Intelligence",
        "links": [
            "395b3ae7.c6a4c6"
        ],
        "x": 2375,
        "y": 600,
        "wires": [
            [
                "60b6a05b.9f496",
                "b2520751.4dadf8",
                "f5cc1e7b.0a33e",
                "9a042c01.65fbd",
                "5b56170e.a4a9e8",
                "c3369d16.3cc96",
                "be54db07.41ab28"
            ]
        ]
    },
    {
        "id": "5b866329.a4799c",
        "type": "link in",
        "z": "2655b249.d9aa4e",
        "name": "Commands from System Intelligence",
        "links": [
            "395b3ae7.c6a4c6"
        ],
        "x": 2375,
        "y": 840,
        "wires": [
            [
                "b2435c05.4dbca",
                "89a0ff17.765f",
                "30711fb7.cf8ee"
            ]
        ]
    },
    {
        "id": "7db79e14.82486",
        "type": "debug",
        "z": "2655b249.d9aa4e",
        "name": "other image-alerts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2880,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2e322aa0.d1cdd6",
        "type": "comment",
        "z": "2655b249.d9aa4e",
        "name": "todo: separate bed N lighting controls",
        "info": "",
        "x": 2380,
        "y": 180,
        "wires": []
    },
    {
        "id": "a812d4cc.57ed28",
        "type": "link in",
        "z": "2655b249.d9aa4e",
        "name": "Commands from System Intelligence",
        "links": [
            "395b3ae7.c6a4c6"
        ],
        "x": 2375,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "30711fb7.cf8ee",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "Set PWM Pump N",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2560,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e4cb6a19.1b3498",
        "type": "function",
        "z": "2655b249.d9aa4e",
        "name": "RGB analysis",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2860,
        "y": 960,
        "wires": [
            [
                "de8da625.217258"
            ]
        ]
    },
    {
        "id": "de8da625.217258",
        "type": "ui_chart",
        "z": "2655b249.d9aa4e",
        "name": "",
        "group": "ffe36dc8.001c9",
        "order": 13,
        "width": 0,
        "height": 0,
        "label": "Average R,G,B values bed N",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 2,
        "x": 3130,
        "y": 960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6d873106.9278d",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "humidity - ambient",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1340,
        "wires": [
            [
                "bb53dbcf.44ac28"
            ]
        ]
    },
    {
        "id": "373cd92f.c8c326",
        "type": "ui_numeric",
        "z": "2655b249.d9aa4e",
        "name": "temperature - tank N",
        "label": "numeric",
        "group": "ffe36dc8.001c9",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 950,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "41ea9fee.be156",
        "type": "ui_numeric",
        "z": "2655b249.d9aa4e",
        "name": "temperature - bed soil N",
        "label": "numeric",
        "group": "ffe36dc8.001c9",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 960,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "5dbef321.a2410c",
        "type": "ui_numeric",
        "z": "2655b249.d9aa4e",
        "name": "temperature - ambient",
        "label": "numeric",
        "group": "ffe36dc8.001c9",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 950,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "4dc6a2c0.b2395c",
        "type": "ui_numeric",
        "z": "2655b249.d9aa4e",
        "name": "humidity - ambient",
        "label": "numeric",
        "group": "ffe36dc8.001c9",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 940,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "a8de49e6.5721b8",
        "type": "ui_numeric",
        "z": "2655b249.d9aa4e",
        "name": "power consumption instantaneous",
        "label": "numeric",
        "group": "ffe36dc8.001c9",
        "order": 18,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 990,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "58c90b25.a736f4",
        "type": "link out",
        "z": "2655b249.d9aa4e",
        "name": "System Intelligence Input",
        "links": [
            "bf7656ca.4089a8"
        ],
        "x": 1195,
        "y": 320,
        "wires": []
    },
    {
        "id": "4ad38bdd.b52c74",
        "type": "inject",
        "z": "2655b249.d9aa4e",
        "name": "power off system",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1670,
        "y": 460,
        "wires": [
            [
                "8d3eefaf.72c11"
            ]
        ]
    },
    {
        "id": "610289ff72c8c720",
        "type": "dweetio in",
        "z": "d27b826f144e4210",
        "thing": "travels_of_Daedalus",
        "name": "travels_of_Daedalus FROM Internet",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "8603af20e131d7b7",
                "c5809ea8d97ed9f7"
            ]
        ]
    },
    {
        "id": "8603af20e131d7b7",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": " encode GPS FROM dweet.io",
        "func": "\nvar diff = msg.payload.drum;\nvar sum = msg.payload.solo;\nvar accuracy = msg.payload.howclose;\nvar time = msg.payload.cake;\n\nvar latitude = 42+ (diff + sum)/2;\nvar longitude = (sum - diff)/2;\n\nreturn {\"payload\": { \"latitude\": latitude.toFixed(8),\n                    \"longitude\": longitude.toFixed(8),\n                    \"accuracy\": accuracy.toFixed(8),\n                    \"timestamp\": time\n                    }\n        };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "bf1968856bdb0ad1",
                "219d7f24986086c5",
                "5dae4ef62db253eb",
                "cfec641943abcf30",
                "df3041c40254d742"
            ]
        ]
    },
    {
        "id": "bf1968856bdb0ad1",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "317e01d843bac4a0",
        "type": "catch",
        "z": "d27b826f144e4210",
        "name": "travels dweet in",
        "scope": [
            "610289ff72c8c720"
        ],
        "uncaught": false,
        "x": 510,
        "y": 280,
        "wires": [
            [
                "98579ac05f3943a1"
            ]
        ]
    },
    {
        "id": "98579ac05f3943a1",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 280,
        "wires": []
    },
    {
        "id": "c5809ea8d97ed9f7",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 200,
        "wires": []
    },
    {
        "id": "8b713d3227076546",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "Where My Phone is",
        "info": "",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "33992c9cf5d5c616",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "clear data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 520,
        "y": 400,
        "wires": [
            [
                "5566f8fb7afef319"
            ]
        ]
    },
    {
        "id": "5566f8fb7afef319",
        "type": "ui_button",
        "z": "d27b826f144e4210",
        "name": "clear gps",
        "group": "63803e9f696533bf",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": true,
        "label": "clear gps",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear gps",
        "topicType": "str",
        "x": 680,
        "y": 400,
        "wires": [
            [
                "c9e81809b923affd"
            ]
        ]
    },
    {
        "id": "66a198a5e1caf96c",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "Pin Phone location on World Map",
        "info": "",
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "60ef804f8916010c",
        "type": "ui_worldmap",
        "z": "d27b826f144e4210",
        "group": "d1b0a16a6289a0b7",
        "order": 1,
        "width": "6",
        "height": "8",
        "name": "worldmap",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1240,
        "y": 620,
        "wires": []
    },
    {
        "id": "3030261478c172dc",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "setup for map - label",
        "func": "var mypayload = {\"name\":\"selection\", \n                \"lat\":msg.payload.latitude, \n                \"lon\":msg.payload.longitude,\n                \"accuracy\":msg.payload.accuracy,\n                \"vertical_accuracy\": msg.payload.vertical_accuracy,\n                \"timestamp\": Date(Date.now()).toLocaleString('en-US')\n};\n\nif (0 != msg.payload.timestamp)\n    mypayload.name = \"Daedalus\";\n    \nmsg.payload = mypayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 640,
        "wires": [
            [
                "60ef804f8916010c",
                "774ad312c11c3094"
            ]
        ]
    },
    {
        "id": "774ad312c11c3094",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 580,
        "wires": []
    },
    {
        "id": "56a15575d9ce5d73",
        "type": "dweetio out",
        "z": "d27b826f144e4210",
        "thing": "Please_Call_Daedalus",
        "name": "REQUEST: GPS attempt (Please_Call_Daedalus)",
        "x": 1040,
        "y": 780,
        "wires": []
    },
    {
        "id": "5384c292cabc5407",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "timereq",
                "v": "Date.now()",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "My cheese",
        "payloadType": "str",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "0d33015ef25b9ba2"
            ]
        ]
    },
    {
        "id": "4819c028eab9ddf1",
        "type": "dweetio in",
        "z": "d27b826f144e4210",
        "thing": "Please_Call_Daedalus",
        "name": "Please_Call_Daedalus",
        "x": 960,
        "y": 820,
        "wires": [
            [
                "7cb9b4401e50e588"
            ]
        ]
    },
    {
        "id": "354bb1d18e9de23e",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 820,
        "wires": []
    },
    {
        "id": "0d33015ef25b9ba2",
        "type": "ui_button",
        "z": "d27b826f144e4210",
        "name": "Request Daedalus GPS",
        "group": "63803e9f696533bf",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Request Daedalus GPS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Please call home",
        "topicType": "str",
        "x": 710,
        "y": 780,
        "wires": [
            [
                "56a15575d9ce5d73",
                "5f84b6e8e54b42aa"
            ]
        ]
    },
    {
        "id": "8fc475263dea66f7",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "Requests/Messaging via open 3rd party host (dweet.io)",
        "info": "",
        "x": 710,
        "y": 740,
        "wires": []
    },
    {
        "id": "322f761260bfcdc7",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "test dweet.io pathway confirmation",
        "info": "",
        "x": 1080,
        "y": 860,
        "wires": []
    },
    {
        "id": "7cb9b4401e50e588",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "add receive timestamp",
        "func": "msg.timestamprecv = Date.now();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 820,
        "wires": [
            [
                "354bb1d18e9de23e",
                "aeea50ca4b0c5ec5"
            ]
        ]
    },
    {
        "id": "ecba80c63ff7c564",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "setup for map - move command",
        "func": "\nmsg.payload = { \"command\": { \"layer\":\"Esri Satellite\", \n                            \"lat\":msg.payload.latitude, \n                            \"lon\":msg.payload.longitude, \n                            \"zoom\":17 }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "60ef804f8916010c",
                "774ad312c11c3094"
            ]
        ]
    },
    {
        "id": "b55916941c85a8e4",
        "type": "ui_text",
        "z": "d27b826f144e4210",
        "group": "63803e9f696533bf",
        "order": 12,
        "width": 6,
        "height": 1,
        "name": "last update field",
        "label": "updated: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1700,
        "y": 640,
        "wires": []
    },
    {
        "id": "219d7f24986086c5",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "Date.now()",
        "func": "return { \"payload\":Date(Date.now()).toLocaleString('en-US') };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 540,
        "wires": [
            [
                "b55916941c85a8e4"
            ]
        ]
    },
    {
        "id": "5f84b6e8e54b42aa",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "pending",
        "func": "return { \"payload\":\"...pending confirmation...\" };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 640,
        "wires": [
            [
                "b55916941c85a8e4"
            ]
        ]
    },
    {
        "id": "aeea50ca4b0c5ec5",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "middleman conf",
        "func": "return { \"payload\":\"...middleman confirmation...\" };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 740,
        "wires": [
            [
                "b55916941c85a8e4"
            ]
        ]
    },
    {
        "id": "b2aabacf2516c8cf",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "setup for map - accuracy circle",
        "func": "msg.payload =  {\n    \"name\": \"circle of accuracy\",\n    \"lat\": msg.payload.latitude,\n    \"lon\": msg.payload.longitude,\n    \"radius\": msg.payload.accuracy,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.38,\n    \"clickable\": true\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "60ef804f8916010c",
                "774ad312c11c3094"
            ]
        ]
    },
    {
        "id": "3c0290553762c96a",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 940,
        "wires": []
    },
    {
        "id": "2debb6421caafa29",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "UN-obfusecate IP",
        "func": "\nvar message = {};\n\nmessage.A = (msg.payload.A_right + msg.payload.A_left)/2;\nmessage.B = (msg.payload.A_right - msg.payload.A_left)/2;\n\nmessage.C = (msg.payload.B_right + msg.payload.B_left)/2;\nmessage.D = (msg.payload.B_right - msg.payload.B_left)/2;\n\n//Number(msg.payload[0][0]) + Number(msg.payload[0][1]);\n/*\nmessage.A_right = Number(msg.payload[0][0]) + Number(msg.payload[0][1]);\nmessage.A_left = Number(msg.payload[0][0]) - Number(msg.payload[0][1]);\n\nmessage.B_right = Number(msg.payload[0][2]) + Number(msg.payload[0][3]);\nmessage.B_left = Number(msg.payload[0][2]) - Number(msg.payload[0][3]);\n\n*/\n\nmsg.message = message;\nmsg.payload = message.A + \".\" + message.B + \".\" +\n                message.C + \".\" + message.D;\nmsg.host = msg.payload; //for the UI ping input\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 980,
        "wires": [
            [
                "3c0290553762c96a",
                "b5cd27ccaeb45ccb",
                "dc93bbc8288612f9",
                "d4080f6e46d8c7c2",
                "bbd7a0251e61a43f"
            ]
        ]
    },
    {
        "id": "994fede2f22d1615",
        "type": "dweetio in",
        "z": "d27b826f144e4210",
        "thing": "Quarters_of_Daedalus",
        "name": "Quarters_of_Daedalus FROM Internet",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "2debb6421caafa29"
            ]
        ]
    },
    {
        "id": "b5cd27ccaeb45ccb",
        "type": "ui_text",
        "z": "d27b826f144e4210",
        "group": "63803e9f696533bf",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "IP",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "className": "",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "12c26df961be4882",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "b5cd27ccaeb45ccb"
            ]
        ]
    },
    {
        "id": "dc93bbc8288612f9",
        "type": "ui ping",
        "z": "d27b826f144e4210",
        "name": "",
        "host": "",
        "timeout": "5",
        "requests": "1",
        "x": 1050,
        "y": 1020,
        "wires": [
            [
                "e9fd5cfcce603bfb",
                "e4c4c271f48622e0"
            ]
        ]
    },
    {
        "id": "e9fd5cfcce603bfb",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 980,
        "wires": []
    },
    {
        "id": "e4c4c271f48622e0",
        "type": "ui_led",
        "z": "d27b826f144e4210",
        "order": 3,
        "group": "63803e9f696533bf",
        "width": 1,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "",
        "x": 1290,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3493f8ec08a27f1d",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "clear led",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "loremipsum",
        "payloadType": "str",
        "x": 1220,
        "y": 940,
        "wires": [
            [
                "e4c4c271f48622e0"
            ]
        ]
    },
    {
        "id": "0a3a0eb81da9b6ef",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "Quarters_of_Daedalus contains the encoded external IP address of Daedalus",
        "info": "",
        "x": 630,
        "y": 940,
        "wires": []
    },
    {
        "id": "8374b4e969a708f5",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "PING the external IP from local machine - Green/Success, Red/Fail, Grey/default",
        "info": "",
        "x": 1200,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5dae4ef62db253eb",
        "type": "file",
        "z": "d27b826f144e4210",
        "name": "",
        "filename": "log/gps_and_IP.log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1530,
        "y": 900,
        "wires": [
            [
                "856dcee21c30ba80"
            ]
        ]
    },
    {
        "id": "856dcee21c30ba80",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 940,
        "wires": []
    },
    {
        "id": "0a786a309f13f18e",
        "type": "dweetio out",
        "z": "d27b826f144e4210",
        "thing": "Daedalus_unexplained_words",
        "name": "Daedalus_unexplained_words",
        "x": 1170,
        "y": 1580,
        "wires": []
    },
    {
        "id": "95e7bb93b8a94b0d",
        "type": "ui_text_input",
        "z": "d27b826f144e4210",
        "name": "ui text input 2 speech",
        "label": "words spoken by Daedalus",
        "tooltip": "",
        "group": "59061a176bcf3fac",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 870,
        "y": 1580,
        "wires": [
            [
                "0a786a309f13f18e"
            ]
        ]
    },
    {
        "id": "5e30385607ad4ad5",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "empty payload and topic",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 560,
        "y": 1580,
        "wires": [
            [
                "95e7bb93b8a94b0d"
            ]
        ]
    },
    {
        "id": "2f8ce287fef44f4b",
        "type": "catch",
        "z": "d27b826f144e4210",
        "name": "",
        "scope": [
            "60ef804f8916010c"
        ],
        "uncaught": false,
        "x": 1390,
        "y": 460,
        "wires": [
            [
                "56f780302d19b182"
            ]
        ]
    },
    {
        "id": "56f780302d19b182",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 460,
        "wires": []
    },
    {
        "id": "c9e81809b923affd",
        "type": "ui_table",
        "z": "d27b826f144e4210",
        "group": "63803e9f696533bf",
        "name": "locations ui table",
        "order": 1,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "latitude",
                "title": "lat",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "longitude",
                "title": "lon",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "accuracy",
                "title": "acc",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "event",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "fa325d504be00945",
                "df3041c40254d742"
            ]
        ]
    },
    {
        "id": "fa325d504be00945",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 200,
        "wires": []
    },
    {
        "id": "cfec641943abcf30",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "cram into array",
        "func": "if ((null !== msg.payload) && (\"object\" == typeof msg.payload))\n{\n    var tmp = [msg.payload, //normal payload\n\n            {\"latitude\":(Number(msg.payload.latitude)+0.01*Math.random()-0.005),\n            \"longitude\":(Number(msg.payload.longitude)+0.01*Math.random()-0.005),\n            \"accuracy\": msg.payload.accuracy,\n            \"timestamp\":0}, //random jiggle around normal\n            \n          {\"latitude\":180*Math.random()-90, //2/3 of earth is sea\n            \"longitude\":180*Math.random()-90,\n            \"accuracy\":10*Math.random()+5,\n            \"timestamp\":0}]; //somewhere on Earth\n          \n   \n          \n    delete(msg.payload);\n    msg.payload = tmp;\n}\nelse msg.payload = null;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 240,
        "wires": [
            [
                "c9e81809b923affd",
                "dbc349277c79ea4a"
            ]
        ]
    },
    {
        "id": "dbc349277c79ea4a",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "3ac651426fec9336",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "ip[3]",
        "group": "63803e9f696533bf",
        "order": 5,
        "width": "1",
        "height": "1",
        "digits": "3",
        "decimals": "0",
        "x": 1250,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d4080f6e46d8c7c2",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "split out IP numbers",
        "func": "\nreturn [{\"payload\":msg.message.A},\n            {\"payload\":msg.message.B},\n            {\"payload\":msg.message.C},\n            {\"payload\":msg.message.D},];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1180,
        "wires": [
            [
                "3ac651426fec9336"
            ],
            [
                "6c30f6baad2eea9c"
            ],
            [
                "19496af31830323f"
            ],
            [
                "3d783a0a99fef353"
            ]
        ]
    },
    {
        "id": "9e9812c67730e3c9",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "zeroes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "message.A",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "message.B",
                "v": "0",
                "vt": "str"
            },
            {
                "p": "message.C",
                "v": "0",
                "vt": "str"
            },
            {
                "p": "message.D",
                "v": "0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 830,
        "y": 1180,
        "wires": [
            [
                "d4080f6e46d8c7c2"
            ]
        ]
    },
    {
        "id": "6c30f6baad2eea9c",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "ip[2]",
        "group": "63803e9f696533bf",
        "order": 6,
        "width": "1",
        "height": "1",
        "digits": "3",
        "decimals": "0",
        "x": 1250,
        "y": 1220,
        "wires": []
    },
    {
        "id": "19496af31830323f",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "ip[1]",
        "group": "63803e9f696533bf",
        "order": 7,
        "width": "1",
        "height": "1",
        "digits": "3",
        "decimals": "0",
        "x": 1250,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3d783a0a99fef353",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "ip[0]",
        "group": "63803e9f696533bf",
        "order": 8,
        "width": "1",
        "height": "1",
        "digits": "3",
        "decimals": "0",
        "x": 1250,
        "y": 1300,
        "wires": []
    },
    {
        "id": "367cab2b684629c0",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "1x1 left spacer",
        "group": "63803e9f696533bf",
        "order": 4,
        "width": "1",
        "height": "1",
        "digits": "1",
        "decimals": "0",
        "x": 1280,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6a3772fc6ecd209f",
        "type": "ui_digital_display",
        "z": "d27b826f144e4210",
        "name": "1x1 right spacer",
        "group": "63803e9f696533bf",
        "order": 9,
        "width": "1",
        "height": "1",
        "digits": "1",
        "decimals": "0",
        "x": 1280,
        "y": 1340,
        "wires": []
    },
    {
        "id": "df3041c40254d742",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "passthru",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 640,
        "wires": [
            [
                "3030261478c172dc",
                "ecba80c63ff7c564",
                "b2aabacf2516c8cf"
            ]
        ]
    },
    {
        "id": "bbd7a0251e61a43f",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "jsonify",
        "func": "var tmp = { \"ip\": msg.payload, \"timestamp\": Date.now() };\ndelete(msg.payload);\nmsg.payload = tmp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "5dae4ef62db253eb",
                "a608d9e9ce437668"
            ]
        ]
    },
    {
        "id": "a608d9e9ce437668",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 940,
        "wires": []
    },
    {
        "id": "d79781cce1ebe106",
        "type": "file in",
        "z": "d27b826f144e4210",
        "name": "read log/gps_and_IP.log.txt",
        "filename": "log/gps_and_IP.log.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2140,
        "y": 940,
        "wires": [
            [
                "712bd390dbab87bf"
            ]
        ]
    },
    {
        "id": "a1f7c67f095cde0f",
        "type": "inject",
        "z": "d27b826f144e4210",
        "name": "initiate read GPS file",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1890,
        "y": 900,
        "wires": [
            [
                "8ca05817b6396804"
            ]
        ]
    },
    {
        "id": "712bd390dbab87bf",
        "type": "json",
        "z": "d27b826f144e4210",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2330,
        "y": 940,
        "wires": [
            [
                "7336313e5018e4bb",
                "abfdcd2cad2ca79a"
            ]
        ]
    },
    {
        "id": "3ea855f57f7bf0b5",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "Load a log file with JSON lines",
        "info": "",
        "x": 2140,
        "y": 900,
        "wires": []
    },
    {
        "id": "8ca05817b6396804",
        "type": "ui_button",
        "z": "d27b826f144e4210",
        "name": "load GPS file values",
        "group": "d1b0a16a6289a0b7",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": true,
        "label": "load GPS values from file",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "load",
        "topicType": "str",
        "x": 1900,
        "y": 940,
        "wires": [
            [
                "d79781cce1ebe106"
            ]
        ]
    },
    {
        "id": "2e419e2f2014c220",
        "type": "catch",
        "z": "d27b826f144e4210",
        "name": "Catch json",
        "scope": [
            "712bd390dbab87bf"
        ],
        "uncaught": false,
        "x": 2340,
        "y": 980,
        "wires": [
            [
                "905a636be26aec0c"
            ]
        ]
    },
    {
        "id": "905a636be26aec0c",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 980,
        "wires": []
    },
    {
        "id": "f5daff383ebb1620",
        "type": "ui_table",
        "z": "d27b826f144e4210",
        "group": "d1b0a16a6289a0b7",
        "name": "locations on file table",
        "order": 2,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "latitude",
                "title": "lat",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "longitude",
                "title": "lon",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "accuracy",
                "title": "acc",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "event",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 2300,
        "y": 780,
        "wires": [
            [
                "189898430e61831a",
                "11f5ebf901003750"
            ]
        ]
    },
    {
        "id": "189898430e61831a",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 820,
        "wires": []
    },
    {
        "id": "11f5ebf901003750",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "passthru",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 740,
        "wires": [
            [
                "df3041c40254d742"
            ]
        ]
    },
    {
        "id": "082e249fcbb23955",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "load some GPS values into table",
        "info": "",
        "x": 2230,
        "y": 740,
        "wires": []
    },
    {
        "id": "b14fe44e3291e4a0",
        "type": "buffer-array",
        "z": "d27b826f144e4210",
        "name": "",
        "bufferLen": "10",
        "startWhenFilled": true,
        "x": 2090,
        "y": 780,
        "wires": [
            [
                "f5daff383ebb1620"
            ]
        ]
    },
    {
        "id": "7336313e5018e4bb",
        "type": "function",
        "z": "d27b826f144e4210",
        "name": "rejector",
        "func": "if (    (null === msg.payload) \n         || (\"object\" !== typeof msg.payload) \n            || (undefined === msg.payload.latitude))\n    return null;//don't care about anything else but GPS.\nelse\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 940,
        "wires": [
            [
                "b14fe44e3291e4a0"
            ]
        ]
    },
    {
        "id": "abfdcd2cad2ca79a",
        "type": "debug",
        "z": "d27b826f144e4210",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 900,
        "wires": []
    },
    {
        "id": "bb6c6b74a6d6d020",
        "type": "comment",
        "z": "d27b826f144e4210",
        "name": "send selected locations to map",
        "info": "",
        "x": 2570,
        "y": 780,
        "wires": []
    },
    {
        "id": "a5946bd.f5a6b98",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "eb6c86fa.149378",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "190d0afc.e6f2f5",
        "order": 1,
        "width": "6",
        "height": "7",
        "label": "ADS1115 Thermistor voltages",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "0.0",
        "ymax": "3.3",
        "removeOlder": "2",
        "removeOlderPoints": "512",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 1700,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b3402471.4cbfd8",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "format ads1115 into voltages for graph ",
        "func": "//convert 2s complement readings into voltages\nvar MAXREADING = 3.3; //volts\nvar reading = parseInt(msg.payload);\n\n//Value comes in 2s-complement format!\nif ((reading & 0x8000) > 0) {\n   reading = reading - 0x10000;\n}\n\nmsg.timestamp = Date.now();\n\nmsg.payload = MAXREADING*reading.toFixed(5)/32768;\n\n//node.warn({payload:msg.topic});\n\n\n//configure for temperature reading\nswitch(msg.topic)\n{\n    case \"channel_1\": msg.topic = \"Ambient@electronics\"; break;\n    case \"channel_2\": msg.topic = \"Ambient@fishinator\"; break;\n    case \"channel_3\": msg.topic = \"Cold Water\"; break;\n    case \"channel_4\": msg.topic = \"Hot Water\"; break;\n    case \"device_status\": return null; //probably comes from a startup reading\n    default: return null;\n}\n\nif (!isNaN(reading))\n    node.status({text:\"adc: \"+reading+\" (raw)\"+\" (\"+msg.topic+\")\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "x": 710,
        "y": 520,
        "wires": [
            [
                "c644ce7d.39bb3",
                "bada153b.4525e8"
            ]
        ],
        "info": " fcn"
    },
    {
        "id": "c644ce7d.39bb3",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 460,
        "wires": []
    },
    {
        "id": "fa8815d3.0577e8",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 940,
        "y": 420,
        "wires": [
            [
                "cfb1806.f304e8"
            ]
        ]
    },
    {
        "id": "cfb1806.f304e8",
        "type": "ui_button",
        "z": "d46a7cc.f2b958",
        "name": "clear ui data",
        "group": "190d0afc.e6f2f5",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "clear data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear data",
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "7ac746c6.8538b8"
            ]
        ]
    },
    {
        "id": "7ac746c6.8538b8",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "log - clear temps",
        "func": "node.log(\"Clearing ADS1115 Thermistor Graph\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 420,
        "wires": [
            [
                "eb6c86fa.149378",
                "2f1474c3.d0eb8c",
                "837e975d.7c8168"
            ]
        ]
    },
    {
        "id": "2f1474c3.d0eb8c",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "d": true,
        "name": "",
        "group": "190d0afc.e6f2f5",
        "order": 2,
        "width": "6",
        "height": "7",
        "label": "Thermistor Resistances",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "0.0",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "512",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 1680,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d45fbbe7.2ba048",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "convert voltage to resistance",
        "func": "var MAXREADING = 3.3; //volts\nvar resistance = 0.0;\n\n//the reference resistance is a known value for the system; use it.\nvar REFERENCE_PULLUP_MEASURED = 9860; //pullup to vcc on 10k thermistor\n\nmsg.reference_pullup_measured = REFERENCE_PULLUP_MEASURED;\n\nif (\"Ambient@electronics\"==msg.topic)\n{\n    resistance =REFERENCE_PULLUP_MEASURED*(msg.payload/(MAXREADING-msg.payload));\n    node.status({text:\"R_t: \"+resistance.toFixed(0)+\" (ohms)\"});\n}\nelse \n    resistance =10000*(msg.payload/(MAXREADING-msg.payload)); //10k nominal\n    \nmsg.payload = resistance.toFixed(0);\n//node.status({text:\"R_t: \"+msg.payload+\" (ohms)\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "x": 1390,
        "y": 580,
        "wires": [
            [
                "2f1474c3.d0eb8c",
                "d6687358.29979"
            ]
        ]
    },
    {
        "id": "47c5439c.b83abc",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "add NTC B57991S 10k Thermister datasheet to payload",
        "func": "\nvar datasheet =\n{\n    //seems to be 62 points in the datasheet for TDK B57991S Thermistors\n    //2908-type data\n    desc: \"TDK B57881S0103+002 10k Thermistor Table\",\n    number: \"2908\",\n    nominalvalue: \"10000\", //ohms, 25C, 298K\n    B: \"3460\",\n    Bacc: \"0.01\", //plusminus 1%\n   data: [\n        { tempC: \"-55.0\",  rtr25_ratio:\"45.313\", alpha: \"6.0\"},\n        { tempC: \"-50.0\",  rtr25_ratio:\"33.729\", alpha: \"5.8\"},\n        { tempC: \"-45.0\",  rtr25_ratio:\"25.333\", alpha: \"5.6\"},\n        { tempC: \"-40.0\",  rtr25_ratio:\"19.191\", alpha: \"5.5\"},\n        { tempC: \"-35.0\",  rtr25_ratio:\"14.659\", alpha: \"5.3\"},\n        \n        { tempC: \"-30.0\",  rtr25_ratio:\"11.288\", alpha: \"5.1\"},\n        { tempC: \"-25.0\",  rtr25_ratio:\"8.7588\", alpha: \"5.0\"},\n        { tempC: \"-20.0\",  rtr25_ratio:\"6.8471\", alpha: \"4.9\"},\n        { tempC: \"-15.0\",  rtr25_ratio:\"5.3910\", alpha: \"4.7\"},\n        { tempC: \"-10.0\",  rtr25_ratio:\"4.2739\", alpha: \"4.6\"},\n        \n        { tempC: \"-5.0\",  rtr25_ratio:\"3.4109\", alpha: \"4.4\"},\n        { tempC: \"0.0\",  rtr25_ratio:\"2.7396\", alpha: \"4.3\"},\n        { tempC: \"5.0\",  rtr25_ratio:\"2.2140\", alpha: \"4.2\"},\n        { tempC: \"10.0\",  rtr25_ratio:\"1.7999\", alpha: \"4.1\"},\n        { tempC: \"15.0\",  rtr25_ratio:\"1.4716\", alpha: \"4.0\"},\n        \n        { tempC: \"20.0\",  rtr25_ratio:\"1.2099\", alpha: \"3.9\"},\n        { tempC: \"25.0\",  rtr25_ratio:\"1.0000\", alpha: \"3.8\"},\n        { tempC: \"30.0\",  rtr25_ratio:\"0.83078\", alpha: \"3.7\"},\n        { tempC: \"35.0\",  rtr25_ratio:\"0.69361\", alpha: \"3.6\"},\n        { tempC: \"40.0\",  rtr25_ratio:\"0.58186\", alpha: \"3.5\"},\n        \n        { tempC: \"45.0\",  rtr25_ratio:\"0.49036\", alpha: \"3.4\"},\n        { tempC: \"50.0\",  rtr25_ratio:\"0.41509\", alpha: \"3.3\"},\n        { tempC: \"55.0\",  rtr25_ratio:\"0.35288\", alpha: \"3.2\"},\n        { tempC: \"60.0\",  rtr25_ratio:\"0.30124\", alpha: \"3.1\"},\n        { tempC: \"65.0\",  rtr25_ratio:\"0.25818\", alpha: \"3.0\"},\n        \n        \n        { tempC: \"70.0\",  rtr25_ratio:\"0.22213\", alpha: \"3.0\"},\n        { tempC: \"75.0\",  rtr25_ratio:\"0.19183\", alpha: \"2.9\"},\n        { tempC: \"80.0\",  rtr25_ratio:\"0.16626\", alpha: \"2.8\"},\n        { tempC: \"85.0\",  rtr25_ratio:\"0.14460\", alpha: \"2.8\"},\n        { tempC: \"90.0\",  rtr25_ratio:\"0.12618\", alpha: \"2.7\"},\n        \n        { tempC: \"95.0\",  rtr25_ratio:\"0.11047\", alpha: \"2.6\"},\n        { tempC: \"100.0\",  rtr25_ratio:\"0.097017\", alpha: \"2.6\"},\n        { tempC: \"105.0\",  rtr25_ratio:\"0.085463\", alpha: \"2.5\"},\n        { tempC: \"110.0\",  rtr25_ratio:\"0.075506\", alpha: \"2.4\"},\n        { tempC: \"115.0\",  rtr25_ratio:\"0.066899\", alpha: \"2.4\"},\n        \n        { tempC: \"120.0\",  rtr25_ratio:\"0.059437\", alpha: \"2.3\"},\n        { tempC: \"125.0\",  rtr25_ratio:\"0.052948\", alpha: \"2.3\"},\n        { tempC: \"130.0\",  rtr25_ratio:\"0.047289\", alpha: \"2.2\"},\n        { tempC: \"135.0\",  rtr25_ratio:\"0.042341\", alpha: \"2.2\"},\n        { tempC: \"140.0\",  rtr25_ratio:\"0.038003\", alpha: \"2.1\"},\n        \n        { tempC: \"145.0\",  rtr25_ratio:\"0.034189\", alpha: \"2.1\"},\n        { tempC: \"150.0\",  rtr25_ratio:\"0.030828\", alpha: \"2.0\"},\n        { tempC: \"155.0\",  rtr25_ratio:\"0.027859\", alpha: \"2.0\"}\n         ]\n}\nmsg.datasheet = datasheet;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2210,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "ef13e4fb.10ec18",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "1st derivative - 2pt",
        "func": "var oldtemp = context.get('lastTemp')||null;\nvar oldtime = context.get('lasttime')||null;\n//need two variables for previous two readings, stored in context\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = parseFloat(msg.timestamp); \n\nif (0===nowtime || null === nowtemp) return {payload: null}; //nothing to do\n\n//set the current data/timestamp to the previous value for next time\ncontext.set('lastTemp',nowtemp);\ncontext.set('lasttime',nowtime);\n\nvar timediff = (nowtime-oldtime).toFixed(0);//in milliseconds\n\n//dont bother if there aren't enough valid values\nif (null !== oldtemp && null !== oldtime && 0 !== timediff)\n{\n    msg.frequency = (3600000/timediff); //in count/hr\n    return {payload: (1000*(nowtemp - oldtemp)/timediff), topic:\"1st derivative (2pt)\", frequency: msg.frequency, timestamp: nowtime, timediff: timediff};\n\n}\nelse\n    return {payload: null, topic:\"1st derivative (2pt)\", frequency: null, timestamp: nowtime, timediff: timediff};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3360,
        "y": 860,
        "wires": [
            [
                "de366a8.f21c998",
                "44ec9f7e.bb136",
                "130abcee.ecf543",
                "fee0c473.011f38",
                "52ff53b5.ad00ac"
            ]
        ]
    },
    {
        "id": "ffe84116.0017c",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2190,
        "y": 640,
        "wires": []
    },
    {
        "id": "a7759331.588a7",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "Steinhart-Hart Matrix (TempC)",
        "func": "var KELVIN_CELCIUS_OFFSET = 273.16;\n\n//x is the length of the datasheet array\nvar xlength = 0;\nif (null !== msg.datasheet)\n    if (null !== msg.datasheet.data)\n        if (null !== msg.datasheet.data.length)\n            xlength = msg.datasheet.data.length;\nif (xlength < 3) return null; //wtf?  too few points\n\n//this is the RAW thermistor resistance calculated from ADC value  \nmsg.RTmeasured = msg.payload; //in ohms;\n//rtr25_ratio = ( resistance / nominal or measured resistance of THERMISTOR at 25C )\nif (\"Reference\"==msg.topic)\n    msg.normed_resistance = msg.payload/10000.0;//nominal\nelse\n    msg.normed_resistance = msg.payload/10000.0;//nominal\n      \n\n//look through datasheet values until the measurement \n//is within a local domain of datasheet points \n//(i.e. find which 3 nominal datasheet points to use for calculations)\nvar count = 0;\n//the 1st less-than comparison in the while only works if data is sorted ascending for an NTC thermistor\nwhile ( (msg.normed_resistance < msg.datasheet.data[count+1].rtr25_ratio) && (count+2 < xlength) ) \n{\n    count+=1;\n}\n\n//this extra step is for HUMAN (my) clarity\nvar h_minus = count;\nvar h_zero = count+1;\nvar h_plus = count+2;\n\n//three function points from datasheet\nvar fmh = parseFloat(msg.datasheet.data[h_minus].rtr25_ratio);   //f(-h)\nvar fz = parseFloat(msg.datasheet.data[h_zero].rtr25_ratio);  //f(0)\nvar fph = parseFloat(msg.datasheet.data[h_plus].rtr25_ratio); //f(+h)\nmsg.fmh = fmh; msg.fz = fz; msg.fph = fph; //make a copy in the msg body\n\n//store the calculated matrix values in the msg object\nmsg.matrixA = [   [1.0,Math.log(fmh),Math.pow(Math.log(fmh),3)],\n            [1.0,Math.log(fz),Math.pow(Math.log(fz),3)],\n            [1.0,Math.log(fph),Math.pow(Math.log(fph),3)]\n        ];\n        //need temperature in KELVIN for eqn\nmsg.matrixB = [   1.0/(parseFloat(msg.datasheet.data[h_minus].tempC) +KELVIN_CELCIUS_OFFSET), \n            1.0/(parseFloat(msg.datasheet.data[h_zero].tempC) +KELVIN_CELCIUS_OFFSET), \n            1.0/(parseFloat(msg.datasheet.data[h_plus].tempC) +KELVIN_CELCIUS_OFFSET)\n        ];\n \nvar goodMath = context.global.get('numericjs');\n\n//there is only a solution of the determinant is non-zero\nmsg.det = goodMath.det(msg.matrixA);\nif (0!==msg.det) \n{\n    //solution is a 3x1 matrix (product of 3x3 and 3x1 matrix)\n    msg.k = goodMath.dotMV(goodMath.inv(msg.matrixA),msg.matrixB); //the solution matrix in ohms\n    msg.SH_calculated_Tt = 1.0/(msg.k[0] + msg.k[1]*Math.log(msg.normed_resistance) + msg.k[2]*Math.pow(Math.log(msg.normed_resistance), 3) );\n}\nelse\n{\n    msg.SH_calculated_Tt = null;  //there is no solution; un-invertable matrix (with real numbers)\n}\n\nif (null !== msg.SH_calculated_Tt)  //if there was an answer to be had\n{\n    msg.payload = (msg.SH_calculated_Tt - KELVIN_CELCIUS_OFFSET).toPrecision(6); //payload in celcius\n\n    //only update the status for the refernce thermistor\n    //if (\"Reference\"==msg.topic)\n       node.status({text: \"TempC: \"+(msg.SH_calculated_Tt - KELVIN_CELCIUS_OFFSET).toPrecision(5)});\n\n    return msg;\n}\nelse return {payload: null};",
        "outputs": 1,
        "noerr": 2,
        "x": 2270,
        "y": 580,
        "wires": [
            [
                "4924ce0f.b6db3"
            ]
        ]
    },
    {
        "id": "38ad13d0.c752ec",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2690,
        "y": 580,
        "wires": []
    },
    {
        "id": "d6687358.29979",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "add TDK NTC B57164K 10k Thermister datasheet to payload",
        "func": "//TODO:\n//the ka, kb, kc Steinhart-Hart constants should be calculated ONCE\n//for all of these entries, THEN passed on with the calculated values.\n\nvar datasheet =\n{\n    //seems to be 62 points in the datasheet for TDK B57991S Thermistors\n    //2908-type data, 2013 March version.  You got these from Alan.\n    desc: \"TDK B57164K0103+000 10k Thermistor Table\",\n    number: \"2904\",\n    nominalvalue: \"10000\", //ohms, 25C, 298K\n    B: \"4300\",\n    Bacc: \"0.03\", //plusminus 3%\n   data: [\n        { tempC: \"-55.0\",  rtr25_ratio:\"121.46\", alpha: \"7.4\"},\n        { tempC: \"-50.0\",  rtr25_ratio:\"84.439\", alpha: \"7.2\"},\n        { tempC: \"-45.0\",  rtr25_ratio:\"59.243\", alpha: \"7.1\"},\n        { tempC: \"-40.0\",  rtr25_ratio:\"41.938\", alpha: \"6.9\"},\n        { tempC: \"-35.0\",  rtr25_ratio:\"29.947\", alpha: \"6.7\"},\n        \n        { tempC: \"-30.0\",  rtr25_ratio:\"21.567\", alpha: \"6.6\"},\n        { tempC: \"-25.0\",  rtr25_ratio:\"15.641\", alpha: \"6.3\"},\n        { tempC: \"-20.0\",  rtr25_ratio:\"11.466\", alpha: \"6.2\"},\n        { tempC: \"-15.0\",  rtr25_ratio:\"8.4510\", alpha: \"6.0\"},\n        { tempC: \"-10.0\",  rtr25_ratio:\"6.2927\", alpha: \"5.9\"},\n        \n        { tempC: \"-5.0\",  rtr25_ratio:\"4.7077\", alpha: \"5.7\"},\n        { tempC: \"0.0\",  rtr25_ratio:\"3.5563\", alpha: \"5.5\"},\n        { tempC: \"5.0\",  rtr25_ratio:\"2.7119\", alpha: \"5.3\"},\n        { tempC: \"10.0\",  rtr25_ratio:\"2.0860\", alpha: \"5.1\"},\n        { tempC: \"15.0\",  rtr25_ratio:\"1.6204\", alpha: \"5.0\"},\n        \n        { tempC: \"20.0\",  rtr25_ratio:\"1.2683\", alpha: \"4.8\"},\n        { tempC: \"25.0\",  rtr25_ratio:\"1.0000\", alpha: \"4.7\"},\n        { tempC: \"30.0\",  rtr25_ratio:\"0.79420\", alpha: \"4.6\"},\n        { tempC: \"35.0\",  rtr25_ratio:\"0.63268\", alpha: \"4.5\"},\n        { tempC: \"40.0\",  rtr25_ratio:\"0.50740\", alpha: \"4.3\"},\n        \n        { tempC: \"45.0\",  rtr25_ratio:\"0.41026\", alpha: \"4.2\"},\n        { tempC: \"50.0\",  rtr25_ratio:\"0.33363\", alpha: \"4.1\"},\n        { tempC: \"55.0\",  rtr25_ratio:\"0.27243\", alpha: \"4.0\"},\n        { tempC: \"60.0\",  rtr25_ratio:\"0.22370\", alpha: \"3.9\"},\n        { tempC: \"65.0\",  rtr25_ratio:\"0.18459\", alpha: \"3.8\"},\n        \n        { tempC: \"70.0\",  rtr25_ratio:\"0.15305\", alpha: \"3.7\"},\n        { tempC: \"75.0\",  rtr25_ratio:\"0.12755\", alpha: \"3.6\"},\n        { tempC: \"80.0\",  rtr25_ratio:\"0.10677\", alpha: \"3.5\"},\n        { tempC: \"85.0\",  rtr25_ratio:\"0.089928\", alpha: \"3.4\"},\n        { tempC: \"90.0\",  rtr25_ratio:\"0.076068\", alpha: \"3.3\"},\n        \n        { tempC: \"95.0\",  rtr25_ratio:\"0.064524\", alpha: \"3.3\"},\n        { tempC: \"100.0\",  rtr25_ratio:\"0.054941\", alpha: \"3.2\"},\n        { tempC: \"105.0\",  rtr25_ratio:\"0.047003\", alpha: \"3.1\"},\n        { tempC: \"110.0\",  rtr25_ratio:\"0.040358\", alpha: \"3.0\"},\n        { tempC: \"115.0\",  rtr25_ratio:\"0.034743\", alpha: \"3.0\"},\n        \n        { tempC: \"120.0\",  rtr25_ratio:\"0.030007\", alpha: \"2.9\"},\n        { tempC: \"125.0\",  rtr25_ratio:\"0.026006\", alpha: \"2.8\"},\n        { tempC: \"130.0\",  rtr25_ratio:\"0.022609\", alpha: \"2.8\"},\n        { tempC: \"135.0\",  rtr25_ratio:\"0.019720\", alpha: \"2.7\"},\n        { tempC: \"140.0\",  rtr25_ratio:\"0.017251\", alpha: \"2.6\"},\n        \n        { tempC: \"145.0\",  rtr25_ratio:\"0.015139\", alpha: \"2.6\"},\n        { tempC: \"150.0\",  rtr25_ratio:\"0.013321\", alpha: \"2.5\"},\n        { tempC: \"155.0\",  rtr25_ratio:\"0.011754\", alpha: \"2.5\"}\n         ]\n}\nmsg.datasheet = datasheet;\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "x": 1820,
        "y": 580,
        "wires": [
            [
                "ffe84116.0017c",
                "a7759331.588a7"
            ]
        ]
    },
    {
        "id": "a047da45.5fb828",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "SPARE: unused part, but I encoded the datasheet values",
        "info": "",
        "x": 2210,
        "y": 300,
        "wires": []
    },
    {
        "id": "837e975d.7c8168",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "d": true,
        "name": "",
        "group": "190d0afc.e6f2f5",
        "order": 3,
        "width": "6",
        "height": "7",
        "label": "Thermistor ˚C",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "thermister calculated temperatures",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "1024",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 1640,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "203ce045.dfc32",
        "type": "delay",
        "z": "d46a7cc.f2b958",
        "name": "",
        "pauseType": "timed",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "eb6c86fa.149378",
                "d45fbbe7.2ba048"
            ]
        ]
    },
    {
        "id": "65f521af.9a0ae",
        "type": "link in",
        "z": "d46a7cc.f2b958",
        "name": "To Thermister Temperature Graph",
        "links": [
            "889e0e4c.7761f"
        ],
        "x": 1375,
        "y": 880,
        "wires": [
            [
                "d624bf4a.29db4"
            ]
        ]
    },
    {
        "id": "d624bf4a.29db4",
        "type": "delay",
        "z": "d46a7cc.f2b958",
        "name": "limit rate of incoming packets (lossy)",
        "pauseType": "timed",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 1580,
        "y": 880,
        "wires": [
            [
                "f784285a.087bd8",
                "e546e4e5.1ab918"
            ]
        ]
    },
    {
        "id": "f784285a.087bd8",
        "type": "join",
        "z": "d46a7cc.f2b958",
        "name": "join In-Out T",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1900,
        "y": 1040,
        "wires": [
            [
                "ada198d2.525e68"
            ]
        ]
    },
    {
        "id": "ada198d2.525e68",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "diff+blackbody In-Out",
        "func": "var bt = msg.payload[\"Basement Temperature\"];\nvar aft = msg.payload[\"Airport/Forks Temperature\"];\nvar kT4 = Math.pow(bt,4)-Math.pow(aft,4);\nconst sigma = 5.670373e-8;  //the Stefan–Boltzmann constant\n//for blackbody radiation,\n//  eta = 1; perfect blackbody\n//        0; perfect reflector\n//Use collected data to construct an estimate of eta for the house.\nconst eta = 1.0;  //grey body emissivity  1=ideal 0=sucks; data->eta estimate\nvar bob = {payload:(bt-aft),\n            topic:\"In-out DeltaT\",\n            kT4: (kT4).toPrecision(3),\n            netsurfacepowerdensity: (sigma*eta*kT4).toPrecision(3) //Watts/sqrmetre\n        }\nreturn bob;",
        "outputs": 1,
        "noerr": 0,
        "x": 2110,
        "y": 1040,
        "wires": [
            [
                "e546e4e5.1ab918",
                "6e3cb0b5.91c35",
                "f6053b5b.09fac8"
            ]
        ]
    },
    {
        "id": "e546e4e5.1ab918",
        "type": "switch",
        "z": "d46a7cc.f2b958",
        "name": "sort temperature topics",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Heat Vent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "In-out DeltaT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Basement Temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Reference",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 2760,
        "y": 880,
        "wires": [
            [
                "d7d80821.2827f8",
                "ef13e4fb.10ec18",
                "399519ff.c66ae6",
                "ec941283.136bf",
                "751b8133.8ae48"
            ],
            [
                "d7d80821.2827f8"
            ],
            [
                "d7d80821.2827f8"
            ],
            []
        ],
        "outputLabels": [
            "heat vent",
            "",
            "",
            ""
        ]
    },
    {
        "id": "d7d80821.2827f8",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "a62b14ff.59d4e8",
        "order": 1,
        "width": "6",
        "height": "7",
        "label": "House Temperatures ˚C",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "Energy Compare",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "512",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 3330,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "de366a8.f21c998",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "a62b14ff.59d4e8",
        "order": 5,
        "width": "6",
        "height": "3",
        "label": "dTvent/dt",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "Heat Vent Derivative",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "512",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 3860,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "44ec9f7e.bb136",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "sample frequency",
        "func": "if (msg.frequency)\n{\n    var x = (msg.frequency).toFixed(2);\n    node.status({text: x});\n    return {payload: \"\"+x, topic:\"frequency\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3670,
        "y": 780,
        "wires": [
            [
                "a5e21b7e.5a1de8"
            ]
        ]
    },
    {
        "id": "293a8496.d6c57c",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear derivative data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 3670,
        "y": 820,
        "wires": [
            [
                "de366a8.f21c998"
            ]
        ]
    },
    {
        "id": "a5e21b7e.5a1de8",
        "type": "ui_text",
        "z": "d46a7cc.f2b958",
        "group": "c49fd109.3b603",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Frequency (samples/hour):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 3920,
        "y": 780,
        "wires": []
    },
    {
        "id": "4924ce0f.b6db3",
        "type": "change",
        "z": "d46a7cc.f2b958",
        "name": "delete cruft",
        "rules": [
            {
                "t": "delete",
                "p": "datasheet",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "matrixA",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "matrixB",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "k",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2520,
        "y": 580,
        "wires": [
            [
                "38ad13d0.c752ec",
                "837e975d.7c8168",
                "e546e4e5.1ab918"
            ]
        ]
    },
    {
        "id": "78fb2294.8704dc",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "derivative (refactor me - see notes)",
        "func": "//REFACTOR NOTES:\n//  -provide a ratio with time derivative\n//  -provide a difference with time derivative\n//  -provide a dTr/dTbmt derivative\n\nvar oldtemp = context.get('lastTemp')||parseFloat(msg.payload);\nvar oldtime = context.get('lasttime')||(new Date());\n//need two variables for previous two readings, stored in context\n//use 2nd order (quadratic) slope analysis with three points\n//(3rd point is msg.payload)\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = new Date();\ncontext.set('lastTemp',nowtemp);\n\nvar timediff = nowtime-oldtime;//in milliseconds\ncontext.set('lasttime',nowtime);\n\nif (0 !== timediff)\n{\n    msg.frequency = (3600000/timediff).toPrecision(3); //in count/hr\n    return {payload: (1000*(nowtemp - oldtemp)/timediff).toPrecision(3), topic:\"1st derivative\", frequency: msg.frequency};\n\n}\nelse\n    return null;",
        "outputs": 1,
        "noerr": 0,
        "x": 2680,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "130abcee.ecf543",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "Heat as on/off",
        "func": "var last_furnace_state = context.get('last_furnace_state')||0;\nvar derivative = parseFloat(msg.payload);\nmsg.deriv = derivative;\n\nif (Math.abs(derivative) > +0.05) //heating up or cooling\n{\n    if (derivative > +0.05) //heating up or cooling\n        last_furnace_state =1; //on - heating\n    else \n        last_furnace_state =0; //off\n}\n\ncontext.set('last_furnace_state',last_furnace_state);\nmsg.payload = last_furnace_state;\n\nmsg.topic=\"Furnace State\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3640,
        "y": 720,
        "wires": [
            [
                "7cc536.ff833ac8",
                "dbd0ab50.242f58",
                "c2689b3a.3d9768"
            ]
        ]
    },
    {
        "id": "1acbc59c.e5343a",
        "type": "ui_text",
        "z": "d46a7cc.f2b958",
        "group": "c49fd109.3b603",
        "order": 4,
        "width": "4",
        "height": "1",
        "name": "Furnace ON/OFF text",
        "label": "Furnace is  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 4150,
        "y": 420,
        "wires": []
    },
    {
        "id": "a77378f.f588c88",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4090,
        "y": 460,
        "wires": []
    },
    {
        "id": "1081a920.ef7e57",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "furnace 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "twest",
        "payload": "1",
        "payloadType": "num",
        "x": 3660,
        "y": 420,
        "wires": [
            [
                "dbd0ab50.242f58"
            ]
        ]
    },
    {
        "id": "604f7d77.9fb084",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "furnace 0",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "twest",
        "payload": "0",
        "payloadType": "num",
        "x": 3660,
        "y": 380,
        "wires": [
            [
                "dbd0ab50.242f58"
            ]
        ]
    },
    {
        "id": "7cc536.ff833ac8",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "Binary Furnace History",
        "group": "c49fd109.3b603",
        "order": 2,
        "width": "6",
        "height": "3",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Furnace On/Off as 1/0",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 4130,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "dbd0ab50.242f58",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "ON/OFF translate",
        "func": "if (0 == msg.payload) return {payload:\"OFF\"};\nelse if (1 == msg.payload) return {payload:\" ON\"};\nelse return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3890,
        "y": 420,
        "wires": [
            [
                "a77378f.f588c88",
                "1acbc59c.e5343a"
            ]
        ]
    },
    {
        "id": "6e3cb0b5.91c35",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2390,
        "y": 1040,
        "wires": []
    },
    {
        "id": "241aae0.fdbe552",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "select Icon",
        "func": "msg.enabled = false; //disable clicking of the button - indication only\n\nswitch(msg.payload) {\n    case 0: msg.icon = 'fa-fire-extinguisher';\n            msg.color = 'blue';\n            break;\n    case 1: msg.icon = 'fa-fire';\n            msg.color = 'red';\n            break;\n    default: msg.icon = 'fa-bug';\n            msg.color = 'red';\n            break;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4190,
        "y": 720,
        "wires": [
            [
                "b0fa1ba2.4f05e8",
                "fe5645de.01a9b8"
            ]
        ]
    },
    {
        "id": "dc42798e.23bd88",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4710,
        "y": 760,
        "wires": []
    },
    {
        "id": "b0fa1ba2.4f05e8",
        "type": "ui_switch",
        "z": "d46a7cc.f2b958",
        "name": "Furnace Indicator",
        "label": "",
        "tooltip": "",
        "group": "3e728e23.c18d72",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "furnace state (switch)",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 4470,
        "y": 740,
        "wires": [
            [
                "dc42798e.23bd88"
            ]
        ]
    },
    {
        "id": "a404ba04.5bfb48",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "on/off period measure",
        "func": "var thenow = new Date();\nvar last_off_period = context.get('last_off_period')||null;\nvar last_on_period = context.get('last_on_period')||null;\nvar last_off_time = context.get('last_off_time')||thenow;\nvar last_on_time = context.get('last_on_time')||thenow;\nvar ison = false;\n\nswitch(msg.payload){\n    //furnace turns off\n    case 0: last_on_period = thenow - last_on_time;\n            last_off_time = thenow;\n            msg.last_on_period = last_on_period;\n            msg.payload = (last_on_period/60000).toFixed(2);\n            ison = false;\n            break;\n    //furnace turns on\n    case 1: last_off_period = thenow - last_off_time;\n            last_on_time = thenow;\n            msg.last_off_period = last_off_period;\n            msg.payload = (last_off_period/60000).toFixed(2);\n            ison = true;\n            break;\n    default:msg.payload = null; //mysterious input\n}\n\n//re-save the variables for next time.\ncontext.set('last_off_time',last_off_time);\ncontext.set('last_on_time',last_on_time);\ncontext.set('last_off_period',last_off_period);\ncontext.set('last_on_period',last_on_period);\n\n//don't pass data until it's valid, but pass the topic along to setup graph\nif ((null === msg.payload) || (null === last_off_period) || (null === last_on_period))\n{\n    node.status({fill:\"grey\",shape:\"ring\",text:\"waiting for enough valid data...\"});\n    msg.dutcycle = null;\n    msg.payload = null;\n    //send null data so nothing is plotted, but the time is incremented.\n    return [{payload: null, topic:\"off period\"},\n            {payload: null, topic:\"on period\"},\n            {payload: null, topic:\"duty cycle\"}];\n}\nelse\n{\n    msg.dutycycle = (100*last_on_period/(last_off_period+last_on_period)).toFixed(1);\n    if (ison)\n        node.status({fill:\"red\",shape:\"dot\",text:\"ON:\"+last_on_period+\" (mS), OFF:\"+last_off_period+\" (mS), DC: \"+msg.dutycycle});\n    else\n        node.status({fill:\"blue\",shape:\"ring\",text:\"ON:\"+last_on_period+\" (mS), OFF:\"+last_off_period+\" (mS), DC: \"+msg.dutycycle});\n\n    //[off period, on period, duty cycle]\n    return [{payload:(last_off_period/60000).toFixed(2),topic:\"off period\", units:\"minutes\",shortunits:\"min\"},\n            {payload: (last_on_period/60000).toFixed(2),topic:\"on period\", units:\"minutes\",shortunits:\"min\"}, \n            {payload: msg.dutycycle, topic:\"duty cycle\"}]; \n}",
        "outputs": 3,
        "noerr": 0,
        "x": 4150,
        "y": 660,
        "wires": [
            [
                "25cfb3b8.da304c",
                "e0461644.1fb9e8",
                "c783ef16.387c1"
            ],
            [
                "e0461644.1fb9e8",
                "e6e8e08.f19172",
                "c783ef16.387c1"
            ],
            [
                "697376bf.968c88",
                "e0461644.1fb9e8"
            ]
        ],
        "outputLabels": [
            "off",
            "on",
            "DC"
        ]
    },
    {
        "id": "c2689b3a.3d9768",
        "type": "rbe",
        "z": "d46a7cc.f2b958",
        "name": "rbe heat on/off",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 3930,
        "y": 720,
        "wires": [
            [
                "a404ba04.5bfb48",
                "241aae0.fdbe552"
            ]
        ]
    },
    {
        "id": "25cfb3b8.da304c",
        "type": "ui_text",
        "z": "d46a7cc.f2b958",
        "group": "c49fd109.3b603",
        "order": 7,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "last off period (mins):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 4770,
        "y": 520,
        "wires": []
    },
    {
        "id": "e6e8e08.f19172",
        "type": "ui_text",
        "z": "d46a7cc.f2b958",
        "group": "c49fd109.3b603",
        "order": 6,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "last on period (mins)",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 4770,
        "y": 580,
        "wires": []
    },
    {
        "id": "51ab26a9.ae54d8",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "S9V2 Furnace is 120,000 BTU per HOUR",
        "info": "",
        "x": 4090,
        "y": 380,
        "wires": []
    },
    {
        "id": "dd723b70.228dc8",
        "type": "ui_text",
        "z": "d46a7cc.f2b958",
        "group": "c49fd109.3b603",
        "order": 8,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "duty cycle (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 4750,
        "y": 660,
        "wires": []
    },
    {
        "id": "697376bf.968c88",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "duty cycle",
        "func": "if (isNaN(msg.payload)) return null;\nelse {\n    msg.topic =\"Duty Cycle (%)\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4450,
        "y": 680,
        "wires": [
            [
                "dd723b70.228dc8",
                "b3b9d9a8.4c4628",
                "a6b52a46.594ad8"
            ]
        ]
    },
    {
        "id": "fe5645de.01a9b8",
        "type": "ui_switch",
        "z": "d46a7cc.f2b958",
        "name": "Furnace Indicator 2",
        "label": "",
        "tooltip": "",
        "group": "c49fd109.3b603",
        "order": 5,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "furnace state (switch)",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "fa-fire",
        "oncolor": "red",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "fa-fire-extinguisher",
        "offcolor": "green",
        "x": 4480,
        "y": 780,
        "wires": [
            [
                "dc42798e.23bd88"
            ]
        ]
    },
    {
        "id": "e9f6cb0a.160938",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "clear furnace state",
        "func": "return {payload:0,topic:\"Furnace State\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 3350,
        "y": 720,
        "wires": [
            [
                "130abcee.ecf543"
            ]
        ]
    },
    {
        "id": "11ac0e83.ee53f1",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "activate",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3150,
        "y": 720,
        "wires": [
            [
                "e9f6cb0a.160938"
            ]
        ]
    },
    {
        "id": "e0461644.1fb9e8",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4370,
        "y": 520,
        "wires": []
    },
    {
        "id": "86f06a14.790f98",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "Heating Sensed (+dT/dt)",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "+0.1",
        "payloadType": "num",
        "x": 3340,
        "y": 620,
        "wires": [
            [
                "130abcee.ecf543"
            ]
        ]
    },
    {
        "id": "d8d3cec3.272c3",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "Cooling Sensed (-dT/dt)",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-0.1",
        "payloadType": "num",
        "x": 3330,
        "y": 660,
        "wires": [
            [
                "130abcee.ecf543"
            ]
        ]
    },
    {
        "id": "1c9b9d1.fe36463",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "kT4 graph (net surface power density)",
        "group": "553da004.aac26",
        "order": 2,
        "width": "6",
        "height": "3",
        "label": "net Power Density (radiation loss)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "net surface power density (Watts/square metre)",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "8192",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 2270,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "f6053b5b.09fac8",
        "type": "change",
        "z": "d46a7cc.f2b958",
        "name": "netsurfacepowerdensity to payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "netsurfacepowerdensity",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "net Surface Power Density (W/m^2)",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 1120,
        "wires": [
            [
                "1c9b9d1.fe36463"
            ]
        ]
    },
    {
        "id": "14a3f125.eb5c0f",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1980,
        "y": 1180,
        "wires": [
            [
                "1c9b9d1.fe36463"
            ]
        ]
    },
    {
        "id": "b3b9d9a8.4c4628",
        "type": "ui_gauge",
        "z": "d46a7cc.f2b958",
        "name": "DC gauge",
        "group": "c49fd109.3b603",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Furnace Duty Cycle",
        "label": "Furnace Duty Cycle",
        "format": "{{value | number:0}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 4730,
        "y": 700,
        "wires": []
    },
    {
        "id": "d52b4def.2ad4b",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Blackbody net Energy transfer Inside-Outside",
        "info": "blackbody energy radiative transfer\nE = k (Ti^4 - To^4)  \nnot normalize with k",
        "x": 2010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8bebe1cf.74142",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Sense & Interpret Basement 10k Thermistor",
        "info": "",
        "x": 1630,
        "y": 620,
        "wires": []
    },
    {
        "id": "7ed08b06.812f74",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Furnace Duty-Cycle",
        "info": "DC = 100*Ton/(Toff + Ton)\n\nTon = time furnace on\nToff = time furnace off\n\nLast two values used.\n\nThe furnace must go through at slightly MORE\nthan one complete on-off or off-on cycle\nbefore the duty cycle value becomes valid.\nDefault: 0%",
        "x": 4100,
        "y": 600,
        "wires": []
    },
    {
        "id": "8830861a.77cf78",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Heat Vent dT/dt as Proxy for d(Furnace On/Off)/dt ",
        "info": "",
        "x": 3290,
        "y": 800,
        "wires": []
    },
    {
        "id": "c783ef16.387c1",
        "type": "join",
        "z": "d46a7cc.f2b958",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 900,
        "wires": [
            [
                "b1c1bbab.4e3e48"
            ]
        ]
    },
    {
        "id": "b1c1bbab.4e3e48",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "2-value Furnace DutyCycle",
        "func": "var x = [\n    {\n        \"series\": [\"Furnace Duty Cycle\"],\n        \"data\": [   [   (parseFloat(msg.payload[\"on period\"])).toFixed(0),\n                        (parseFloat(msg.payload[\"off period\"])).toFixed(0)\n                ]   ],\n        \"labels\": [\"Furnace On (mins)\",\"Furnace Off (mins)\"]\n    }\n]\nreturn {payload:x, complete:true};",
        "outputs": 1,
        "noerr": 0,
        "x": 4610,
        "y": 900,
        "wires": [
            [
                "5dd1b001.a22e5"
            ]
        ]
    },
    {
        "id": "5dd1b001.a22e5",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4830,
        "y": 900,
        "wires": []
    },
    {
        "id": "a6b52a46.594ad8",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "7day duty cycle history",
        "group": "c49fd109.3b603",
        "order": 3,
        "width": "6",
        "height": "3",
        "label": "duty cycle history",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Duty Cycle history",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "0",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 4780,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "399519ff.c66ae6",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "a62b14ff.59d4e8",
        "order": 4,
        "width": "6",
        "height": "3",
        "label": "Tvent",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "Heat Vent Temperature",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "512",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 2970,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a9e33170.561cd",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 2800,
        "y": 780,
        "wires": [
            [
                "399519ff.c66ae6"
            ]
        ]
    },
    {
        "id": "2161559a.de9eaa",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 4440,
        "y": 360,
        "wires": [
            [
                "a6b52a46.594ad8",
                "25cfb3b8.da304c",
                "e6e8e08.f19172",
                "b3b9d9a8.4c4628",
                "dd723b70.228dc8"
            ]
        ]
    },
    {
        "id": "c6bd80d.f39428",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4150,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a1291d9e.5ed6e",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "estimate Tau from T",
        "func": "if (null === msg.payload) \n{\n    //pass along topic for setting up graphs, even if no data yet\n    return {payload: null, topic:\"Tau (minutes) - from Temperatures\"};\n}\n\nvar oldval = parseFloat(msg.payload[0]);\nvar latestval = parseFloat(msg.payload[1]);\n\nif (Math.abs(oldval)>0 && Math.abs(latestval)>0)\n{\n     //these temperatures aren't much more accurate than this\n    //throw away low-accuracy dataz\n    if (Math.abs(oldval-latestval)>0.5)\n    {\n        var ratio = oldval/latestval;\n        if (Math.abs(ratio)>0)\n        {\n            var tau = (parseFloat(msg.timediff)/1000)/ Math.log(ratio); //1000 scale for mS to S\n            tau = tau/60.0; //convert to minutes\n            \n            if (oldval-latestval > 0) //heating or cooling?\n            { \n                //cooling\n                node.status({fill:\"green\",shape:\"dot\", text:\"Tau OK : \"+tau.toFixed(0)+\" (cooling)\"});\n            }\n            else\n            {\n                //heating\n                node.status({fill:\"green\",shape:\"dot\", text:\"Tau OK : \"+tau.toFixed(0)+\" (heating)\"});\n            }\n            \n            if (tau > 0.01) //this calculation was only valid for exponential DECAY\n            {\n                return {payload: tau.toFixed(2), topic:\"Tau (minutes) - from Temperatures\"};\n            }\n        }\n        else\n        {\n            node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (negative ratio values?)\"});\n        }\n    }\n           else\n        {\n            node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (values too close)\"});\n        }\n}\nelse\n    node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (zero value \"+oldval.toPrecision(3)+\" \"+latestval.toPrecision(3)+\")\"});\n\nreturn {payload: null, topic:\"Tau (minutes) - from Temperatures\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 3910,
        "y": 1420,
        "wires": [
            [
                "c6bd80d.f39428",
                "906066d1.6f9f98"
            ]
        ]
    },
    {
        "id": "79087fae.86f78",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 3900,
        "y": 540,
        "wires": [
            [
                "7cc536.ff833ac8"
            ]
        ]
    },
    {
        "id": "5dc64f13.a239b",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 3850,
        "y": 1360,
        "wires": []
    },
    {
        "id": "906066d1.6f9f98",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "551ae7d6.aae518",
        "order": 2,
        "width": "6",
        "height": "3",
        "label": "Tau (from T)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Tau constant",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 4180,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "630ce854.9cf318",
        "type": "inject",
        "z": "d46a7cc.f2b958",
        "name": "clear Tau graphs",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 3890,
        "y": 1500,
        "wires": [
            [
                "906066d1.6f9f98",
                "8b0cc32.f74f34"
            ]
        ]
    },
    {
        "id": "fee0c473.011f38",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "send sets of values with timediff",
        "func": "var oldpoint = context.get('lastPoint')||{payload: null, topic: null,timestamp:null};\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = parseFloat(msg.timestamp); \nvar oldtemp = parseFloat(oldpoint.payload);\nvar oldtime = parseFloat(oldpoint.timestamp); \nif (0===nowtime|| 0===oldtime) return {payload: null};\n\ncontext.set('lastPoint',{payload:nowtemp, topic: \"f(t),t\",timestamp:nowtime});\n\nvar timediff = (nowtime-oldtime).toFixed(0);//in milliseconds\n\nif ((0 !== timediff) && oldtime && nowtime)\n{\n    node.status({text:\"p[0] = \"+oldtemp.toFixed(3)+\" : p[1] = \"+nowtemp.toFixed(3)+\" : tdiff = \"+timediff+\" mS\"});\n    return {payload: [oldtemp, nowtemp], timediff: timediff, topic:\"Two consecutive values w/ timediff\",timestamp:nowtime};\n}\nelse\n    return null;",
        "outputs": 1,
        "noerr": 2,
        "x": 3610,
        "y": 1300,
        "wires": [
            [
                "df7fc639.208038"
            ]
        ]
    },
    {
        "id": "df7fc639.208038",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "estimate Tau from dT/dt",
        "func": "if (null === msg.payload) \n{\n    //pass along topic for setting up graphs, even if no data yet\n    return {payload: null, topic:\"Tau (min) - from dT/dt\"};\n}\n\nvar oldval = parseFloat(msg.payload[0]);\nvar latestval = parseFloat(msg.payload[1]);\n\nif (Math.abs(oldval)>0 && Math.abs(latestval)>0)\n{\n    if (Math.abs(oldval-latestval)>0.002) //if not noise floor\n    {\n        var ratio = oldval/latestval;\n        if (Math.abs(ratio)>0)\n        {\n            var tau = (parseFloat(msg.timediff)/1000)/ Math.log(ratio); //1000 scale for mS to S\n            tau = tau/60.0; //convert to minutes\n            if (tau > 0.01) //this is only valid for analysing exponential DECAY\n            {\n                node.status({fill:\"green\",shape:\"dot\", text:\"Tau OK : \"+tau.toFixed(0)});\n                return {payload: tau, topic:\"Tau (min) - from dT/dt\"};\n            }\n        }\n        else\n        {\n            node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (bad ratio)\"});\n        }\n    }\n    else\n    {\n        node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (values too close)\"});\n    }\n}\nelse\n    node.status({fill:\"red\",shape:\"dot\",text:\"Tau rejected (zero value \"+oldval.toPrecision(3)+\" \"+latestval.toPrecision(3)+\")\"});\n\nreturn {payload: null, topic:\"Tau (min) - from dT/dt\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 3920,
        "y": 1300,
        "wires": [
            [
                "8b0cc32.f74f34"
            ]
        ]
    },
    {
        "id": "8b0cc32.f74f34",
        "type": "ui_chart",
        "z": "d46a7cc.f2b958",
        "name": "",
        "group": "551ae7d6.aae518",
        "order": 4,
        "width": "6",
        "height": "3",
        "label": "Tau (from dT/dt)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Tau constant",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "0",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#dce716",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#1b5f5a"
        ],
        "outputs": 1,
        "x": 4190,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "191d5053.e6e2b",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Estimate exponential time constant Tau",
        "info": "",
        "x": 3790,
        "y": 1240,
        "wires": []
    },
    {
        "id": "bada153b.4525e8",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "throw away first 10 readings",
        "func": "const COUNTVAL = 10;\n\nvar count = parseInt(context.get('10count'));\nif (isNaN(count)) count = COUNTVAL;\n\nif (count<1)\n{\n    return msg;\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"dot\", text:\"Discarded readings: \"+(COUNTVAL-count)});\n    if (null !== msg.payload && 0!==count)\n      count-=1;\n      \n    //do this here so the zero-check is only done COUNTVAL times\n    if (count<1) \n    {\n        node.status({fill:\"green\",shape:\"dot\", text:\"Pass-through mode\"});\n        context.set('10count',0);\n    }\n    else\n        context.set('10count',count);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 660,
        "wires": [
            [
                "203ce045.dfc32"
            ]
        ]
    },
    {
        "id": "ec941283.136bf",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2970,
        "y": 820,
        "wires": []
    },
    {
        "id": "52ff53b5.ad00ac",
        "type": "debug",
        "z": "d46a7cc.f2b958",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 3590,
        "y": 880,
        "wires": []
    },
    {
        "id": "f721d6b.f08de28",
        "type": "catch",
        "z": "d46a7cc.f2b958",
        "name": "",
        "scope": [
            "b3b9d9a8.4c4628",
            "697376bf.968c88",
            "dd723b70.228dc8",
            "25cfb3b8.da304c",
            "e6e8e08.f19172"
        ],
        "x": 4600,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "5bd99c8.fa42664",
        "type": "ui_numeric",
        "z": "d46a7cc.f2b958",
        "name": "Furnace BTU",
        "label": "Furnace BTU",
        "tooltip": "BTU of your Furnace (BTU=British Thermal Units)",
        "group": "c49fd109.3b603",
        "order": 11,
        "width": "4",
        "height": "1",
        "passthru": true,
        "topic": "My Furnace BTU",
        "format": "{{value}}",
        "min": "10000",
        "max": "200000",
        "step": "10000",
        "x": 2400,
        "y": 1460,
        "wires": [
            [
                "4e581e44.b1a7e"
            ]
        ]
    },
    {
        "id": "2976a3a0.d6895c",
        "type": "ui_switch",
        "z": "d46a7cc.f2b958",
        "name": "un/lock BTU",
        "label": "un/lock BTU",
        "tooltip": "",
        "group": "c49fd109.3b603",
        "order": 10,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "un/lock BTU",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1920,
        "y": 1460,
        "wires": [
            [
                "1648735f.e9b78d"
            ]
        ]
    },
    {
        "id": "1648735f.e9b78d",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "enable/disable BTU input",
        "func": "if (msg.payload)\n{\n    msg.topic = \"EDIT\";\n    msg.enabled = true;\n}\nelse\n{\n    msg.topic = \"Lock\";\n    msg.enabled = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2160,
        "y": 1460,
        "wires": [
            [
                "5bd99c8.fa42664"
            ]
        ]
    },
    {
        "id": "4e581e44.b1a7e",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "persisting BTU value",
        "func": "if (msg.persBTU) return null; //don't keep looping\n\nvar persistentBTU = context.get('persBTU')||120000;\nif (msg.payload && (persistentBTU !== msg.payload))\n{\n    msg.persBTU = persistentBTU;\n    context.set('persBTU',msg.payload);\n}\n    \ncontext.set('persBTU',persistentBTU);\nmsg.payload = persistentBTU;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2650,
        "y": 1460,
        "wires": [
            [
                "1648735f.e9b78d"
            ]
        ]
    },
    {
        "id": "bff1eaf9.400e18",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "Set the on-state BTU of the Furnace",
        "info": "",
        "x": 2180,
        "y": 1400,
        "wires": []
    },
    {
        "id": "751b8133.8ae48",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "send sets of values with timediff",
        "func": "var oldpoint = context.get('lastPoint')||{payload: null, topic: null,timestamp:null};\n\nvar nowtemp = parseFloat(msg.payload);\nvar nowtime = parseFloat(msg.timestamp); \nvar oldtemp = parseFloat(oldpoint.payload);\nvar oldtime = parseFloat(oldpoint.timestamp); \nif (0===nowtime || 0===oldtime) return {payload: null};\n\ncontext.set('lastPoint',{payload:nowtemp, topic: \"f(t),t\",timestamp:nowtime});\n\nvar timediff = (nowtime-oldtime).toFixed(0);//in milliseconds\n\nif ((0 !== timediff) && oldtime && nowtime)\n{\n    node.status({text:\"p[0] = \"+oldtemp.toFixed(3)+\" : p[1] = \"+nowtemp.toFixed(3)+\" : tdiff = \"+timediff+\" mS\"});\n    return {payload: [oldtemp, nowtemp], timediff: timediff, topic:\"Two consecutive values w/ timediff\",timestamp:nowtime};\n}\nelse\n    return null;",
        "outputs": 1,
        "noerr": 2,
        "x": 3610,
        "y": 1420,
        "wires": [
            [
                "a1291d9e.5ed6e",
                "5dc64f13.a239b"
            ]
        ]
    },
    {
        "id": "e8683277.1797d",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "formerly the ncd-ads1115 node",
        "info": "",
        "x": 380,
        "y": 400,
        "wires": []
    },
    {
        "id": "cd417b49.32be88",
        "type": "function",
        "z": "d46a7cc.f2b958",
        "name": "",
        "func": "//node.warn({payload:msg.topic});\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "a5946bd.f5a6b98",
                "b3402471.4cbfd8"
            ]
        ]
    },
    {
        "id": "3caeb06958fb9b5c",
        "type": "comment",
        "z": "d46a7cc.f2b958",
        "name": "INPUT from data source",
        "info": "",
        "x": 170,
        "y": 440,
        "wires": []
    },
    {
        "id": "7c650e5912e2d9e9",
        "type": "ui_text",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "group": "209041db3755ab7a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Blood Pressure Text",
        "label": "Blood Pressure",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 562.0833625793457,
        "y": 176.25003242492676,
        "wires": []
    },
    {
        "id": "e4b67dd365a0f65a",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "text injector",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "<todo:filewrite>",
        "payloadType": "str",
        "x": 338.75001525878906,
        "y": 176.2500286102295,
        "wires": [
            [
                "7c650e5912e2d9e9",
                "5eeb381d03674050"
            ]
        ]
    },
    {
        "id": "01e89a8a9e392897",
        "type": "ui_slider",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "label": "BP systolic",
        "tooltip": "",
        "group": "209041db3755ab7a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "bpsys",
        "topicType": "str",
        "min": "90",
        "max": "200",
        "step": 1,
        "className": "",
        "x": 300.41666412353516,
        "y": 247.9167022705078,
        "wires": [
            [
                "5eeb381d03674050",
                "4e34f6695c7c3c3c"
            ]
        ]
    },
    {
        "id": "5eeb381d03674050",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "catchall",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 528.7500152587891,
        "y": 256.2500286102295,
        "wires": []
    },
    {
        "id": "b3ad3f2a93c35345",
        "type": "ui_button",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "submit",
        "group": "209041db3755ab7a",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "submit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "submit",
        "payloadType": "str",
        "topic": "submit",
        "topicType": "str",
        "x": 387.22159576416016,
        "y": 446.8097457885742,
        "wires": [
            [
                "4e34f6695c7c3c3c"
            ]
        ]
    },
    {
        "id": "3840082f6a64e21f",
        "type": "ui_slider",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "label": "HR slider",
        "tooltip": "",
        "group": "209041db3755ab7a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "hr",
        "topicType": "str",
        "min": "30",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 292.9488945007324,
        "y": 364.431845664978,
        "wires": [
            [
                "5eeb381d03674050",
                "4e34f6695c7c3c3c"
            ]
        ]
    },
    {
        "id": "4e34f6695c7c3c3c",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "unified measurement / submit to logfile",
        "func": "//upon a msg with msg.topic =\"submit\", send the \n//BP/HR pair, \n//along with timestamp,\n//in JSON format\n//to a default loggin filename\n\n\nvar bpsys = context.get('bloodpSys')||0;\nvar bpdia = context.get('bloodpDia')||0;\nvar hr = context.get('heartr')||0;\nvar loggername = flow.get('logger')||\"_default_\"\n\n//bp or hr entries get saved to context until time to submit\n\n//var bp = 30+70*Math.random(), hr = 100+100*Math.random();\n\nconst event = Date.now();\nmsg.timestamp = event;\n\n//change the data logging filename\nif (\"logwho\" == msg.topic) \n{ \n    loggername = msg.payload;\n    flow.set('logger',loggername);//re-save current logger\n    return;\n}\n\nmsg.filename = \".node-red/log/BPHR_\"+loggername+\"_file.json\";\n\nif (\"hr\" == msg.topic) \n{ \n    hr = msg.payload;\n    context.set('heartr',hr);//re-save heart rate\n    return;\n}\n    \nif (\"bpsys\" == msg.topic) \n{\n    bpsys = msg.payload;\n    context.set('bloodpSys',bpsys);//re-save systolic blood pressure\n    return;\n}\n\nif (\"bpdia\" == msg.topic) \n{\n    bpdia = msg.payload;\n    context.set('bloodpDia',bpdia);//re-save diastolic blood pressure\n    return;\n}\n\nif (\"submit\" == msg.payload)\n    msg.payload = JSON.stringify({\"timestamp\": event, \n                                    \"bp\": {\"sys\": bpsys, \"dia\": bpdia}, \n                                    \"hr\": hr,\n                                    \"HumanTime\":(Date(event).toLocaleString('en-US')).slice(0,-32)});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 614.8049125671387,
        "y": 352.5218200683594,
        "wires": [
            [
                "b0be4c361b399496",
                "99c6450f780dc344",
                "6e6e7a4a9848cbd5",
                "bb33c65e944e6582"
            ]
        ]
    },
    {
        "id": "b0be4c361b399496",
        "type": "ui_text",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "group": "209041db3755ab7a",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Most recent LogFile Name",
        "label": "Most Recent LogFile written : ",
        "format": "{{msg.filename}}",
        "layout": "col-center",
        "className": "",
        "x": 943.006591796875,
        "y": 316.40146827697754,
        "wires": []
    },
    {
        "id": "23963338e33ce1e4",
        "type": "comment",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "Use UI interface for entering Blood Pressure and Heart Rate",
        "info": "",
        "x": 451.78981018066406,
        "y": 93.38776588439941,
        "wires": []
    },
    {
        "id": "99c6450f780dc344",
        "type": "ui_text",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "group": "209041db3755ab7a",
        "order": 6,
        "width": "6",
        "height": "2",
        "name": "Last Entry JSON",
        "label": "Last Entry JSON : ",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 919.6733016967773,
        "y": 369.7348747253418,
        "wires": []
    },
    {
        "id": "6e6e7a4a9848cbd5",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 884.6732940673828,
        "y": 426.4015483856201,
        "wires": []
    },
    {
        "id": "fd8b984d330e7885",
        "type": "file",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "file create/append",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1053.4423065185547,
        "y": 270.22971057891846,
        "wires": [
            []
        ]
    },
    {
        "id": "bb33c65e944e6582",
        "type": "json",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 870.1183471679688,
        "y": 271.6454277038574,
        "wires": [
            [
                "95f0596d0901d68d",
                "fd8b984d330e7885"
            ]
        ]
    },
    {
        "id": "95f0596d0901d68d",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "payload is string",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1043.0066566467285,
        "y": 233.0681929588318,
        "wires": []
    },
    {
        "id": "d73698628b0b4ef9",
        "type": "ui_button",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "nothing [was delete last entry]",
        "group": "209041db3755ab7a",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "[n.i.] delete last entry",
        "tooltip": "",
        "color": "",
        "bgcolor": "#b2b667",
        "className": "",
        "icon": "",
        "payload": "DeleteLastEntry",
        "payloadType": "str",
        "topic": "delete last entry",
        "topicType": "str",
        "x": 245.14947509765625,
        "y": 506.63963890075684,
        "wires": [
            [
                "dc434a4997975dfb"
            ]
        ]
    },
    {
        "id": "dc434a4997975dfb",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "notice msg",
        "func": "msg.payload = \"(Non)Delete attempt \"+Date.now();\nreturn msg;\n\n//originally:\n//magic function grabs file handle deletes last line",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465.1136169433594,
        "y": 506.67853927612305,
        "wires": [
            [
                "99c6450f780dc344"
            ]
        ]
    },
    {
        "id": "e8e81bd9b1785ce2",
        "type": "ui_slider",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "label": "BP diastolic",
        "tooltip": "",
        "group": "209041db3755ab7a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "bpdia",
        "topicType": "str",
        "min": "40",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 299.6732940673828,
        "y": 304.73486137390137,
        "wires": [
            [
                "4e34f6695c7c3c3c",
                "5eeb381d03674050"
            ]
        ]
    },
    {
        "id": "ffc8332c97e468d2",
        "type": "ui_dropdown",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "label": "Data Owner",
        "tooltip": "",
        "place": "Select logging",
        "group": "209041db3755ab7a",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Dad",
                "value": "Dad",
                "type": "str"
            },
            {
                "label": "Mom",
                "value": "Mom",
                "type": "str"
            },
            {
                "label": "Luc",
                "value": "Luc",
                "type": "str"
            },
            {
                "label": "Miranda",
                "value": "Miranda",
                "type": "str"
            },
            {
                "label": "_default_",
                "value": "_default_",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "logwho",
        "topicType": "str",
        "className": "",
        "x": 455.12315368652344,
        "y": 583.8708038330078,
        "wires": [
            [
                "62620305b5c00282",
                "4e34f6695c7c3c3c"
            ]
        ]
    },
    {
        "id": "62620305b5c00282",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 603.0066261291504,
        "y": 583.2196779251099,
        "wires": []
    },
    {
        "id": "64d61884bd1b1565",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "choose default logfile",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 263.00662994384766,
        "y": 584.7348957061768,
        "wires": [
            [
                "ffc8332c97e468d2"
            ]
        ]
    },
    {
        "id": "f6a14855e979be98",
        "type": "ui_chart",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "",
        "group": "fb506774afbf57bd",
        "order": 3,
        "width": "6",
        "height": "6",
        "label": "{{msg.label}}",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "40",
        "ymax": "160",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1591.9491424560547,
        "y": 842.8347911834717,
        "wires": [
            []
        ]
    },
    {
        "id": "802d7b3f74a05af8",
        "type": "ui_button",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "graph file",
        "group": "fb506774afbf57bd",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "graph file",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "graph file",
        "payloadType": "str",
        "topic": "graph file",
        "topicType": "str",
        "x": 171.16138076782227,
        "y": 825.1514940261841,
        "wires": [
            [
                "4110f2e76abb63d5"
            ]
        ]
    },
    {
        "id": "4110f2e76abb63d5",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "set msg.filename to current selection",
        "func": "\n//example log file lines (in msg.payload?)\n//{\"timestamp\":1731892087899,\"bp\":{\"sys\":122,\"dia\":68},\"hr\":63,\"HumanTime\":\"Sun Nov 17 2024 19:08:07 \"}\n//{\"timestamp\":1731892192536,\"bp\":{\"sys\":125,\"dia\":71},\"hr\":43,\"HumanTime\":\"Sun Nov 17 2024 19:09:52 \"}\n\nif (null === msg.payload) return null;\n\nvar loggername = flow.get('logger')||\"_default_\";\n\nif (\"clear\" == msg.payload) \n{\n    loggername = \"_default_\";  //set to non-writeable-by-user file\n    flow.set('logger',loggername);//re-save current logger\n}\n\nmsg.filename = \".node-red/log/BPHR_\"+loggername+\"_file.json\";\nmsg.logger = loggername;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 458.2683334350586,
        "y": 822.1046876907349,
        "wires": [
            [
                "fa8b1d51952da144",
                "40deb6bbd22880d1"
            ]
        ]
    },
    {
        "id": "fa8b1d51952da144",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 699.679386138916,
        "y": 788.1818284988403,
        "wires": []
    },
    {
        "id": "40deb6bbd22880d1",
        "type": "file in",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "<specify file with msg.filename>",
        "filename": "",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 771.8553504943848,
        "y": 825.5709781646729,
        "wires": [
            [
                "e057a03af9a30f69",
                "a842cf72ccf815a1",
                "0c0ed60cdbcc5391"
            ]
        ],
        "info": "om"
    },
    {
        "id": "f2834245908bf8be",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "data2graph",
        "func": "/* TODO: for loading a chart all at once, instead of point by point\n\n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n*/\n\nvar localob = msg.payload;\nvar loggername = msg.logger;\n\ndelete(msg.payload);\n\nvar flsepacket = { \"payload\": false};\n\nvar msg1, msg2, msg3; //i used 3 variables, so what\n\n//this msg, when sent to a ui dashboard chart, was supposed to allow plotting data\n//without interpolation between points.  Doesn't work yet - still interpolates.\nconst nulmsg = { \"payload\": null, \"label\": \"BP/HR \"+loggername };\n\nmsg1 = { \"payload\": localob.bp.sys, \"timestamp\" : localob.timestamp,\n        \"topic\": \"Systolic\", \"label\": \"BP/HR \"+loggername };\n        node.send(msg1);\n\n//this allegedly breaks up interpolating lines\n// doesn't work  - still interpolates\n//flsepacket.topic = msg1.topic;\n//node.send(flsepacket);\n\nmsg2 = { \"payload\": localob.bp.dia, \"timestamp\" : localob.timestamp,\n        \"topic\": \"Diastolic\", \"label\": \"BP/HR \"+loggername };\n        node.send(msg2);\n//flsepacket.topic = msg2.topic;\n//node.send(flsepacket);\n\nmsg3 = { \"payload\": localob.hr, \"timestamp\" : localob.timestamp,\n        \"topic\": \"heartrate\", \"label\": \"BP/HR \"+loggername };\n        node.send(msg3);\n        \n//flsepacket.topic = msg3.topic;\n//node.send(flsepacket);\n\nreturn;// msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1262.2020835876465,
        "y": 909.4232115745544,
        "wires": [
            [
                "e966d3664fa59dab",
                "f6a14855e979be98"
            ]
        ]
    },
    {
        "id": "7d23e28bfcfadab8",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1245.6795024871826,
        "y": 952.181755065918,
        "wires": []
    },
    {
        "id": "e057a03af9a30f69",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "payload JSON->JSO",
        "func": "if (null === msg.payload) return;\nvar myJSob = JSON.parse(msg.payload);  //take payload, make object\nif (null === myJSob) return;\ndelete(msg.payload);\nmsg.payload = myJSob;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1032.202091217041,
        "y": 909.4403009414673,
        "wires": [
            [
                "7d23e28bfcfadab8",
                "f2834245908bf8be"
            ]
        ]
    },
    {
        "id": "e966d3664fa59dab",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1537.0127410888672,
        "y": 908.5151720046997,
        "wires": []
    },
    {
        "id": "7829b3c55b658c4d",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "clear chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1091.6794471740723,
        "y": 846.1818284988403,
        "wires": [
            [
                "b8a5cb9fdb8f2fbd"
            ]
        ]
    },
    {
        "id": "b8a5cb9fdb8f2fbd",
        "type": "ui_button",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "clear ui chart",
        "group": "fb506774afbf57bd",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": true,
        "label": "clear chart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear chart",
        "topicType": "str",
        "x": 1251.6794471740723,
        "y": 846.1818284988403,
        "wires": [
            [
                "f6a14855e979be98"
            ]
        ]
    },
    {
        "id": "b2253363ef8e886b",
        "type": "catch",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "Unexpected EOL",
        "scope": [
            "e057a03af9a30f69"
        ],
        "uncaught": false,
        "x": 1004.2249183654785,
        "y": 996.2415075302124,
        "wires": [
            [
                "e8e8339822c113cf"
            ]
        ]
    },
    {
        "id": "e8e8339822c113cf",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1188.2075805664062,
        "y": 994.9800939559937,
        "wires": []
    },
    {
        "id": "a842cf72ccf815a1",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 988.5365180969238,
        "y": 727.6104764938354,
        "wires": []
    },
    {
        "id": "b06b4fe095b256e3",
        "type": "debug",
        "z": "1679c76605c63db4",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 678.3259010314941,
        "y": 1225.3898973464966,
        "wires": []
    },
    {
        "id": "0c0ed60cdbcc5391",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "93966c0d9154bf1a",
        "name": "re-write as array file",
        "func": "if (null === msg.payload) return;\n\n//to read the JSON correctly, some tools need the input\n//text to be in array format (i.e., [{},{},...,{}])\n\nif (\"\" != msg.payload)\n    node.status({\"text\": msg.payload}); //\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1065.9095993041992,
        "y": 786.7104005813599,
        "wires": [
            []
        ]
    },
    {
        "id": "2e65e6f3d4f36c6f",
        "type": "comment",
        "z": "1679c76605c63db4",
        "name": "Sorting Hat Resources",
        "info": "",
        "x": 272.0585632324219,
        "y": 1210.5060364815847,
        "wires": []
    },
    {
        "id": "b8940bb9ce82eb48",
        "type": "http in",
        "z": "1679c76605c63db4",
        "name": "POST - /BP/Sort",
        "url": "/BP/Sort",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 292.0684596470424,
        "y": 1282.5546379045759,
        "wires": [
            [
                "b06b4fe095b256e3",
                "610f0779325d90cc"
            ]
        ]
    },
    {
        "id": "d1528ea9c4c7ad97",
        "type": "comment",
        "z": "1679c76605c63db4",
        "name": "test local REST",
        "info": "",
        "x": 296.8154830932617,
        "y": 1349.6653485298157,
        "wires": []
    },
    {
        "id": "69632c1179d7d046",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 132.01824188232422,
        "y": 1393.406499862671,
        "wires": [
            [
                "db4bf56e3cf4369c"
            ]
        ]
    },
    {
        "id": "7158603a08932b2e",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130.07810974121094,
        "y": 1442.9767513275146,
        "wires": [
            [
                "db4bf56e3cf4369c"
            ]
        ]
    },
    {
        "id": "db4bf56e3cf4369c",
        "type": "http request",
        "z": "1679c76605c63db4",
        "name": "to /BP/Sort -localtest",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "10.9.142.142:1880/BP/Sort",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310.9424934387207,
        "y": 1394.2845516204834,
        "wires": [
            [
                "5c8195e97c74f2b8"
            ]
        ]
    },
    {
        "id": "ce198b168df531d3",
        "type": "debug",
        "z": "1679c76605c63db4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 675.5896949768066,
        "y": 1393.4929780960083,
        "wires": []
    },
    {
        "id": "2a6f6e9eed172e22",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "message array",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{ \"message1\": \"first message\"},{\"message2\":\"second message\"}]",
        "payloadType": "json",
        "x": 164.13690185546875,
        "y": 1506.03173828125,
        "wires": [
            [
                "db4bf56e3cf4369c"
            ]
        ]
    },
    {
        "id": "fd6d8ea7582d9e94",
        "type": "http response",
        "z": "1679c76605c63db4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 793.7252140045166,
        "y": 1276.8999395370483,
        "wires": []
    },
    {
        "id": "5c8195e97c74f2b8",
        "type": "function",
        "z": "1679c76605c63db4",
        "name": "parse",
        "func": "if (msg.payload === String)\n    msg.json = \"it's type String\";\n//else if (msg.payload instanceof typeof({}))\n//    msg.json = msg.payload;\nelse if (typeof msg.payload == 'string')\n{\n    try {\n        msg.json = JSON.parse(msg.payload);\n    }\n    catch (e)\n    {\n        msg.json = \"it's a non-JSON string\"\n    }\n}\nelse if (typeof msg.payload == 'object')\n    msg.json = \"it's a stringObject\";\nelse if (typeof msg.payload == 'number')\n    msg.json = \"it's a stringnumber\";\nelse\n    msg.json = \"payload not any listed type\";\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 502.0585517883301,
        "y": 1393.8939094543457,
        "wires": [
            [
                "ce198b168df531d3"
            ]
        ]
    },
    {
        "id": "610f0779325d90cc",
        "type": "function",
        "z": "1679c76605c63db4",
        "name": "Process Sort Request",
        "func": "if (typeof msg.payload === 'string' || msg.payload instanceof String)\n{\n    // payload is a a string\n    var payloadobject = JSON.parse(msg.payload);\n    switch (typeof payloadobject)\n    {\n        case 'array': node.status(\"payload string has array\");\n                        break;\n        \n        case 'object': if (Array.isArray(payloadobject))\n                            node.status(\"payload string has array\");\n                        else\n                            node.status(\"payload string has object\");\n                        break;\n        \n        case 'string': node.status(\"payload string has string\");\n                        break;\n        \n        default: node.status(\"Unprepared for payload string to have type \"+typeof msg.payload);\n    }\n    msg.payload = JSON.stringify(payloadobject);\n}\nelse\n{\n    //payload not a string\n    switch (typeof msg.payload)\n    {\n        case 'array': node.status(\"array payload\");\n                        break;\n        \n        case 'object': if (Array.isArray(payloadobject))\n                            node.status(\"payload object has array\");\n                        else\n                            node.status(\"payload object is an object\");\n                        break;\n        \n        case 'string': node.status(\"string payload - should not get here\");\n                        break;\n        \n        default: node.status(\"Unprepared for \"+typeof msg.payload+\"-type payload\");\n    }\n    //node.status(\"posted payload parser: payload not a string\");\n}\n\nmsg.from = \"Process Sort Request\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 554.920676095145,
        "y": 1281.041750767299,
        "wires": [
            [
                "fd6d8ea7582d9e94"
            ]
        ]
    },
    {
        "id": "016270ed79b89778",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "\"string\"",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "string",
        "payloadType": "str",
        "x": 129.8511962890625,
        "y": 1563.1746368408203,
        "wires": [
            [
                "db4bf56e3cf4369c"
            ]
        ]
    },
    {
        "id": "4b604c82c11ba5b9",
        "type": "catch",
        "z": "1679c76605c63db4",
        "name": "",
        "scope": [
            "db4bf56e3cf4369c"
        ],
        "uncaught": false,
        "x": 380.63988821847096,
        "y": 1447.4107693219864,
        "wires": [
            [
                "ce198b168df531d3"
            ]
        ]
    },
    {
        "id": "97078612b1e9c52a",
        "type": "ui_multistate_switch",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "group": "209041db3755ab7a",
        "order": 9,
        "width": "6",
        "height": 1,
        "label": "enable submit",
        "stateField": "enabled",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": false,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "enable",
                "value": "true",
                "valueType": "bool",
                "color": "#009933"
            },
            {
                "label": "disable",
                "value": "false",
                "valueType": "bool",
                "color": "#660000"
            }
        ],
        "topic": "",
        "x": 224.31439208984375,
        "y": 445.4861650466919,
        "wires": [
            [
                "b3ad3f2a93c35345"
            ]
        ]
    },
    {
        "id": "e95bb029e6bcf044",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "cf2db808c9c9e913",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 129.07986958821613,
        "y": 390.3819408365885,
        "wires": [
            [
                "97078612b1e9c52a"
            ]
        ]
    },
    {
        "id": "b11b0817690ecea5",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "stringified message array",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{ \"message1\": \"first message\"},{\"message2\":\"second message\"}]",
        "payloadType": "str",
        "x": 181.4930419921875,
        "y": 1643.1480712890625,
        "wires": [
            [
                "db4bf56e3cf4369c"
            ]
        ]
    },
    {
        "id": "49aa1ddee592921f",
        "type": "ui_multistate_switch",
        "z": "1679c76605c63db4",
        "name": "",
        "group": "e4eda8c90c2735e5",
        "order": 0,
        "width": 0,
        "height": "0",
        "label": "Sort Period",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "24 hr",
                "value": "24hr",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "7 day",
                "value": "7day",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Fortnight",
                "value": "14day",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "Sort Period",
        "x": 590.7349904378254,
        "y": 1493.7963492024737,
        "wires": [
            [
                "4a4c8e6deb54be50"
            ]
        ]
    },
    {
        "id": "8ba75ba36544dfc3",
        "type": "ui_multistate_switch",
        "z": "1679c76605c63db4",
        "name": "",
        "group": "e4eda8c90c2735e5",
        "order": 0,
        "width": 0,
        "height": "0",
        "label": "Choose View",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "2D, overlaid periods",
                "value": "2D",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "3D",
                "value": "3D",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "2D/3D View",
        "x": 604.8263549804688,
        "y": 1528.1480712890625,
        "wires": [
            [
                "4a4c8e6deb54be50"
            ]
        ]
    },
    {
        "id": "4a4c8e6deb54be50",
        "type": "debug",
        "z": "1679c76605c63db4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 791.4929809570312,
        "y": 1501.4814453125,
        "wires": []
    },
    {
        "id": "57af527ef271872c",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "ddeae6ecdcf2c128",
        "name": "test inject single object",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "single object",
        "payload": "{\"depth\":50,\"volume\":2.0}",
        "payloadType": "json",
        "x": 1329.8262939453125,
        "y": 1298.1480712890625,
        "wires": [
            [
                "6ce33e7211b38dc9"
            ]
        ]
    },
    {
        "id": "22d64b3aa18db696",
        "type": "debug",
        "z": "1679c76605c63db4",
        "g": "ddeae6ecdcf2c128",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1759.8320617675781,
        "y": 1300.1678009033203,
        "wires": []
    },
    {
        "id": "6ce33e7211b38dc9",
        "type": "function",
        "z": "1679c76605c63db4",
        "g": "ddeae6ecdcf2c128",
        "name": "typeof payload",
        "func": "node.warn(\"Payload type is \"+typeof msg.payload);\nnode.warn(\"IsArray is \"+Array.isArray(msg.payload));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1606.5044631958008,
        "y": 1305.0521636009216,
        "wires": [
            [
                "22d64b3aa18db696"
            ]
        ]
    },
    {
        "id": "81c90a123b3b9228",
        "type": "inject",
        "z": "1679c76605c63db4",
        "g": "ddeae6ecdcf2c128",
        "name": "test inject array of objects",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "array object",
        "payload": "[{\"depth\":50,\"volume\":2.0},{\"depth\":50,\"volume\":2.0}]",
        "payloadType": "json",
        "x": 1357.2509307861328,
        "y": 1355.8968558311462,
        "wires": [
            [
                "6ce33e7211b38dc9"
            ]
        ]
    },
    {
        "id": "12e0e8d9894c25dc",
        "type": "comment",
        "z": "1679c76605c63db4",
        "g": "ddeae6ecdcf2c128",
        "name": "Test detection of an Object vs. an Array of objects",
        "info": "",
        "x": 1484.8262964884439,
        "y": 1227.5752037315367,
        "wires": []
    },
    {
        "id": "8739a996ed7cec5a",
        "type": "ui_multistate_switch",
        "z": "1679c76605c63db4",
        "name": "",
        "group": "e4eda8c90c2735e5",
        "order": 0,
        "width": "6",
        "height": "2",
        "label": "Data Smooth",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": true,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "None",
                "value": "None",
                "valueType": "str",
                "color": "#009999"
            },
            {
                "label": "Mean",
                "value": "Mean",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "LOW -ESS",
                "value": "LOWESS",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Middle Point",
                "value": "Middlepoint",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "Data Smooth",
        "x": 629.7916259765625,
        "y": 1575.7777099609375,
        "wires": [
            [
                "4a4c8e6deb54be50"
            ]
        ]
    },
    {
        "id": "bc1a8e9950bd0a50",
        "type": "ui_text_input",
        "z": "1679c76605c63db4",
        "name": "",
        "label": "Log Annotation",
        "tooltip": "enter text and press return/tab",
        "group": "209041db3755ab7a",
        "order": 10,
        "width": "6",
        "height": "1",
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "Annotation",
        "sendOnBlur": false,
        "className": "",
        "topicType": "str",
        "x": 1586.21533203125,
        "y": 212.84050750732422,
        "wires": [
            [
                "5c30f5e7b64e8a6b",
                "40612a49fe6f973d"
            ]
        ]
    },
    {
        "id": "5c30f5e7b64e8a6b",
        "type": "function",
        "z": "1679c76605c63db4",
        "name": "add timestamp",
        "func": "msg.timestamp = Date.now();\nvar tmp = { \"payload\":msg.payload,\n            \"timestamp\":msg.timestamp,\n            \"topic\":\"Text Annotation\",\n            \"HumanTime\":(Date(msg.timestamp).toLocaleString('en-US')).slice(0,-32)\n        };\nmsg.payload = tmp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1781.8817291259766,
        "y": 211.77080059051514,
        "wires": [
            [
                "30560ded85116907"
            ]
        ]
    },
    {
        "id": "30560ded85116907",
        "type": "debug",
        "z": "1679c76605c63db4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1943.3447341918945,
        "y": 201.48145151138306,
        "wires": []
    },
    {
        "id": "5237eb4eb285b418",
        "type": "comment",
        "z": "1679c76605c63db4",
        "name": "add annotation /Service input",
        "info": "",
        "x": 1484.2651112874346,
        "y": 94.83795229085284,
        "wires": []
    },
    {
        "id": "1a7e8be993e67e46",
        "type": "inject",
        "z": "1679c76605c63db4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Some annotative text",
        "payloadType": "str",
        "x": 1372.598444620768,
        "y": 212.05440584309892,
        "wires": [
            [
                "bc1a8e9950bd0a50"
            ]
        ]
    },
    {
        "id": "40612a49fe6f973d",
        "type": "trigger",
        "z": "1679c76605c63db4",
        "name": "",
        "op1": "",
        "op2": " ",
        "op1type": "nul",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1595.7349904378252,
        "y": 292.7256908365885,
        "wires": [
            [
                "bc1a8e9950bd0a50"
            ]
        ]
    }
]